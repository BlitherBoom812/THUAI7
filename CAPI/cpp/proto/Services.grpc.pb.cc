// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: Services.proto

#include "Services.pb.h"
#include "Services.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace protobuf
{

    static const char* AvailableService_method_names[] = {
        "/protobuf.AvailableService/TryConnection",
        "/protobuf.AvailableService/AddBasicShip",
        "/protobuf.AvailableService/AddHome",
        "/protobuf.AvailableService/AddBuilding",
        "/protobuf.AvailableService/Move",
        "/protobuf.AvailableService/InstallCollectorModule",
        "/protobuf.AvailableService/InstallArmorModule",
        "/protobuf.AvailableService/InstallShieldModule",
        "/protobuf.AvailableService/InstallBuilderModule",
        "/protobuf.AvailableService/InstallBulletModule",
        "/protobuf.AvailableService/SendMessage",
        "/protobuf.AvailableService/StartRecovering",
        "/protobuf.AvailableService/StartProducing",
        "/protobuf.AvailableService/StartRecycling",
        "/protobuf.AvailableService/StartBuilding",
        "/protobuf.AvailableService/Attack",
        "/protobuf.AvailableService/BuildShip",
        "/protobuf.AvailableService/EndAllAction",
    };

    std::unique_ptr<AvailableService::Stub> AvailableService::NewStub(const std::shared_ptr<::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
    {
        (void)options;
        std::unique_ptr<AvailableService::Stub> stub(new AvailableService::Stub(channel, options));
        return stub;
    }

    AvailableService::Stub::Stub(const std::shared_ptr<::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) :
        channel_(channel),
        rpcmethod_TryConnection_(AvailableService_method_names[0], options.suffix_for_stats(), ::grpc::internal::RpcMethod::NORMAL_RPC, channel),
        rpcmethod_AddBasicShip_(AvailableService_method_names[1], options.suffix_for_stats(), ::grpc::internal::RpcMethod::SERVER_STREAMING, channel),
        rpcmethod_AddHome_(AvailableService_method_names[2], options.suffix_for_stats(), ::grpc::internal::RpcMethod::SERVER_STREAMING, channel),
        rpcmethod_AddBuilding_(AvailableService_method_names[3], options.suffix_for_stats(), ::grpc::internal::RpcMethod::SERVER_STREAMING, channel),
        rpcmethod_Move_(AvailableService_method_names[4], options.suffix_for_stats(), ::grpc::internal::RpcMethod::NORMAL_RPC, channel),
        rpcmethod_InstallCollectorModule_(AvailableService_method_names[5], options.suffix_for_stats(), ::grpc::internal::RpcMethod::NORMAL_RPC, channel),
        rpcmethod_InstallArmorModule_(AvailableService_method_names[6], options.suffix_for_stats(), ::grpc::internal::RpcMethod::NORMAL_RPC, channel),
        rpcmethod_InstallShieldModule_(AvailableService_method_names[7], options.suffix_for_stats(), ::grpc::internal::RpcMethod::NORMAL_RPC, channel),
        rpcmethod_InstallBuilderModule_(AvailableService_method_names[8], options.suffix_for_stats(), ::grpc::internal::RpcMethod::NORMAL_RPC, channel),
        rpcmethod_InstallBulletModule_(AvailableService_method_names[9], options.suffix_for_stats(), ::grpc::internal::RpcMethod::NORMAL_RPC, channel),
        rpcmethod_SendMessage_(AvailableService_method_names[10], options.suffix_for_stats(), ::grpc::internal::RpcMethod::NORMAL_RPC, channel),
        rpcmethod_StartRecovering_(AvailableService_method_names[11], options.suffix_for_stats(), ::grpc::internal::RpcMethod::NORMAL_RPC, channel),
        rpcmethod_StartProducing_(AvailableService_method_names[12], options.suffix_for_stats(), ::grpc::internal::RpcMethod::NORMAL_RPC, channel),
        rpcmethod_StartRecycling_(AvailableService_method_names[13], options.suffix_for_stats(), ::grpc::internal::RpcMethod::NORMAL_RPC, channel),
        rpcmethod_StartBuilding_(AvailableService_method_names[14], options.suffix_for_stats(), ::grpc::internal::RpcMethod::NORMAL_RPC, channel),
        rpcmethod_Attack_(AvailableService_method_names[15], options.suffix_for_stats(), ::grpc::internal::RpcMethod::NORMAL_RPC, channel),
        rpcmethod_BuildShip_(AvailableService_method_names[16], options.suffix_for_stats(), ::grpc::internal::RpcMethod::NORMAL_RPC, channel),
        rpcmethod_EndAllAction_(AvailableService_method_names[17], options.suffix_for_stats(), ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
    {
    }

    ::grpc::Status AvailableService::Stub::TryConnection(::grpc::ClientContext* context, const ::protobuf::IDMsg& request, ::protobuf::BoolRes* response)
    {
        return ::grpc::internal::BlockingUnaryCall<::protobuf::IDMsg, ::protobuf::BoolRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_TryConnection_, context, request, response);
    }

    void AvailableService::Stub::async::TryConnection(::grpc::ClientContext* context, const ::protobuf::IDMsg* request, ::protobuf::BoolRes* response, std::function<void(::grpc::Status)> f)
    {
        ::grpc::internal::CallbackUnaryCall<::protobuf::IDMsg, ::protobuf::BoolRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_TryConnection_, context, request, response, std::move(f));
    }

    void AvailableService::Stub::async::TryConnection(::grpc::ClientContext* context, const ::protobuf::IDMsg* request, ::protobuf::BoolRes* response, ::grpc::ClientUnaryReactor* reactor)
    {
        ::grpc::internal::ClientCallbackUnaryFactory::Create<::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_TryConnection_, context, request, response, reactor);
    }

    ::grpc::ClientAsyncResponseReader<::protobuf::BoolRes>* AvailableService::Stub::PrepareAsyncTryConnectionRaw(::grpc::ClientContext* context, const ::protobuf::IDMsg& request, ::grpc::CompletionQueue* cq)
    {
        return ::grpc::internal::ClientAsyncResponseReaderHelper::Create<::protobuf::BoolRes, ::protobuf::IDMsg, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_TryConnection_, context, request);
    }

    ::grpc::ClientAsyncResponseReader<::protobuf::BoolRes>* AvailableService::Stub::AsyncTryConnectionRaw(::grpc::ClientContext* context, const ::protobuf::IDMsg& request, ::grpc::CompletionQueue* cq)
    {
        auto* result =
            this->PrepareAsyncTryConnectionRaw(context, request, cq);
        result->StartCall();
        return result;
    }

    ::grpc::ClientReader<::protobuf::MessageToClient>* AvailableService::Stub::AddBasicShipRaw(::grpc::ClientContext* context, const ::protobuf::ShipMsg& request)
    {
        return ::grpc::internal::ClientReaderFactory<::protobuf::MessageToClient>::Create(channel_.get(), rpcmethod_AddBasicShip_, context, request);
    }

    void AvailableService::Stub::async::AddBasicShip(::grpc::ClientContext* context, const ::protobuf::ShipMsg* request, ::grpc::ClientReadReactor<::protobuf::MessageToClient>* reactor)
    {
        ::grpc::internal::ClientCallbackReaderFactory<::protobuf::MessageToClient>::Create(stub_->channel_.get(), stub_->rpcmethod_AddBasicShip_, context, request, reactor);
    }

    ::grpc::ClientAsyncReader<::protobuf::MessageToClient>* AvailableService::Stub::AsyncAddBasicShipRaw(::grpc::ClientContext* context, const ::protobuf::ShipMsg& request, ::grpc::CompletionQueue* cq, void* tag)
    {
        return ::grpc::internal::ClientAsyncReaderFactory<::protobuf::MessageToClient>::Create(channel_.get(), cq, rpcmethod_AddBasicShip_, context, request, true, tag);
    }

    ::grpc::ClientAsyncReader<::protobuf::MessageToClient>* AvailableService::Stub::PrepareAsyncAddBasicShipRaw(::grpc::ClientContext* context, const ::protobuf::ShipMsg& request, ::grpc::CompletionQueue* cq)
    {
        return ::grpc::internal::ClientAsyncReaderFactory<::protobuf::MessageToClient>::Create(channel_.get(), cq, rpcmethod_AddBasicShip_, context, request, false, nullptr);
    }

    ::grpc::ClientReader<::protobuf::MessageToClient>* AvailableService::Stub::AddHomeRaw(::grpc::ClientContext* context, const ::protobuf::HomeMsg& request)
    {
        return ::grpc::internal::ClientReaderFactory<::protobuf::MessageToClient>::Create(channel_.get(), rpcmethod_AddHome_, context, request);
    }

    void AvailableService::Stub::async::AddHome(::grpc::ClientContext* context, const ::protobuf::HomeMsg* request, ::grpc::ClientReadReactor<::protobuf::MessageToClient>* reactor)
    {
        ::grpc::internal::ClientCallbackReaderFactory<::protobuf::MessageToClient>::Create(stub_->channel_.get(), stub_->rpcmethod_AddHome_, context, request, reactor);
    }

    ::grpc::ClientAsyncReader<::protobuf::MessageToClient>* AvailableService::Stub::AsyncAddHomeRaw(::grpc::ClientContext* context, const ::protobuf::HomeMsg& request, ::grpc::CompletionQueue* cq, void* tag)
    {
        return ::grpc::internal::ClientAsyncReaderFactory<::protobuf::MessageToClient>::Create(channel_.get(), cq, rpcmethod_AddHome_, context, request, true, tag);
    }

    ::grpc::ClientAsyncReader<::protobuf::MessageToClient>* AvailableService::Stub::PrepareAsyncAddHomeRaw(::grpc::ClientContext* context, const ::protobuf::HomeMsg& request, ::grpc::CompletionQueue* cq)
    {
        return ::grpc::internal::ClientAsyncReaderFactory<::protobuf::MessageToClient>::Create(channel_.get(), cq, rpcmethod_AddHome_, context, request, false, nullptr);
    }

    ::grpc::ClientReader<::protobuf::MessageToClient>* AvailableService::Stub::AddBuildingRaw(::grpc::ClientContext* context, const ::protobuf::BuildingMsg& request)
    {
        return ::grpc::internal::ClientReaderFactory<::protobuf::MessageToClient>::Create(channel_.get(), rpcmethod_AddBuilding_, context, request);
    }

    void AvailableService::Stub::async::AddBuilding(::grpc::ClientContext* context, const ::protobuf::BuildingMsg* request, ::grpc::ClientReadReactor<::protobuf::MessageToClient>* reactor)
    {
        ::grpc::internal::ClientCallbackReaderFactory<::protobuf::MessageToClient>::Create(stub_->channel_.get(), stub_->rpcmethod_AddBuilding_, context, request, reactor);
    }

    ::grpc::ClientAsyncReader<::protobuf::MessageToClient>* AvailableService::Stub::AsyncAddBuildingRaw(::grpc::ClientContext* context, const ::protobuf::BuildingMsg& request, ::grpc::CompletionQueue* cq, void* tag)
    {
        return ::grpc::internal::ClientAsyncReaderFactory<::protobuf::MessageToClient>::Create(channel_.get(), cq, rpcmethod_AddBuilding_, context, request, true, tag);
    }

    ::grpc::ClientAsyncReader<::protobuf::MessageToClient>* AvailableService::Stub::PrepareAsyncAddBuildingRaw(::grpc::ClientContext* context, const ::protobuf::BuildingMsg& request, ::grpc::CompletionQueue* cq)
    {
        return ::grpc::internal::ClientAsyncReaderFactory<::protobuf::MessageToClient>::Create(channel_.get(), cq, rpcmethod_AddBuilding_, context, request, false, nullptr);
    }

    ::grpc::Status AvailableService::Stub::Move(::grpc::ClientContext* context, const ::protobuf::MoveMsg& request, ::protobuf::MoveRes* response)
    {
        return ::grpc::internal::BlockingUnaryCall<::protobuf::MoveMsg, ::protobuf::MoveRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Move_, context, request, response);
    }

    void AvailableService::Stub::async::Move(::grpc::ClientContext* context, const ::protobuf::MoveMsg* request, ::protobuf::MoveRes* response, std::function<void(::grpc::Status)> f)
    {
        ::grpc::internal::CallbackUnaryCall<::protobuf::MoveMsg, ::protobuf::MoveRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Move_, context, request, response, std::move(f));
    }

    void AvailableService::Stub::async::Move(::grpc::ClientContext* context, const ::protobuf::MoveMsg* request, ::protobuf::MoveRes* response, ::grpc::ClientUnaryReactor* reactor)
    {
        ::grpc::internal::ClientCallbackUnaryFactory::Create<::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Move_, context, request, response, reactor);
    }

    ::grpc::ClientAsyncResponseReader<::protobuf::MoveRes>* AvailableService::Stub::PrepareAsyncMoveRaw(::grpc::ClientContext* context, const ::protobuf::MoveMsg& request, ::grpc::CompletionQueue* cq)
    {
        return ::grpc::internal::ClientAsyncResponseReaderHelper::Create<::protobuf::MoveRes, ::protobuf::MoveMsg, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Move_, context, request);
    }

    ::grpc::ClientAsyncResponseReader<::protobuf::MoveRes>* AvailableService::Stub::AsyncMoveRaw(::grpc::ClientContext* context, const ::protobuf::MoveMsg& request, ::grpc::CompletionQueue* cq)
    {
        auto* result =
            this->PrepareAsyncMoveRaw(context, request, cq);
        result->StartCall();
        return result;
    }

    ::grpc::Status AvailableService::Stub::InstallCollectorModule(::grpc::ClientContext* context, const ::protobuf::CollectorMsg& request, ::protobuf::BoolRes* response)
    {
        return ::grpc::internal::BlockingUnaryCall<::protobuf::CollectorMsg, ::protobuf::BoolRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_InstallCollectorModule_, context, request, response);
    }

    void AvailableService::Stub::async::InstallCollectorModule(::grpc::ClientContext* context, const ::protobuf::CollectorMsg* request, ::protobuf::BoolRes* response, std::function<void(::grpc::Status)> f)
    {
        ::grpc::internal::CallbackUnaryCall<::protobuf::CollectorMsg, ::protobuf::BoolRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_InstallCollectorModule_, context, request, response, std::move(f));
    }

    void AvailableService::Stub::async::InstallCollectorModule(::grpc::ClientContext* context, const ::protobuf::CollectorMsg* request, ::protobuf::BoolRes* response, ::grpc::ClientUnaryReactor* reactor)
    {
        ::grpc::internal::ClientCallbackUnaryFactory::Create<::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_InstallCollectorModule_, context, request, response, reactor);
    }

    ::grpc::ClientAsyncResponseReader<::protobuf::BoolRes>* AvailableService::Stub::PrepareAsyncInstallCollectorModuleRaw(::grpc::ClientContext* context, const ::protobuf::CollectorMsg& request, ::grpc::CompletionQueue* cq)
    {
        return ::grpc::internal::ClientAsyncResponseReaderHelper::Create<::protobuf::BoolRes, ::protobuf::CollectorMsg, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_InstallCollectorModule_, context, request);
    }

    ::grpc::ClientAsyncResponseReader<::protobuf::BoolRes>* AvailableService::Stub::AsyncInstallCollectorModuleRaw(::grpc::ClientContext* context, const ::protobuf::CollectorMsg& request, ::grpc::CompletionQueue* cq)
    {
        auto* result =
            this->PrepareAsyncInstallCollectorModuleRaw(context, request, cq);
        result->StartCall();
        return result;
    }

    ::grpc::Status AvailableService::Stub::InstallArmorModule(::grpc::ClientContext* context, const ::protobuf::ArmorMsg& request, ::protobuf::BoolRes* response)
    {
        return ::grpc::internal::BlockingUnaryCall<::protobuf::ArmorMsg, ::protobuf::BoolRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_InstallArmorModule_, context, request, response);
    }

    void AvailableService::Stub::async::InstallArmorModule(::grpc::ClientContext* context, const ::protobuf::ArmorMsg* request, ::protobuf::BoolRes* response, std::function<void(::grpc::Status)> f)
    {
        ::grpc::internal::CallbackUnaryCall<::protobuf::ArmorMsg, ::protobuf::BoolRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_InstallArmorModule_, context, request, response, std::move(f));
    }

    void AvailableService::Stub::async::InstallArmorModule(::grpc::ClientContext* context, const ::protobuf::ArmorMsg* request, ::protobuf::BoolRes* response, ::grpc::ClientUnaryReactor* reactor)
    {
        ::grpc::internal::ClientCallbackUnaryFactory::Create<::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_InstallArmorModule_, context, request, response, reactor);
    }

    ::grpc::ClientAsyncResponseReader<::protobuf::BoolRes>* AvailableService::Stub::PrepareAsyncInstallArmorModuleRaw(::grpc::ClientContext* context, const ::protobuf::ArmorMsg& request, ::grpc::CompletionQueue* cq)
    {
        return ::grpc::internal::ClientAsyncResponseReaderHelper::Create<::protobuf::BoolRes, ::protobuf::ArmorMsg, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_InstallArmorModule_, context, request);
    }

    ::grpc::ClientAsyncResponseReader<::protobuf::BoolRes>* AvailableService::Stub::AsyncInstallArmorModuleRaw(::grpc::ClientContext* context, const ::protobuf::ArmorMsg& request, ::grpc::CompletionQueue* cq)
    {
        auto* result =
            this->PrepareAsyncInstallArmorModuleRaw(context, request, cq);
        result->StartCall();
        return result;
    }

    ::grpc::Status AvailableService::Stub::InstallShieldModule(::grpc::ClientContext* context, const ::protobuf::ShieldMsg& request, ::protobuf::BoolRes* response)
    {
        return ::grpc::internal::BlockingUnaryCall<::protobuf::ShieldMsg, ::protobuf::BoolRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_InstallShieldModule_, context, request, response);
    }

    void AvailableService::Stub::async::InstallShieldModule(::grpc::ClientContext* context, const ::protobuf::ShieldMsg* request, ::protobuf::BoolRes* response, std::function<void(::grpc::Status)> f)
    {
        ::grpc::internal::CallbackUnaryCall<::protobuf::ShieldMsg, ::protobuf::BoolRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_InstallShieldModule_, context, request, response, std::move(f));
    }

    void AvailableService::Stub::async::InstallShieldModule(::grpc::ClientContext* context, const ::protobuf::ShieldMsg* request, ::protobuf::BoolRes* response, ::grpc::ClientUnaryReactor* reactor)
    {
        ::grpc::internal::ClientCallbackUnaryFactory::Create<::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_InstallShieldModule_, context, request, response, reactor);
    }

    ::grpc::ClientAsyncResponseReader<::protobuf::BoolRes>* AvailableService::Stub::PrepareAsyncInstallShieldModuleRaw(::grpc::ClientContext* context, const ::protobuf::ShieldMsg& request, ::grpc::CompletionQueue* cq)
    {
        return ::grpc::internal::ClientAsyncResponseReaderHelper::Create<::protobuf::BoolRes, ::protobuf::ShieldMsg, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_InstallShieldModule_, context, request);
    }

    ::grpc::ClientAsyncResponseReader<::protobuf::BoolRes>* AvailableService::Stub::AsyncInstallShieldModuleRaw(::grpc::ClientContext* context, const ::protobuf::ShieldMsg& request, ::grpc::CompletionQueue* cq)
    {
        auto* result =
            this->PrepareAsyncInstallShieldModuleRaw(context, request, cq);
        result->StartCall();
        return result;
    }

    ::grpc::Status AvailableService::Stub::InstallBuilderModule(::grpc::ClientContext* context, const ::protobuf::BuilderMsg& request, ::protobuf::BoolRes* response)
    {
        return ::grpc::internal::BlockingUnaryCall<::protobuf::BuilderMsg, ::protobuf::BoolRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_InstallBuilderModule_, context, request, response);
    }

    void AvailableService::Stub::async::InstallBuilderModule(::grpc::ClientContext* context, const ::protobuf::BuilderMsg* request, ::protobuf::BoolRes* response, std::function<void(::grpc::Status)> f)
    {
        ::grpc::internal::CallbackUnaryCall<::protobuf::BuilderMsg, ::protobuf::BoolRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_InstallBuilderModule_, context, request, response, std::move(f));
    }

    void AvailableService::Stub::async::InstallBuilderModule(::grpc::ClientContext* context, const ::protobuf::BuilderMsg* request, ::protobuf::BoolRes* response, ::grpc::ClientUnaryReactor* reactor)
    {
        ::grpc::internal::ClientCallbackUnaryFactory::Create<::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_InstallBuilderModule_, context, request, response, reactor);
    }

    ::grpc::ClientAsyncResponseReader<::protobuf::BoolRes>* AvailableService::Stub::PrepareAsyncInstallBuilderModuleRaw(::grpc::ClientContext* context, const ::protobuf::BuilderMsg& request, ::grpc::CompletionQueue* cq)
    {
        return ::grpc::internal::ClientAsyncResponseReaderHelper::Create<::protobuf::BoolRes, ::protobuf::BuilderMsg, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_InstallBuilderModule_, context, request);
    }

    ::grpc::ClientAsyncResponseReader<::protobuf::BoolRes>* AvailableService::Stub::AsyncInstallBuilderModuleRaw(::grpc::ClientContext* context, const ::protobuf::BuilderMsg& request, ::grpc::CompletionQueue* cq)
    {
        auto* result =
            this->PrepareAsyncInstallBuilderModuleRaw(context, request, cq);
        result->StartCall();
        return result;
    }

    ::grpc::Status AvailableService::Stub::InstallBulletModule(::grpc::ClientContext* context, const ::protobuf::BulleterMsg& request, ::protobuf::BoolRes* response)
    {
        return ::grpc::internal::BlockingUnaryCall<::protobuf::BulleterMsg, ::protobuf::BoolRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_InstallBulletModule_, context, request, response);
    }

    void AvailableService::Stub::async::InstallBulletModule(::grpc::ClientContext* context, const ::protobuf::BulleterMsg* request, ::protobuf::BoolRes* response, std::function<void(::grpc::Status)> f)
    {
        ::grpc::internal::CallbackUnaryCall<::protobuf::BulleterMsg, ::protobuf::BoolRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_InstallBulletModule_, context, request, response, std::move(f));
    }

    void AvailableService::Stub::async::InstallBulletModule(::grpc::ClientContext* context, const ::protobuf::BulleterMsg* request, ::protobuf::BoolRes* response, ::grpc::ClientUnaryReactor* reactor)
    {
        ::grpc::internal::ClientCallbackUnaryFactory::Create<::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_InstallBulletModule_, context, request, response, reactor);
    }

    ::grpc::ClientAsyncResponseReader<::protobuf::BoolRes>* AvailableService::Stub::PrepareAsyncInstallBulletModuleRaw(::grpc::ClientContext* context, const ::protobuf::BulleterMsg& request, ::grpc::CompletionQueue* cq)
    {
        return ::grpc::internal::ClientAsyncResponseReaderHelper::Create<::protobuf::BoolRes, ::protobuf::BulleterMsg, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_InstallBulletModule_, context, request);
    }

    ::grpc::ClientAsyncResponseReader<::protobuf::BoolRes>* AvailableService::Stub::AsyncInstallBulletModuleRaw(::grpc::ClientContext* context, const ::protobuf::BulleterMsg& request, ::grpc::CompletionQueue* cq)
    {
        auto* result =
            this->PrepareAsyncInstallBulletModuleRaw(context, request, cq);
        result->StartCall();
        return result;
    }

    ::grpc::Status AvailableService::Stub::SendMessage(::grpc::ClientContext* context, const ::protobuf::SendMsg& request, ::protobuf::BoolRes* response)
    {
        return ::grpc::internal::BlockingUnaryCall<::protobuf::SendMsg, ::protobuf::BoolRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SendMessage_, context, request, response);
    }

    void AvailableService::Stub::async::SendMessage(::grpc::ClientContext* context, const ::protobuf::SendMsg* request, ::protobuf::BoolRes* response, std::function<void(::grpc::Status)> f)
    {
        ::grpc::internal::CallbackUnaryCall<::protobuf::SendMsg, ::protobuf::BoolRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SendMessage_, context, request, response, std::move(f));
    }

    void AvailableService::Stub::async::SendMessage(::grpc::ClientContext* context, const ::protobuf::SendMsg* request, ::protobuf::BoolRes* response, ::grpc::ClientUnaryReactor* reactor)
    {
        ::grpc::internal::ClientCallbackUnaryFactory::Create<::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SendMessage_, context, request, response, reactor);
    }

    ::grpc::ClientAsyncResponseReader<::protobuf::BoolRes>* AvailableService::Stub::PrepareAsyncSendMessageRaw(::grpc::ClientContext* context, const ::protobuf::SendMsg& request, ::grpc::CompletionQueue* cq)
    {
        return ::grpc::internal::ClientAsyncResponseReaderHelper::Create<::protobuf::BoolRes, ::protobuf::SendMsg, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SendMessage_, context, request);
    }

    ::grpc::ClientAsyncResponseReader<::protobuf::BoolRes>* AvailableService::Stub::AsyncSendMessageRaw(::grpc::ClientContext* context, const ::protobuf::SendMsg& request, ::grpc::CompletionQueue* cq)
    {
        auto* result =
            this->PrepareAsyncSendMessageRaw(context, request, cq);
        result->StartCall();
        return result;
    }

    ::grpc::Status AvailableService::Stub::StartRecovering(::grpc::ClientContext* context, const ::protobuf::IDMsg& request, ::protobuf::BoolRes* response)
    {
        return ::grpc::internal::BlockingUnaryCall<::protobuf::IDMsg, ::protobuf::BoolRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_StartRecovering_, context, request, response);
    }

    void AvailableService::Stub::async::StartRecovering(::grpc::ClientContext* context, const ::protobuf::IDMsg* request, ::protobuf::BoolRes* response, std::function<void(::grpc::Status)> f)
    {
        ::grpc::internal::CallbackUnaryCall<::protobuf::IDMsg, ::protobuf::BoolRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_StartRecovering_, context, request, response, std::move(f));
    }

    void AvailableService::Stub::async::StartRecovering(::grpc::ClientContext* context, const ::protobuf::IDMsg* request, ::protobuf::BoolRes* response, ::grpc::ClientUnaryReactor* reactor)
    {
        ::grpc::internal::ClientCallbackUnaryFactory::Create<::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_StartRecovering_, context, request, response, reactor);
    }

    ::grpc::ClientAsyncResponseReader<::protobuf::BoolRes>* AvailableService::Stub::PrepareAsyncStartRecoveringRaw(::grpc::ClientContext* context, const ::protobuf::IDMsg& request, ::grpc::CompletionQueue* cq)
    {
        return ::grpc::internal::ClientAsyncResponseReaderHelper::Create<::protobuf::BoolRes, ::protobuf::IDMsg, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_StartRecovering_, context, request);
    }

    ::grpc::ClientAsyncResponseReader<::protobuf::BoolRes>* AvailableService::Stub::AsyncStartRecoveringRaw(::grpc::ClientContext* context, const ::protobuf::IDMsg& request, ::grpc::CompletionQueue* cq)
    {
        auto* result =
            this->PrepareAsyncStartRecoveringRaw(context, request, cq);
        result->StartCall();
        return result;
    }

    ::grpc::Status AvailableService::Stub::StartProducing(::grpc::ClientContext* context, const ::protobuf::IDMsg& request, ::protobuf::BoolRes* response)
    {
        return ::grpc::internal::BlockingUnaryCall<::protobuf::IDMsg, ::protobuf::BoolRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_StartProducing_, context, request, response);
    }

    void AvailableService::Stub::async::StartProducing(::grpc::ClientContext* context, const ::protobuf::IDMsg* request, ::protobuf::BoolRes* response, std::function<void(::grpc::Status)> f)
    {
        ::grpc::internal::CallbackUnaryCall<::protobuf::IDMsg, ::protobuf::BoolRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_StartProducing_, context, request, response, std::move(f));
    }

    void AvailableService::Stub::async::StartProducing(::grpc::ClientContext* context, const ::protobuf::IDMsg* request, ::protobuf::BoolRes* response, ::grpc::ClientUnaryReactor* reactor)
    {
        ::grpc::internal::ClientCallbackUnaryFactory::Create<::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_StartProducing_, context, request, response, reactor);
    }

    ::grpc::ClientAsyncResponseReader<::protobuf::BoolRes>* AvailableService::Stub::PrepareAsyncStartProducingRaw(::grpc::ClientContext* context, const ::protobuf::IDMsg& request, ::grpc::CompletionQueue* cq)
    {
        return ::grpc::internal::ClientAsyncResponseReaderHelper::Create<::protobuf::BoolRes, ::protobuf::IDMsg, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_StartProducing_, context, request);
    }

    ::grpc::ClientAsyncResponseReader<::protobuf::BoolRes>* AvailableService::Stub::AsyncStartProducingRaw(::grpc::ClientContext* context, const ::protobuf::IDMsg& request, ::grpc::CompletionQueue* cq)
    {
        auto* result =
            this->PrepareAsyncStartProducingRaw(context, request, cq);
        result->StartCall();
        return result;
    }

    ::grpc::Status AvailableService::Stub::StartRecycling(::grpc::ClientContext* context, const ::protobuf::IDMsg& request, ::protobuf::BoolRes* response)
    {
        return ::grpc::internal::BlockingUnaryCall<::protobuf::IDMsg, ::protobuf::BoolRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_StartRecycling_, context, request, response);
    }

    void AvailableService::Stub::async::StartRecycling(::grpc::ClientContext* context, const ::protobuf::IDMsg* request, ::protobuf::BoolRes* response, std::function<void(::grpc::Status)> f)
    {
        ::grpc::internal::CallbackUnaryCall<::protobuf::IDMsg, ::protobuf::BoolRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_StartRecycling_, context, request, response, std::move(f));
    }

    void AvailableService::Stub::async::StartRecycling(::grpc::ClientContext* context, const ::protobuf::IDMsg* request, ::protobuf::BoolRes* response, ::grpc::ClientUnaryReactor* reactor)
    {
        ::grpc::internal::ClientCallbackUnaryFactory::Create<::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_StartRecycling_, context, request, response, reactor);
    }

    ::grpc::ClientAsyncResponseReader<::protobuf::BoolRes>* AvailableService::Stub::PrepareAsyncStartRecyclingRaw(::grpc::ClientContext* context, const ::protobuf::IDMsg& request, ::grpc::CompletionQueue* cq)
    {
        return ::grpc::internal::ClientAsyncResponseReaderHelper::Create<::protobuf::BoolRes, ::protobuf::IDMsg, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_StartRecycling_, context, request);
    }

    ::grpc::ClientAsyncResponseReader<::protobuf::BoolRes>* AvailableService::Stub::AsyncStartRecyclingRaw(::grpc::ClientContext* context, const ::protobuf::IDMsg& request, ::grpc::CompletionQueue* cq)
    {
        auto* result =
            this->PrepareAsyncStartRecyclingRaw(context, request, cq);
        result->StartCall();
        return result;
    }

    ::grpc::Status AvailableService::Stub::StartBuilding(::grpc::ClientContext* context, const ::protobuf::BuildMsg& request, ::protobuf::BoolRes* response)
    {
        return ::grpc::internal::BlockingUnaryCall<::protobuf::BuildMsg, ::protobuf::BoolRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_StartBuilding_, context, request, response);
    }

    void AvailableService::Stub::async::StartBuilding(::grpc::ClientContext* context, const ::protobuf::BuildMsg* request, ::protobuf::BoolRes* response, std::function<void(::grpc::Status)> f)
    {
        ::grpc::internal::CallbackUnaryCall<::protobuf::BuildMsg, ::protobuf::BoolRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_StartBuilding_, context, request, response, std::move(f));
    }

    void AvailableService::Stub::async::StartBuilding(::grpc::ClientContext* context, const ::protobuf::BuildMsg* request, ::protobuf::BoolRes* response, ::grpc::ClientUnaryReactor* reactor)
    {
        ::grpc::internal::ClientCallbackUnaryFactory::Create<::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_StartBuilding_, context, request, response, reactor);
    }

    ::grpc::ClientAsyncResponseReader<::protobuf::BoolRes>* AvailableService::Stub::PrepareAsyncStartBuildingRaw(::grpc::ClientContext* context, const ::protobuf::BuildMsg& request, ::grpc::CompletionQueue* cq)
    {
        return ::grpc::internal::ClientAsyncResponseReaderHelper::Create<::protobuf::BoolRes, ::protobuf::BuildMsg, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_StartBuilding_, context, request);
    }

    ::grpc::ClientAsyncResponseReader<::protobuf::BoolRes>* AvailableService::Stub::AsyncStartBuildingRaw(::grpc::ClientContext* context, const ::protobuf::BuildMsg& request, ::grpc::CompletionQueue* cq)
    {
        auto* result =
            this->PrepareAsyncStartBuildingRaw(context, request, cq);
        result->StartCall();
        return result;
    }

    ::grpc::Status AvailableService::Stub::Attack(::grpc::ClientContext* context, const ::protobuf::AttackMsg& request, ::protobuf::BoolRes* response)
    {
        return ::grpc::internal::BlockingUnaryCall<::protobuf::AttackMsg, ::protobuf::BoolRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Attack_, context, request, response);
    }

    void AvailableService::Stub::async::Attack(::grpc::ClientContext* context, const ::protobuf::AttackMsg* request, ::protobuf::BoolRes* response, std::function<void(::grpc::Status)> f)
    {
        ::grpc::internal::CallbackUnaryCall<::protobuf::AttackMsg, ::protobuf::BoolRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Attack_, context, request, response, std::move(f));
    }

    void AvailableService::Stub::async::Attack(::grpc::ClientContext* context, const ::protobuf::AttackMsg* request, ::protobuf::BoolRes* response, ::grpc::ClientUnaryReactor* reactor)
    {
        ::grpc::internal::ClientCallbackUnaryFactory::Create<::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Attack_, context, request, response, reactor);
    }

    ::grpc::ClientAsyncResponseReader<::protobuf::BoolRes>* AvailableService::Stub::PrepareAsyncAttackRaw(::grpc::ClientContext* context, const ::protobuf::AttackMsg& request, ::grpc::CompletionQueue* cq)
    {
        return ::grpc::internal::ClientAsyncResponseReaderHelper::Create<::protobuf::BoolRes, ::protobuf::AttackMsg, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Attack_, context, request);
    }

    ::grpc::ClientAsyncResponseReader<::protobuf::BoolRes>* AvailableService::Stub::AsyncAttackRaw(::grpc::ClientContext* context, const ::protobuf::AttackMsg& request, ::grpc::CompletionQueue* cq)
    {
        auto* result =
            this->PrepareAsyncAttackRaw(context, request, cq);
        result->StartCall();
        return result;
    }

    ::grpc::Status AvailableService::Stub::BuildShip(::grpc::ClientContext* context, const ::protobuf::BuildMsg& request, ::protobuf::BoolRes* response)
    {
        return ::grpc::internal::BlockingUnaryCall<::protobuf::BuildMsg, ::protobuf::BoolRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_BuildShip_, context, request, response);
    }

    void AvailableService::Stub::async::BuildShip(::grpc::ClientContext* context, const ::protobuf::BuildMsg* request, ::protobuf::BoolRes* response, std::function<void(::grpc::Status)> f)
    {
        ::grpc::internal::CallbackUnaryCall<::protobuf::BuildMsg, ::protobuf::BoolRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_BuildShip_, context, request, response, std::move(f));
    }

    void AvailableService::Stub::async::BuildShip(::grpc::ClientContext* context, const ::protobuf::BuildMsg* request, ::protobuf::BoolRes* response, ::grpc::ClientUnaryReactor* reactor)
    {
        ::grpc::internal::ClientCallbackUnaryFactory::Create<::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_BuildShip_, context, request, response, reactor);
    }

    ::grpc::ClientAsyncResponseReader<::protobuf::BoolRes>* AvailableService::Stub::PrepareAsyncBuildShipRaw(::grpc::ClientContext* context, const ::protobuf::BuildMsg& request, ::grpc::CompletionQueue* cq)
    {
        return ::grpc::internal::ClientAsyncResponseReaderHelper::Create<::protobuf::BoolRes, ::protobuf::BuildMsg, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_BuildShip_, context, request);
    }

    ::grpc::ClientAsyncResponseReader<::protobuf::BoolRes>* AvailableService::Stub::AsyncBuildShipRaw(::grpc::ClientContext* context, const ::protobuf::BuildMsg& request, ::grpc::CompletionQueue* cq)
    {
        auto* result =
            this->PrepareAsyncBuildShipRaw(context, request, cq);
        result->StartCall();
        return result;
    }

    ::grpc::Status AvailableService::Stub::EndAllAction(::grpc::ClientContext* context, const ::protobuf::IDMsg& request, ::protobuf::BoolRes* response)
    {
        return ::grpc::internal::BlockingUnaryCall<::protobuf::IDMsg, ::protobuf::BoolRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_EndAllAction_, context, request, response);
    }

    void AvailableService::Stub::async::EndAllAction(::grpc::ClientContext* context, const ::protobuf::IDMsg* request, ::protobuf::BoolRes* response, std::function<void(::grpc::Status)> f)
    {
        ::grpc::internal::CallbackUnaryCall<::protobuf::IDMsg, ::protobuf::BoolRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_EndAllAction_, context, request, response, std::move(f));
    }

    void AvailableService::Stub::async::EndAllAction(::grpc::ClientContext* context, const ::protobuf::IDMsg* request, ::protobuf::BoolRes* response, ::grpc::ClientUnaryReactor* reactor)
    {
        ::grpc::internal::ClientCallbackUnaryFactory::Create<::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_EndAllAction_, context, request, response, reactor);
    }

    ::grpc::ClientAsyncResponseReader<::protobuf::BoolRes>* AvailableService::Stub::PrepareAsyncEndAllActionRaw(::grpc::ClientContext* context, const ::protobuf::IDMsg& request, ::grpc::CompletionQueue* cq)
    {
        return ::grpc::internal::ClientAsyncResponseReaderHelper::Create<::protobuf::BoolRes, ::protobuf::IDMsg, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_EndAllAction_, context, request);
    }

    ::grpc::ClientAsyncResponseReader<::protobuf::BoolRes>* AvailableService::Stub::AsyncEndAllActionRaw(::grpc::ClientContext* context, const ::protobuf::IDMsg& request, ::grpc::CompletionQueue* cq)
    {
        auto* result =
            this->PrepareAsyncEndAllActionRaw(context, request, cq);
        result->StartCall();
        return result;
    }

    AvailableService::Service::Service()
    {
        AddMethod(new ::grpc::internal::RpcServiceMethod(
            AvailableService_method_names[0],
            ::grpc::internal::RpcMethod::NORMAL_RPC,
            new ::grpc::internal::RpcMethodHandler<AvailableService::Service, ::protobuf::IDMsg, ::protobuf::BoolRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
                [](AvailableService::Service* service,
                   ::grpc::ServerContext* ctx,
                   const ::protobuf::IDMsg* req,
                   ::protobuf::BoolRes* resp)
                {
                    return service->TryConnection(ctx, req, resp);
                },
                this
            )
        ));
        AddMethod(new ::grpc::internal::RpcServiceMethod(
            AvailableService_method_names[1],
            ::grpc::internal::RpcMethod::SERVER_STREAMING,
            new ::grpc::internal::ServerStreamingHandler<AvailableService::Service, ::protobuf::ShipMsg, ::protobuf::MessageToClient>(
                [](AvailableService::Service* service,
                   ::grpc::ServerContext* ctx,
                   const ::protobuf::ShipMsg* req,
                   ::grpc::ServerWriter<::protobuf::MessageToClient>* writer)
                {
                    return service->AddBasicShip(ctx, req, writer);
                },
                this
            )
        ));
        AddMethod(new ::grpc::internal::RpcServiceMethod(
            AvailableService_method_names[2],
            ::grpc::internal::RpcMethod::SERVER_STREAMING,
            new ::grpc::internal::ServerStreamingHandler<AvailableService::Service, ::protobuf::HomeMsg, ::protobuf::MessageToClient>(
                [](AvailableService::Service* service,
                   ::grpc::ServerContext* ctx,
                   const ::protobuf::HomeMsg* req,
                   ::grpc::ServerWriter<::protobuf::MessageToClient>* writer)
                {
                    return service->AddHome(ctx, req, writer);
                },
                this
            )
        ));
        AddMethod(new ::grpc::internal::RpcServiceMethod(
            AvailableService_method_names[3],
            ::grpc::internal::RpcMethod::SERVER_STREAMING,
            new ::grpc::internal::ServerStreamingHandler<AvailableService::Service, ::protobuf::BuildingMsg, ::protobuf::MessageToClient>(
                [](AvailableService::Service* service,
                   ::grpc::ServerContext* ctx,
                   const ::protobuf::BuildingMsg* req,
                   ::grpc::ServerWriter<::protobuf::MessageToClient>* writer)
                {
                    return service->AddBuilding(ctx, req, writer);
                },
                this
            )
        ));
        AddMethod(new ::grpc::internal::RpcServiceMethod(
            AvailableService_method_names[4],
            ::grpc::internal::RpcMethod::NORMAL_RPC,
            new ::grpc::internal::RpcMethodHandler<AvailableService::Service, ::protobuf::MoveMsg, ::protobuf::MoveRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
                [](AvailableService::Service* service,
                   ::grpc::ServerContext* ctx,
                   const ::protobuf::MoveMsg* req,
                   ::protobuf::MoveRes* resp)
                {
                    return service->Move(ctx, req, resp);
                },
                this
            )
        ));
        AddMethod(new ::grpc::internal::RpcServiceMethod(
            AvailableService_method_names[5],
            ::grpc::internal::RpcMethod::NORMAL_RPC,
            new ::grpc::internal::RpcMethodHandler<AvailableService::Service, ::protobuf::CollectorMsg, ::protobuf::BoolRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
                [](AvailableService::Service* service,
                   ::grpc::ServerContext* ctx,
                   const ::protobuf::CollectorMsg* req,
                   ::protobuf::BoolRes* resp)
                {
                    return service->InstallCollectorModule(ctx, req, resp);
                },
                this
            )
        ));
        AddMethod(new ::grpc::internal::RpcServiceMethod(
            AvailableService_method_names[6],
            ::grpc::internal::RpcMethod::NORMAL_RPC,
            new ::grpc::internal::RpcMethodHandler<AvailableService::Service, ::protobuf::ArmorMsg, ::protobuf::BoolRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
                [](AvailableService::Service* service,
                   ::grpc::ServerContext* ctx,
                   const ::protobuf::ArmorMsg* req,
                   ::protobuf::BoolRes* resp)
                {
                    return service->InstallArmorModule(ctx, req, resp);
                },
                this
            )
        ));
        AddMethod(new ::grpc::internal::RpcServiceMethod(
            AvailableService_method_names[7],
            ::grpc::internal::RpcMethod::NORMAL_RPC,
            new ::grpc::internal::RpcMethodHandler<AvailableService::Service, ::protobuf::ShieldMsg, ::protobuf::BoolRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
                [](AvailableService::Service* service,
                   ::grpc::ServerContext* ctx,
                   const ::protobuf::ShieldMsg* req,
                   ::protobuf::BoolRes* resp)
                {
                    return service->InstallShieldModule(ctx, req, resp);
                },
                this
            )
        ));
        AddMethod(new ::grpc::internal::RpcServiceMethod(
            AvailableService_method_names[8],
            ::grpc::internal::RpcMethod::NORMAL_RPC,
            new ::grpc::internal::RpcMethodHandler<AvailableService::Service, ::protobuf::BuilderMsg, ::protobuf::BoolRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
                [](AvailableService::Service* service,
                   ::grpc::ServerContext* ctx,
                   const ::protobuf::BuilderMsg* req,
                   ::protobuf::BoolRes* resp)
                {
                    return service->InstallBuilderModule(ctx, req, resp);
                },
                this
            )
        ));
        AddMethod(new ::grpc::internal::RpcServiceMethod(
            AvailableService_method_names[9],
            ::grpc::internal::RpcMethod::NORMAL_RPC,
            new ::grpc::internal::RpcMethodHandler<AvailableService::Service, ::protobuf::BulleterMsg, ::protobuf::BoolRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
                [](AvailableService::Service* service,
                   ::grpc::ServerContext* ctx,
                   const ::protobuf::BulleterMsg* req,
                   ::protobuf::BoolRes* resp)
                {
                    return service->InstallBulletModule(ctx, req, resp);
                },
                this
            )
        ));
        AddMethod(new ::grpc::internal::RpcServiceMethod(
            AvailableService_method_names[10],
            ::grpc::internal::RpcMethod::NORMAL_RPC,
            new ::grpc::internal::RpcMethodHandler<AvailableService::Service, ::protobuf::SendMsg, ::protobuf::BoolRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
                [](AvailableService::Service* service,
                   ::grpc::ServerContext* ctx,
                   const ::protobuf::SendMsg* req,
                   ::protobuf::BoolRes* resp)
                {
                    return service->SendMessage(ctx, req, resp);
                },
                this
            )
        ));
        AddMethod(new ::grpc::internal::RpcServiceMethod(
            AvailableService_method_names[11],
            ::grpc::internal::RpcMethod::NORMAL_RPC,
            new ::grpc::internal::RpcMethodHandler<AvailableService::Service, ::protobuf::IDMsg, ::protobuf::BoolRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
                [](AvailableService::Service* service,
                   ::grpc::ServerContext* ctx,
                   const ::protobuf::IDMsg* req,
                   ::protobuf::BoolRes* resp)
                {
                    return service->StartRecovering(ctx, req, resp);
                },
                this
            )
        ));
        AddMethod(new ::grpc::internal::RpcServiceMethod(
            AvailableService_method_names[12],
            ::grpc::internal::RpcMethod::NORMAL_RPC,
            new ::grpc::internal::RpcMethodHandler<AvailableService::Service, ::protobuf::IDMsg, ::protobuf::BoolRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
                [](AvailableService::Service* service,
                   ::grpc::ServerContext* ctx,
                   const ::protobuf::IDMsg* req,
                   ::protobuf::BoolRes* resp)
                {
                    return service->StartProducing(ctx, req, resp);
                },
                this
            )
        ));
        AddMethod(new ::grpc::internal::RpcServiceMethod(
            AvailableService_method_names[13],
            ::grpc::internal::RpcMethod::NORMAL_RPC,
            new ::grpc::internal::RpcMethodHandler<AvailableService::Service, ::protobuf::IDMsg, ::protobuf::BoolRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
                [](AvailableService::Service* service,
                   ::grpc::ServerContext* ctx,
                   const ::protobuf::IDMsg* req,
                   ::protobuf::BoolRes* resp)
                {
                    return service->StartRecycling(ctx, req, resp);
                },
                this
            )
        ));
        AddMethod(new ::grpc::internal::RpcServiceMethod(
            AvailableService_method_names[14],
            ::grpc::internal::RpcMethod::NORMAL_RPC,
            new ::grpc::internal::RpcMethodHandler<AvailableService::Service, ::protobuf::BuildMsg, ::protobuf::BoolRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
                [](AvailableService::Service* service,
                   ::grpc::ServerContext* ctx,
                   const ::protobuf::BuildMsg* req,
                   ::protobuf::BoolRes* resp)
                {
                    return service->StartBuilding(ctx, req, resp);
                },
                this
            )
        ));
        AddMethod(new ::grpc::internal::RpcServiceMethod(
            AvailableService_method_names[15],
            ::grpc::internal::RpcMethod::NORMAL_RPC,
            new ::grpc::internal::RpcMethodHandler<AvailableService::Service, ::protobuf::AttackMsg, ::protobuf::BoolRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
                [](AvailableService::Service* service,
                   ::grpc::ServerContext* ctx,
                   const ::protobuf::AttackMsg* req,
                   ::protobuf::BoolRes* resp)
                {
                    return service->Attack(ctx, req, resp);
                },
                this
            )
        ));
        AddMethod(new ::grpc::internal::RpcServiceMethod(
            AvailableService_method_names[16],
            ::grpc::internal::RpcMethod::NORMAL_RPC,
            new ::grpc::internal::RpcMethodHandler<AvailableService::Service, ::protobuf::BuildMsg, ::protobuf::BoolRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
                [](AvailableService::Service* service,
                   ::grpc::ServerContext* ctx,
                   const ::protobuf::BuildMsg* req,
                   ::protobuf::BoolRes* resp)
                {
                    return service->BuildShip(ctx, req, resp);
                },
                this
            )
        ));
        AddMethod(new ::grpc::internal::RpcServiceMethod(
            AvailableService_method_names[17],
            ::grpc::internal::RpcMethod::NORMAL_RPC,
            new ::grpc::internal::RpcMethodHandler<AvailableService::Service, ::protobuf::IDMsg, ::protobuf::BoolRes, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
                [](AvailableService::Service* service,
                   ::grpc::ServerContext* ctx,
                   const ::protobuf::IDMsg* req,
                   ::protobuf::BoolRes* resp)
                {
                    return service->EndAllAction(ctx, req, resp);
                },
                this
            )
        ));
    }

    AvailableService::Service::~Service()
    {
    }

    ::grpc::Status AvailableService::Service::TryConnection(::grpc::ServerContext* context, const ::protobuf::IDMsg* request, ::protobuf::BoolRes* response)
    {
        (void)context;
        (void)request;
        (void)response;
        return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }

    ::grpc::Status AvailableService::Service::AddBasicShip(::grpc::ServerContext* context, const ::protobuf::ShipMsg* request, ::grpc::ServerWriter<::protobuf::MessageToClient>* writer)
    {
        (void)context;
        (void)request;
        (void)writer;
        return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }

    ::grpc::Status AvailableService::Service::AddHome(::grpc::ServerContext* context, const ::protobuf::HomeMsg* request, ::grpc::ServerWriter<::protobuf::MessageToClient>* writer)
    {
        (void)context;
        (void)request;
        (void)writer;
        return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }

    ::grpc::Status AvailableService::Service::AddBuilding(::grpc::ServerContext* context, const ::protobuf::BuildingMsg* request, ::grpc::ServerWriter<::protobuf::MessageToClient>* writer)
    {
        (void)context;
        (void)request;
        (void)writer;
        return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }

    ::grpc::Status AvailableService::Service::Move(::grpc::ServerContext* context, const ::protobuf::MoveMsg* request, ::protobuf::MoveRes* response)
    {
        (void)context;
        (void)request;
        (void)response;
        return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }

    ::grpc::Status AvailableService::Service::InstallCollectorModule(::grpc::ServerContext* context, const ::protobuf::CollectorMsg* request, ::protobuf::BoolRes* response)
    {
        (void)context;
        (void)request;
        (void)response;
        return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }

    ::grpc::Status AvailableService::Service::InstallArmorModule(::grpc::ServerContext* context, const ::protobuf::ArmorMsg* request, ::protobuf::BoolRes* response)
    {
        (void)context;
        (void)request;
        (void)response;
        return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }

    ::grpc::Status AvailableService::Service::InstallShieldModule(::grpc::ServerContext* context, const ::protobuf::ShieldMsg* request, ::protobuf::BoolRes* response)
    {
        (void)context;
        (void)request;
        (void)response;
        return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }

    ::grpc::Status AvailableService::Service::InstallBuilderModule(::grpc::ServerContext* context, const ::protobuf::BuilderMsg* request, ::protobuf::BoolRes* response)
    {
        (void)context;
        (void)request;
        (void)response;
        return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }

    ::grpc::Status AvailableService::Service::InstallBulletModule(::grpc::ServerContext* context, const ::protobuf::BulleterMsg* request, ::protobuf::BoolRes* response)
    {
        (void)context;
        (void)request;
        (void)response;
        return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }

    ::grpc::Status AvailableService::Service::SendMessage(::grpc::ServerContext* context, const ::protobuf::SendMsg* request, ::protobuf::BoolRes* response)
    {
        (void)context;
        (void)request;
        (void)response;
        return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }

    ::grpc::Status AvailableService::Service::StartRecovering(::grpc::ServerContext* context, const ::protobuf::IDMsg* request, ::protobuf::BoolRes* response)
    {
        (void)context;
        (void)request;
        (void)response;
        return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }

    ::grpc::Status AvailableService::Service::StartProducing(::grpc::ServerContext* context, const ::protobuf::IDMsg* request, ::protobuf::BoolRes* response)
    {
        (void)context;
        (void)request;
        (void)response;
        return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }

    ::grpc::Status AvailableService::Service::StartRecycling(::grpc::ServerContext* context, const ::protobuf::IDMsg* request, ::protobuf::BoolRes* response)
    {
        (void)context;
        (void)request;
        (void)response;
        return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }

    ::grpc::Status AvailableService::Service::StartBuilding(::grpc::ServerContext* context, const ::protobuf::BuildMsg* request, ::protobuf::BoolRes* response)
    {
        (void)context;
        (void)request;
        (void)response;
        return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }

    ::grpc::Status AvailableService::Service::Attack(::grpc::ServerContext* context, const ::protobuf::AttackMsg* request, ::protobuf::BoolRes* response)
    {
        (void)context;
        (void)request;
        (void)response;
        return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }

    ::grpc::Status AvailableService::Service::BuildShip(::grpc::ServerContext* context, const ::protobuf::BuildMsg* request, ::protobuf::BoolRes* response)
    {
        (void)context;
        (void)request;
        (void)response;
        return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }

    ::grpc::Status AvailableService::Service::EndAllAction(::grpc::ServerContext* context, const ::protobuf::IDMsg* request, ::protobuf::BoolRes* response)
    {
        (void)context;
        (void)request;
        (void)response;
        return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }

}  // namespace protobuf
