// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MessageType.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_MessageType_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_MessageType_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023004 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"   // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_MessageType_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal
{
    class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_MessageType_2eproto
{
    static const ::uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable
    descriptor_table_MessageType_2eproto;
PROTOBUF_NAMESPACE_OPEN
PROTOBUF_NAMESPACE_CLOSE

namespace protobuf
{
    enum GameState : int
    {
        NULL_GAME_STATE = 0,
        GAME_START = 1,
        GAME_RUNNING = 2,
        GAME_END = 3,
        GameState_INT_MIN_SENTINEL_DO_NOT_USE_ =
            std::numeric_limits<::int32_t>::min(),
        GameState_INT_MAX_SENTINEL_DO_NOT_USE_ =
            std::numeric_limits<::int32_t>::max(),
    };

    bool GameState_IsValid(int value);
    constexpr GameState GameState_MIN = static_cast<GameState>(0);
    constexpr GameState GameState_MAX = static_cast<GameState>(3);
    constexpr int GameState_ARRAYSIZE = 3 + 1;
    const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
        GameState_descriptor();
    template<typename T>
    const std::string& GameState_Name(T value)
    {
        static_assert(std::is_same<T, GameState>::value || std::is_integral<T>::value, "Incorrect type passed to GameState_Name().");
        return GameState_Name(static_cast<GameState>(value));
    }
    template<>
    inline const std::string& GameState_Name(GameState value)
    {
        return ::PROTOBUF_NAMESPACE_ID::internal::NameOfDenseEnum<GameState_descriptor, 0, 3>(
            static_cast<int>(value)
        );
    }
    inline bool GameState_Parse(absl::string_view name, GameState* value)
    {
        return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<GameState>(
            GameState_descriptor(), name, value
        );
    }
    enum PlaceType : int
    {
        NULL_PLACE_TYPE = 0,
        HOME_PLACE = 1,
        SPACE = 2,
        RUIN = 3,
        SHADOW = 4,
        ASTEROID = 5,
        RESOURCE = 6,
        CONSTRUCTION = 7,
        WORMHOLE = 8,
        PlaceType_INT_MIN_SENTINEL_DO_NOT_USE_ =
            std::numeric_limits<::int32_t>::min(),
        PlaceType_INT_MAX_SENTINEL_DO_NOT_USE_ =
            std::numeric_limits<::int32_t>::max(),
    };

    bool PlaceType_IsValid(int value);
    constexpr PlaceType PlaceType_MIN = static_cast<PlaceType>(0);
    constexpr PlaceType PlaceType_MAX = static_cast<PlaceType>(8);
    constexpr int PlaceType_ARRAYSIZE = 8 + 1;
    const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
        PlaceType_descriptor();
    template<typename T>
    const std::string& PlaceType_Name(T value)
    {
        static_assert(std::is_same<T, PlaceType>::value || std::is_integral<T>::value, "Incorrect type passed to PlaceType_Name().");
        return PlaceType_Name(static_cast<PlaceType>(value));
    }
    template<>
    inline const std::string& PlaceType_Name(PlaceType value)
    {
        return ::PROTOBUF_NAMESPACE_ID::internal::NameOfDenseEnum<PlaceType_descriptor, 0, 8>(
            static_cast<int>(value)
        );
    }
    inline bool PlaceType_Parse(absl::string_view name, PlaceType* value)
    {
        return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PlaceType>(
            PlaceType_descriptor(), name, value
        );
    }
    enum ShapeType : int
    {
        NULL_SHAPE_TYPE = 0,
        CIRCLE = 1,
        SQUARE = 2,
        ShapeType_INT_MIN_SENTINEL_DO_NOT_USE_ =
            std::numeric_limits<::int32_t>::min(),
        ShapeType_INT_MAX_SENTINEL_DO_NOT_USE_ =
            std::numeric_limits<::int32_t>::max(),
    };

    bool ShapeType_IsValid(int value);
    constexpr ShapeType ShapeType_MIN = static_cast<ShapeType>(0);
    constexpr ShapeType ShapeType_MAX = static_cast<ShapeType>(2);
    constexpr int ShapeType_ARRAYSIZE = 2 + 1;
    const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
        ShapeType_descriptor();
    template<typename T>
    const std::string& ShapeType_Name(T value)
    {
        static_assert(std::is_same<T, ShapeType>::value || std::is_integral<T>::value, "Incorrect type passed to ShapeType_Name().");
        return ShapeType_Name(static_cast<ShapeType>(value));
    }
    template<>
    inline const std::string& ShapeType_Name(ShapeType value)
    {
        return ::PROTOBUF_NAMESPACE_ID::internal::NameOfDenseEnum<ShapeType_descriptor, 0, 2>(
            static_cast<int>(value)
        );
    }
    inline bool ShapeType_Parse(absl::string_view name, ShapeType* value)
    {
        return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ShapeType>(
            ShapeType_descriptor(), name, value
        );
    }
    enum PlayerType : int
    {
        NULL_PLAYER_TYPE = 0,
        SHIP = 1,
        HOME = 2,
        PlayerType_INT_MIN_SENTINEL_DO_NOT_USE_ =
            std::numeric_limits<::int32_t>::min(),
        PlayerType_INT_MAX_SENTINEL_DO_NOT_USE_ =
            std::numeric_limits<::int32_t>::max(),
    };

    bool PlayerType_IsValid(int value);
    constexpr PlayerType PlayerType_MIN = static_cast<PlayerType>(0);
    constexpr PlayerType PlayerType_MAX = static_cast<PlayerType>(2);
    constexpr int PlayerType_ARRAYSIZE = 2 + 1;
    const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
        PlayerType_descriptor();
    template<typename T>
    const std::string& PlayerType_Name(T value)
    {
        static_assert(std::is_same<T, PlayerType>::value || std::is_integral<T>::value, "Incorrect type passed to PlayerType_Name().");
        return PlayerType_Name(static_cast<PlayerType>(value));
    }
    template<>
    inline const std::string& PlayerType_Name(PlayerType value)
    {
        return ::PROTOBUF_NAMESPACE_ID::internal::NameOfDenseEnum<PlayerType_descriptor, 0, 2>(
            static_cast<int>(value)
        );
    }
    inline bool PlayerType_Parse(absl::string_view name, PlayerType* value)
    {
        return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PlayerType>(
            PlayerType_descriptor(), name, value
        );
    }
    enum ShipType : int
    {
        NULL_SHIP_TYPE = 0,
        CIVILIAN_SHIP = 1,
        MILITARY_SHIP = 2,
        FLAG_SHIP = 3,
        ShipType_INT_MIN_SENTINEL_DO_NOT_USE_ =
            std::numeric_limits<::int32_t>::min(),
        ShipType_INT_MAX_SENTINEL_DO_NOT_USE_ =
            std::numeric_limits<::int32_t>::max(),
    };

    bool ShipType_IsValid(int value);
    constexpr ShipType ShipType_MIN = static_cast<ShipType>(0);
    constexpr ShipType ShipType_MAX = static_cast<ShipType>(3);
    constexpr int ShipType_ARRAYSIZE = 3 + 1;
    const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
        ShipType_descriptor();
    template<typename T>
    const std::string& ShipType_Name(T value)
    {
        static_assert(std::is_same<T, ShipType>::value || std::is_integral<T>::value, "Incorrect type passed to ShipType_Name().");
        return ShipType_Name(static_cast<ShipType>(value));
    }
    template<>
    inline const std::string& ShipType_Name(ShipType value)
    {
        return ::PROTOBUF_NAMESPACE_ID::internal::NameOfDenseEnum<ShipType_descriptor, 0, 3>(
            static_cast<int>(value)
        );
    }
    inline bool ShipType_Parse(absl::string_view name, ShipType* value)
    {
        return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ShipType>(
            ShipType_descriptor(), name, value
        );
    }
    enum ShipState : int
    {
        NULL_STATUS = 0,
        IDLE = 1,
        PRODUCING = 2,
        CONSTRUCTING = 3,
        RECOVERING = 4,
        RECYCLING = 5,
        ATTACKING = 6,
        SWINGING = 7,
        STUNNED = 8,
        ShipState_INT_MIN_SENTINEL_DO_NOT_USE_ =
            std::numeric_limits<::int32_t>::min(),
        ShipState_INT_MAX_SENTINEL_DO_NOT_USE_ =
            std::numeric_limits<::int32_t>::max(),
    };

    bool ShipState_IsValid(int value);
    constexpr ShipState ShipState_MIN = static_cast<ShipState>(0);
    constexpr ShipState ShipState_MAX = static_cast<ShipState>(8);
    constexpr int ShipState_ARRAYSIZE = 8 + 1;
    const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
        ShipState_descriptor();
    template<typename T>
    const std::string& ShipState_Name(T value)
    {
        static_assert(std::is_same<T, ShipState>::value || std::is_integral<T>::value, "Incorrect type passed to ShipState_Name().");
        return ShipState_Name(static_cast<ShipState>(value));
    }
    template<>
    inline const std::string& ShipState_Name(ShipState value)
    {
        return ::PROTOBUF_NAMESPACE_ID::internal::NameOfDenseEnum<ShipState_descriptor, 0, 8>(
            static_cast<int>(value)
        );
    }
    inline bool ShipState_Parse(absl::string_view name, ShipState* value)
    {
        return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ShipState>(
            ShipState_descriptor(), name, value
        );
    }
    enum WeaponType : int
    {
        NULL_WEAPON_TYPE = 0,
        LASERGUN = 1,
        PLASMAGUN = 2,
        SHELLGUN = 3,
        MISSILEGUN = 4,
        ARCGUN = 5,
        WeaponType_INT_MIN_SENTINEL_DO_NOT_USE_ =
            std::numeric_limits<::int32_t>::min(),
        WeaponType_INT_MAX_SENTINEL_DO_NOT_USE_ =
            std::numeric_limits<::int32_t>::max(),
    };

    bool WeaponType_IsValid(int value);
    constexpr WeaponType WeaponType_MIN = static_cast<WeaponType>(0);
    constexpr WeaponType WeaponType_MAX = static_cast<WeaponType>(5);
    constexpr int WeaponType_ARRAYSIZE = 5 + 1;
    const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
        WeaponType_descriptor();
    template<typename T>
    const std::string& WeaponType_Name(T value)
    {
        static_assert(std::is_same<T, WeaponType>::value || std::is_integral<T>::value, "Incorrect type passed to WeaponType_Name().");
        return WeaponType_Name(static_cast<WeaponType>(value));
    }
    template<>
    inline const std::string& WeaponType_Name(WeaponType value)
    {
        return ::PROTOBUF_NAMESPACE_ID::internal::NameOfDenseEnum<WeaponType_descriptor, 0, 5>(
            static_cast<int>(value)
        );
    }
    inline bool WeaponType_Parse(absl::string_view name, WeaponType* value)
    {
        return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<WeaponType>(
            WeaponType_descriptor(), name, value
        );
    }
    enum ConstructorType : int
    {
        NULL_CONSTRUCTOR_TYPE = 0,
        CONSTRUCTOR1 = 1,
        CONSTRUCTOR2 = 2,
        CONSTRUCTOR3 = 3,
        ConstructorType_INT_MIN_SENTINEL_DO_NOT_USE_ =
            std::numeric_limits<::int32_t>::min(),
        ConstructorType_INT_MAX_SENTINEL_DO_NOT_USE_ =
            std::numeric_limits<::int32_t>::max(),
    };

    bool ConstructorType_IsValid(int value);
    constexpr ConstructorType ConstructorType_MIN = static_cast<ConstructorType>(0);
    constexpr ConstructorType ConstructorType_MAX = static_cast<ConstructorType>(3);
    constexpr int ConstructorType_ARRAYSIZE = 3 + 1;
    const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
        ConstructorType_descriptor();
    template<typename T>
    const std::string& ConstructorType_Name(T value)
    {
        static_assert(std::is_same<T, ConstructorType>::value || std::is_integral<T>::value, "Incorrect type passed to ConstructorType_Name().");
        return ConstructorType_Name(static_cast<ConstructorType>(value));
    }
    template<>
    inline const std::string& ConstructorType_Name(ConstructorType value)
    {
        return ::PROTOBUF_NAMESPACE_ID::internal::NameOfDenseEnum<ConstructorType_descriptor, 0, 3>(
            static_cast<int>(value)
        );
    }
    inline bool ConstructorType_Parse(absl::string_view name, ConstructorType* value)
    {
        return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ConstructorType>(
            ConstructorType_descriptor(), name, value
        );
    }
    enum ArmorType : int
    {
        NULL_ARMOR_TYPE = 0,
        ARMOR1 = 1,
        ARMOR2 = 2,
        ARMOR3 = 3,
        ArmorType_INT_MIN_SENTINEL_DO_NOT_USE_ =
            std::numeric_limits<::int32_t>::min(),
        ArmorType_INT_MAX_SENTINEL_DO_NOT_USE_ =
            std::numeric_limits<::int32_t>::max(),
    };

    bool ArmorType_IsValid(int value);
    constexpr ArmorType ArmorType_MIN = static_cast<ArmorType>(0);
    constexpr ArmorType ArmorType_MAX = static_cast<ArmorType>(3);
    constexpr int ArmorType_ARRAYSIZE = 3 + 1;
    const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
        ArmorType_descriptor();
    template<typename T>
    const std::string& ArmorType_Name(T value)
    {
        static_assert(std::is_same<T, ArmorType>::value || std::is_integral<T>::value, "Incorrect type passed to ArmorType_Name().");
        return ArmorType_Name(static_cast<ArmorType>(value));
    }
    template<>
    inline const std::string& ArmorType_Name(ArmorType value)
    {
        return ::PROTOBUF_NAMESPACE_ID::internal::NameOfDenseEnum<ArmorType_descriptor, 0, 3>(
            static_cast<int>(value)
        );
    }
    inline bool ArmorType_Parse(absl::string_view name, ArmorType* value)
    {
        return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ArmorType>(
            ArmorType_descriptor(), name, value
        );
    }
    enum ShieldType : int
    {
        NULL_SHIELD_TYPE = 0,
        SHIELD1 = 1,
        SHIELD2 = 2,
        SHIELD3 = 3,
        ShieldType_INT_MIN_SENTINEL_DO_NOT_USE_ =
            std::numeric_limits<::int32_t>::min(),
        ShieldType_INT_MAX_SENTINEL_DO_NOT_USE_ =
            std::numeric_limits<::int32_t>::max(),
    };

    bool ShieldType_IsValid(int value);
    constexpr ShieldType ShieldType_MIN = static_cast<ShieldType>(0);
    constexpr ShieldType ShieldType_MAX = static_cast<ShieldType>(3);
    constexpr int ShieldType_ARRAYSIZE = 3 + 1;
    const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
        ShieldType_descriptor();
    template<typename T>
    const std::string& ShieldType_Name(T value)
    {
        static_assert(std::is_same<T, ShieldType>::value || std::is_integral<T>::value, "Incorrect type passed to ShieldType_Name().");
        return ShieldType_Name(static_cast<ShieldType>(value));
    }
    template<>
    inline const std::string& ShieldType_Name(ShieldType value)
    {
        return ::PROTOBUF_NAMESPACE_ID::internal::NameOfDenseEnum<ShieldType_descriptor, 0, 3>(
            static_cast<int>(value)
        );
    }
    inline bool ShieldType_Parse(absl::string_view name, ShieldType* value)
    {
        return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ShieldType>(
            ShieldType_descriptor(), name, value
        );
    }
    enum ProducerType : int
    {
        NULL_PRODUCER_TYPE = 0,
        PRODUCER1 = 1,
        PRODUCER2 = 2,
        PRODUCER3 = 3,
        ProducerType_INT_MIN_SENTINEL_DO_NOT_USE_ =
            std::numeric_limits<::int32_t>::min(),
        ProducerType_INT_MAX_SENTINEL_DO_NOT_USE_ =
            std::numeric_limits<::int32_t>::max(),
    };

    bool ProducerType_IsValid(int value);
    constexpr ProducerType ProducerType_MIN = static_cast<ProducerType>(0);
    constexpr ProducerType ProducerType_MAX = static_cast<ProducerType>(3);
    constexpr int ProducerType_ARRAYSIZE = 3 + 1;
    const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
        ProducerType_descriptor();
    template<typename T>
    const std::string& ProducerType_Name(T value)
    {
        static_assert(std::is_same<T, ProducerType>::value || std::is_integral<T>::value, "Incorrect type passed to ProducerType_Name().");
        return ProducerType_Name(static_cast<ProducerType>(value));
    }
    template<>
    inline const std::string& ProducerType_Name(ProducerType value)
    {
        return ::PROTOBUF_NAMESPACE_ID::internal::NameOfDenseEnum<ProducerType_descriptor, 0, 3>(
            static_cast<int>(value)
        );
    }
    inline bool ProducerType_Parse(absl::string_view name, ProducerType* value)
    {
        return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ProducerType>(
            ProducerType_descriptor(), name, value
        );
    }
    enum BulletType : int
    {
        NULL_BULLET_TYPE = 0,
        LASER = 1,
        PLASMA = 2,
        SHELL = 3,
        MISSILE = 4,
        ARC = 5,
        BulletType_INT_MIN_SENTINEL_DO_NOT_USE_ =
            std::numeric_limits<::int32_t>::min(),
        BulletType_INT_MAX_SENTINEL_DO_NOT_USE_ =
            std::numeric_limits<::int32_t>::max(),
    };

    bool BulletType_IsValid(int value);
    constexpr BulletType BulletType_MIN = static_cast<BulletType>(0);
    constexpr BulletType BulletType_MAX = static_cast<BulletType>(5);
    constexpr int BulletType_ARRAYSIZE = 5 + 1;
    const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
        BulletType_descriptor();
    template<typename T>
    const std::string& BulletType_Name(T value)
    {
        static_assert(std::is_same<T, BulletType>::value || std::is_integral<T>::value, "Incorrect type passed to BulletType_Name().");
        return BulletType_Name(static_cast<BulletType>(value));
    }
    template<>
    inline const std::string& BulletType_Name(BulletType value)
    {
        return ::PROTOBUF_NAMESPACE_ID::internal::NameOfDenseEnum<BulletType_descriptor, 0, 5>(
            static_cast<int>(value)
        );
    }
    inline bool BulletType_Parse(absl::string_view name, BulletType* value)
    {
        return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<BulletType>(
            BulletType_descriptor(), name, value
        );
    }
    enum ConstructionType : int
    {
        NULL_CONSTRUCTION_TYPE = 0,
        FACTORY = 1,
        COMMUNITY = 2,
        FORT = 3,
        ConstructionType_INT_MIN_SENTINEL_DO_NOT_USE_ =
            std::numeric_limits<::int32_t>::min(),
        ConstructionType_INT_MAX_SENTINEL_DO_NOT_USE_ =
            std::numeric_limits<::int32_t>::max(),
    };

    bool ConstructionType_IsValid(int value);
    constexpr ConstructionType ConstructionType_MIN = static_cast<ConstructionType>(0);
    constexpr ConstructionType ConstructionType_MAX = static_cast<ConstructionType>(3);
    constexpr int ConstructionType_ARRAYSIZE = 3 + 1;
    const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
        ConstructionType_descriptor();
    template<typename T>
    const std::string& ConstructionType_Name(T value)
    {
        static_assert(std::is_same<T, ConstructionType>::value || std::is_integral<T>::value, "Incorrect type passed to ConstructionType_Name().");
        return ConstructionType_Name(static_cast<ConstructionType>(value));
    }
    template<>
    inline const std::string& ConstructionType_Name(ConstructionType value)
    {
        return ::PROTOBUF_NAMESPACE_ID::internal::NameOfDenseEnum<ConstructionType_descriptor, 0, 3>(
            static_cast<int>(value)
        );
    }
    inline bool ConstructionType_Parse(absl::string_view name, ConstructionType* value)
    {
        return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ConstructionType>(
            ConstructionType_descriptor(), name, value
        );
    }
    enum NewsType : int
    {
        NULL_NEWS_TYPE = 0,
        TEXT = 1,
        BINARY = 2,
        NewsType_INT_MIN_SENTINEL_DO_NOT_USE_ =
            std::numeric_limits<::int32_t>::min(),
        NewsType_INT_MAX_SENTINEL_DO_NOT_USE_ =
            std::numeric_limits<::int32_t>::max(),
    };

    bool NewsType_IsValid(int value);
    constexpr NewsType NewsType_MIN = static_cast<NewsType>(0);
    constexpr NewsType NewsType_MAX = static_cast<NewsType>(2);
    constexpr int NewsType_ARRAYSIZE = 2 + 1;
    const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
        NewsType_descriptor();
    template<typename T>
    const std::string& NewsType_Name(T value)
    {
        static_assert(std::is_same<T, NewsType>::value || std::is_integral<T>::value, "Incorrect type passed to NewsType_Name().");
        return NewsType_Name(static_cast<NewsType>(value));
    }
    template<>
    inline const std::string& NewsType_Name(NewsType value)
    {
        return ::PROTOBUF_NAMESPACE_ID::internal::NameOfDenseEnum<NewsType_descriptor, 0, 2>(
            static_cast<int>(value)
        );
    }
    inline bool NewsType_Parse(absl::string_view name, NewsType* value)
    {
        return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<NewsType>(
            NewsType_descriptor(), name, value
        );
    }

    // ===================================================================

    // ===================================================================

    // ===================================================================

#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

    // @@protoc_insertion_point(namespace_scope)
}  // namespace protobuf

PROTOBUF_NAMESPACE_OPEN

template<>
struct is_proto_enum<::protobuf::GameState> : std::true_type
{
};
template<>
inline const EnumDescriptor* GetEnumDescriptor<::protobuf::GameState>()
{
    return ::protobuf::GameState_descriptor();
}
template<>
struct is_proto_enum<::protobuf::PlaceType> : std::true_type
{
};
template<>
inline const EnumDescriptor* GetEnumDescriptor<::protobuf::PlaceType>()
{
    return ::protobuf::PlaceType_descriptor();
}
template<>
struct is_proto_enum<::protobuf::ShapeType> : std::true_type
{
};
template<>
inline const EnumDescriptor* GetEnumDescriptor<::protobuf::ShapeType>()
{
    return ::protobuf::ShapeType_descriptor();
}
template<>
struct is_proto_enum<::protobuf::PlayerType> : std::true_type
{
};
template<>
inline const EnumDescriptor* GetEnumDescriptor<::protobuf::PlayerType>()
{
    return ::protobuf::PlayerType_descriptor();
}
template<>
struct is_proto_enum<::protobuf::ShipType> : std::true_type
{
};
template<>
inline const EnumDescriptor* GetEnumDescriptor<::protobuf::ShipType>()
{
    return ::protobuf::ShipType_descriptor();
}
template<>
struct is_proto_enum<::protobuf::ShipState> : std::true_type
{
};
template<>
inline const EnumDescriptor* GetEnumDescriptor<::protobuf::ShipState>()
{
    return ::protobuf::ShipState_descriptor();
}
template<>
struct is_proto_enum<::protobuf::WeaponType> : std::true_type
{
};
template<>
inline const EnumDescriptor* GetEnumDescriptor<::protobuf::WeaponType>()
{
    return ::protobuf::WeaponType_descriptor();
}
template<>
struct is_proto_enum<::protobuf::ConstructorType> : std::true_type
{
};
template<>
inline const EnumDescriptor* GetEnumDescriptor<::protobuf::ConstructorType>()
{
    return ::protobuf::ConstructorType_descriptor();
}
template<>
struct is_proto_enum<::protobuf::ArmorType> : std::true_type
{
};
template<>
inline const EnumDescriptor* GetEnumDescriptor<::protobuf::ArmorType>()
{
    return ::protobuf::ArmorType_descriptor();
}
template<>
struct is_proto_enum<::protobuf::ShieldType> : std::true_type
{
};
template<>
inline const EnumDescriptor* GetEnumDescriptor<::protobuf::ShieldType>()
{
    return ::protobuf::ShieldType_descriptor();
}
template<>
struct is_proto_enum<::protobuf::ProducerType> : std::true_type
{
};
template<>
inline const EnumDescriptor* GetEnumDescriptor<::protobuf::ProducerType>()
{
    return ::protobuf::ProducerType_descriptor();
}
template<>
struct is_proto_enum<::protobuf::BulletType> : std::true_type
{
};
template<>
inline const EnumDescriptor* GetEnumDescriptor<::protobuf::BulletType>()
{
    return ::protobuf::BulletType_descriptor();
}
template<>
struct is_proto_enum<::protobuf::ConstructionType> : std::true_type
{
};
template<>
inline const EnumDescriptor* GetEnumDescriptor<::protobuf::ConstructionType>()
{
    return ::protobuf::ConstructionType_descriptor();
}
template<>
struct is_proto_enum<::protobuf::NewsType> : std::true_type
{
};
template<>
inline const EnumDescriptor* GetEnumDescriptor<::protobuf::NewsType>()
{
    return ::protobuf::NewsType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_MessageType_2eproto_2epb_2eh
