// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Message2Server.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Message2Server_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Message2Server_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>   // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "MessageType.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Message2Server_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal
{
    class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Message2Server_2eproto
{
    static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Message2Server_2eproto;
namespace protobuf
{
    class ArmorMsg;
    struct ArmorMsgDefaultTypeInternal;
    extern ArmorMsgDefaultTypeInternal _ArmorMsg_default_instance_;
    class AttackMsg;
    struct AttackMsgDefaultTypeInternal;
    extern AttackMsgDefaultTypeInternal _AttackMsg_default_instance_;
    class BuildMsg;
    struct BuildMsgDefaultTypeInternal;
    extern BuildMsgDefaultTypeInternal _BuildMsg_default_instance_;
    class BuilderMsg;
    struct BuilderMsgDefaultTypeInternal;
    extern BuilderMsgDefaultTypeInternal _BuilderMsg_default_instance_;
    class BuildingMsg;
    struct BuildingMsgDefaultTypeInternal;
    extern BuildingMsgDefaultTypeInternal _BuildingMsg_default_instance_;
    class BulleterMsg;
    struct BulleterMsgDefaultTypeInternal;
    extern BulleterMsgDefaultTypeInternal _BulleterMsg_default_instance_;
    class CollectorMsg;
    struct CollectorMsgDefaultTypeInternal;
    extern CollectorMsgDefaultTypeInternal _CollectorMsg_default_instance_;
    class HomeMsg;
    struct HomeMsgDefaultTypeInternal;
    extern HomeMsgDefaultTypeInternal _HomeMsg_default_instance_;
    class IDMsg;
    struct IDMsgDefaultTypeInternal;
    extern IDMsgDefaultTypeInternal _IDMsg_default_instance_;
    class MoveMsg;
    struct MoveMsgDefaultTypeInternal;
    extern MoveMsgDefaultTypeInternal _MoveMsg_default_instance_;
    class RecoverMsg;
    struct RecoverMsgDefaultTypeInternal;
    extern RecoverMsgDefaultTypeInternal _RecoverMsg_default_instance_;
    class SendMsg;
    struct SendMsgDefaultTypeInternal;
    extern SendMsgDefaultTypeInternal _SendMsg_default_instance_;
    class ShieldMsg;
    struct ShieldMsgDefaultTypeInternal;
    extern ShieldMsgDefaultTypeInternal _ShieldMsg_default_instance_;
    class ShipMsg;
    struct ShipMsgDefaultTypeInternal;
    extern ShipMsgDefaultTypeInternal _ShipMsg_default_instance_;
}  // namespace protobuf
PROTOBUF_NAMESPACE_OPEN
template<>
::protobuf::ArmorMsg* Arena::CreateMaybeMessage<::protobuf::ArmorMsg>(Arena*);
template<>
::protobuf::AttackMsg* Arena::CreateMaybeMessage<::protobuf::AttackMsg>(Arena*);
template<>
::protobuf::BuildMsg* Arena::CreateMaybeMessage<::protobuf::BuildMsg>(Arena*);
template<>
::protobuf::BuilderMsg* Arena::CreateMaybeMessage<::protobuf::BuilderMsg>(Arena*);
template<>
::protobuf::BuildingMsg* Arena::CreateMaybeMessage<::protobuf::BuildingMsg>(Arena*);
template<>
::protobuf::BulleterMsg* Arena::CreateMaybeMessage<::protobuf::BulleterMsg>(Arena*);
template<>
::protobuf::CollectorMsg* Arena::CreateMaybeMessage<::protobuf::CollectorMsg>(Arena*);
template<>
::protobuf::HomeMsg* Arena::CreateMaybeMessage<::protobuf::HomeMsg>(Arena*);
template<>
::protobuf::IDMsg* Arena::CreateMaybeMessage<::protobuf::IDMsg>(Arena*);
template<>
::protobuf::MoveMsg* Arena::CreateMaybeMessage<::protobuf::MoveMsg>(Arena*);
template<>
::protobuf::RecoverMsg* Arena::CreateMaybeMessage<::protobuf::RecoverMsg>(Arena*);
template<>
::protobuf::SendMsg* Arena::CreateMaybeMessage<::protobuf::SendMsg>(Arena*);
template<>
::protobuf::ShieldMsg* Arena::CreateMaybeMessage<::protobuf::ShieldMsg>(Arena*);
template<>
::protobuf::ShipMsg* Arena::CreateMaybeMessage<::protobuf::ShipMsg>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace protobuf
{

    // ===================================================================

    class ShipMsg final :
        public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protobuf.ShipMsg) */
    {
    public:
        inline ShipMsg() :
            ShipMsg(nullptr)
        {
        }
        ~ShipMsg() override;
        explicit PROTOBUF_CONSTEXPR ShipMsg(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

        ShipMsg(const ShipMsg& from);
        ShipMsg(ShipMsg&& from) noexcept
            :
            ShipMsg()
        {
            *this = ::std::move(from);
        }

        inline ShipMsg& operator=(const ShipMsg& from)
        {
            CopyFrom(from);
            return *this;
        }
        inline ShipMsg& operator=(ShipMsg&& from) noexcept
        {
            if (this == &from)
                return *this;
            if (GetOwningArena() == from.GetOwningArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
                && GetOwningArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
            )
            {
                InternalSwap(&from);
            }
            else
            {
                CopyFrom(from);
            }
            return *this;
        }

        static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor()
        {
            return GetDescriptor();
        }
        static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor()
        {
            return default_instance().GetMetadata().descriptor;
        }
        static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection()
        {
            return default_instance().GetMetadata().reflection;
        }
        static const ShipMsg& default_instance()
        {
            return *internal_default_instance();
        }
        static inline const ShipMsg* internal_default_instance()
        {
            return reinterpret_cast<const ShipMsg*>(
                &_ShipMsg_default_instance_
            );
        }
        static constexpr int kIndexInFileMessages =
            0;

        friend void swap(ShipMsg& a, ShipMsg& b)
        {
            a.Swap(&b);
        }
        inline void Swap(ShipMsg* other)
        {
            if (other == this)
                return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
            if (GetOwningArena() != nullptr &&
                GetOwningArena() == other->GetOwningArena())
            {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
            if (GetOwningArena() == other->GetOwningArena())
            {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
                InternalSwap(other);
            }
            else
            {
                ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
            }
        }
        void UnsafeArenaSwap(ShipMsg* other)
        {
            if (other == this)
                return;
            GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
            InternalSwap(other);
        }

        // implements Message ----------------------------------------------

        ShipMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final
        {
            return CreateMaybeMessage<ShipMsg>(arena);
        }
        using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
        void CopyFrom(const ShipMsg& from);
        using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
        void MergeFrom(const ShipMsg& from);

    private:
        static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);

    public:
        PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
        bool IsInitialized() const final;

        size_t ByteSizeLong() const final;
        const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
        uint8_t* _InternalSerialize(
            uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream
        ) const final;
        int GetCachedSize() const final
        {
            return _cached_size_.Get();
        }

    private:
        void SharedCtor();
        void SharedDtor();
        void SetCachedSize(int size) const final;
        void InternalSwap(ShipMsg* other);

    private:
        friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
        static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName()
        {
            return "protobuf.ShipMsg";
        }

    protected:
        explicit ShipMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned = false);

    public:
        static const ClassData _class_data_;
        const ::PROTOBUF_NAMESPACE_ID::Message::ClassData* GetClassData() const final;

        ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

        // nested types ----------------------------------------------------

        // accessors -------------------------------------------------------

        enum : int
        {
            kShipIdFieldNumber = 1,
            kShipTypeFieldNumber = 2,
        };
        // int64 ship_id = 1;
        void clear_ship_id();
        int64_t ship_id() const;
        void set_ship_id(int64_t value);

    private:
        int64_t _internal_ship_id() const;
        void _internal_set_ship_id(int64_t value);

    public:
        // .protobuf.ShipType ship_type = 2;
        void clear_ship_type();
        ::protobuf::ShipType ship_type() const;
        void set_ship_type(::protobuf::ShipType value);

    private:
        ::protobuf::ShipType _internal_ship_type() const;
        void _internal_set_ship_type(::protobuf::ShipType value);

    public:
        // @@protoc_insertion_point(class_scope:protobuf.ShipMsg)

    private:
        class _Internal;

        template<typename T>
        friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
        typedef void InternalArenaConstructable_;
        typedef void DestructorSkippable_;
        int64_t ship_id_;
        int ship_type_;
        mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
        friend struct ::TableStruct_Message2Server_2eproto;
    };
    // -------------------------------------------------------------------

    class BuildingMsg final :
        public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protobuf.BuildingMsg) */
    {
    public:
        inline BuildingMsg() :
            BuildingMsg(nullptr)
        {
        }
        ~BuildingMsg() override;
        explicit PROTOBUF_CONSTEXPR BuildingMsg(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

        BuildingMsg(const BuildingMsg& from);
        BuildingMsg(BuildingMsg&& from) noexcept
            :
            BuildingMsg()
        {
            *this = ::std::move(from);
        }

        inline BuildingMsg& operator=(const BuildingMsg& from)
        {
            CopyFrom(from);
            return *this;
        }
        inline BuildingMsg& operator=(BuildingMsg&& from) noexcept
        {
            if (this == &from)
                return *this;
            if (GetOwningArena() == from.GetOwningArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
                && GetOwningArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
            )
            {
                InternalSwap(&from);
            }
            else
            {
                CopyFrom(from);
            }
            return *this;
        }

        static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor()
        {
            return GetDescriptor();
        }
        static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor()
        {
            return default_instance().GetMetadata().descriptor;
        }
        static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection()
        {
            return default_instance().GetMetadata().reflection;
        }
        static const BuildingMsg& default_instance()
        {
            return *internal_default_instance();
        }
        static inline const BuildingMsg* internal_default_instance()
        {
            return reinterpret_cast<const BuildingMsg*>(
                &_BuildingMsg_default_instance_
            );
        }
        static constexpr int kIndexInFileMessages =
            1;

        friend void swap(BuildingMsg& a, BuildingMsg& b)
        {
            a.Swap(&b);
        }
        inline void Swap(BuildingMsg* other)
        {
            if (other == this)
                return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
            if (GetOwningArena() != nullptr &&
                GetOwningArena() == other->GetOwningArena())
            {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
            if (GetOwningArena() == other->GetOwningArena())
            {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
                InternalSwap(other);
            }
            else
            {
                ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
            }
        }
        void UnsafeArenaSwap(BuildingMsg* other)
        {
            if (other == this)
                return;
            GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
            InternalSwap(other);
        }

        // implements Message ----------------------------------------------

        BuildingMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final
        {
            return CreateMaybeMessage<BuildingMsg>(arena);
        }
        using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
        void CopyFrom(const BuildingMsg& from);
        using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
        void MergeFrom(const BuildingMsg& from);

    private:
        static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);

    public:
        PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
        bool IsInitialized() const final;

        size_t ByteSizeLong() const final;
        const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
        uint8_t* _InternalSerialize(
            uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream
        ) const final;
        int GetCachedSize() const final
        {
            return _cached_size_.Get();
        }

    private:
        void SharedCtor();
        void SharedDtor();
        void SetCachedSize(int size) const final;
        void InternalSwap(BuildingMsg* other);

    private:
        friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
        static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName()
        {
            return "protobuf.BuildingMsg";
        }

    protected:
        explicit BuildingMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned = false);

    public:
        static const ClassData _class_data_;
        const ::PROTOBUF_NAMESPACE_ID::Message::ClassData* GetClassData() const final;

        ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

        // nested types ----------------------------------------------------

        // accessors -------------------------------------------------------

        enum : int
        {
            kBuildingIdFieldNumber = 1,
            kBuildingTypeFieldNumber = 2,
        };
        // int64 building_id = 1;
        void clear_building_id();
        int64_t building_id() const;
        void set_building_id(int64_t value);

    private:
        int64_t _internal_building_id() const;
        void _internal_set_building_id(int64_t value);

    public:
        // .protobuf.BuildingType building_type = 2;
        void clear_building_type();
        ::protobuf::BuildingType building_type() const;
        void set_building_type(::protobuf::BuildingType value);

    private:
        ::protobuf::BuildingType _internal_building_type() const;
        void _internal_set_building_type(::protobuf::BuildingType value);

    public:
        // @@protoc_insertion_point(class_scope:protobuf.BuildingMsg)

    private:
        class _Internal;

        template<typename T>
        friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
        typedef void InternalArenaConstructable_;
        typedef void DestructorSkippable_;
        int64_t building_id_;
        int building_type_;
        mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
        friend struct ::TableStruct_Message2Server_2eproto;
    };
    // -------------------------------------------------------------------

    class HomeMsg final :
        public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protobuf.HomeMsg) */
    {
    public:
        inline HomeMsg() :
            HomeMsg(nullptr)
        {
        }
        ~HomeMsg() override;
        explicit PROTOBUF_CONSTEXPR HomeMsg(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

        HomeMsg(const HomeMsg& from);
        HomeMsg(HomeMsg&& from) noexcept
            :
            HomeMsg()
        {
            *this = ::std::move(from);
        }

        inline HomeMsg& operator=(const HomeMsg& from)
        {
            CopyFrom(from);
            return *this;
        }
        inline HomeMsg& operator=(HomeMsg&& from) noexcept
        {
            if (this == &from)
                return *this;
            if (GetOwningArena() == from.GetOwningArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
                && GetOwningArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
            )
            {
                InternalSwap(&from);
            }
            else
            {
                CopyFrom(from);
            }
            return *this;
        }

        static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor()
        {
            return GetDescriptor();
        }
        static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor()
        {
            return default_instance().GetMetadata().descriptor;
        }
        static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection()
        {
            return default_instance().GetMetadata().reflection;
        }
        static const HomeMsg& default_instance()
        {
            return *internal_default_instance();
        }
        static inline const HomeMsg* internal_default_instance()
        {
            return reinterpret_cast<const HomeMsg*>(
                &_HomeMsg_default_instance_
            );
        }
        static constexpr int kIndexInFileMessages =
            2;

        friend void swap(HomeMsg& a, HomeMsg& b)
        {
            a.Swap(&b);
        }
        inline void Swap(HomeMsg* other)
        {
            if (other == this)
                return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
            if (GetOwningArena() != nullptr &&
                GetOwningArena() == other->GetOwningArena())
            {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
            if (GetOwningArena() == other->GetOwningArena())
            {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
                InternalSwap(other);
            }
            else
            {
                ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
            }
        }
        void UnsafeArenaSwap(HomeMsg* other)
        {
            if (other == this)
                return;
            GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
            InternalSwap(other);
        }

        // implements Message ----------------------------------------------

        HomeMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final
        {
            return CreateMaybeMessage<HomeMsg>(arena);
        }
        using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
        void CopyFrom(const HomeMsg& from);
        using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
        void MergeFrom(const HomeMsg& from);

    private:
        static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);

    public:
        PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
        bool IsInitialized() const final;

        size_t ByteSizeLong() const final;
        const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
        uint8_t* _InternalSerialize(
            uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream
        ) const final;
        int GetCachedSize() const final
        {
            return _cached_size_.Get();
        }

    private:
        void SharedCtor();
        void SharedDtor();
        void SetCachedSize(int size) const final;
        void InternalSwap(HomeMsg* other);

    private:
        friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
        static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName()
        {
            return "protobuf.HomeMsg";
        }

    protected:
        explicit HomeMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned = false);

    public:
        static const ClassData _class_data_;
        const ::PROTOBUF_NAMESPACE_ID::Message::ClassData* GetClassData() const final;

        ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

        // nested types ----------------------------------------------------

        // accessors -------------------------------------------------------

        enum : int
        {
            kTeamFieldNumber = 1,
        };
        // .protobuf.PlayerTeam team = 1;
        void clear_team();
        ::protobuf::PlayerTeam team() const;
        void set_team(::protobuf::PlayerTeam value);

    private:
        ::protobuf::PlayerTeam _internal_team() const;
        void _internal_set_team(::protobuf::PlayerTeam value);

    public:
        // @@protoc_insertion_point(class_scope:protobuf.HomeMsg)

    private:
        class _Internal;

        template<typename T>
        friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
        typedef void InternalArenaConstructable_;
        typedef void DestructorSkippable_;
        int team_;
        mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
        friend struct ::TableStruct_Message2Server_2eproto;
    };
    // -------------------------------------------------------------------

    class CollectorMsg final :
        public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protobuf.CollectorMsg) */
    {
    public:
        inline CollectorMsg() :
            CollectorMsg(nullptr)
        {
        }
        ~CollectorMsg() override;
        explicit PROTOBUF_CONSTEXPR CollectorMsg(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

        CollectorMsg(const CollectorMsg& from);
        CollectorMsg(CollectorMsg&& from) noexcept
            :
            CollectorMsg()
        {
            *this = ::std::move(from);
        }

        inline CollectorMsg& operator=(const CollectorMsg& from)
        {
            CopyFrom(from);
            return *this;
        }
        inline CollectorMsg& operator=(CollectorMsg&& from) noexcept
        {
            if (this == &from)
                return *this;
            if (GetOwningArena() == from.GetOwningArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
                && GetOwningArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
            )
            {
                InternalSwap(&from);
            }
            else
            {
                CopyFrom(from);
            }
            return *this;
        }

        static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor()
        {
            return GetDescriptor();
        }
        static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor()
        {
            return default_instance().GetMetadata().descriptor;
        }
        static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection()
        {
            return default_instance().GetMetadata().reflection;
        }
        static const CollectorMsg& default_instance()
        {
            return *internal_default_instance();
        }
        static inline const CollectorMsg* internal_default_instance()
        {
            return reinterpret_cast<const CollectorMsg*>(
                &_CollectorMsg_default_instance_
            );
        }
        static constexpr int kIndexInFileMessages =
            3;

        friend void swap(CollectorMsg& a, CollectorMsg& b)
        {
            a.Swap(&b);
        }
        inline void Swap(CollectorMsg* other)
        {
            if (other == this)
                return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
            if (GetOwningArena() != nullptr &&
                GetOwningArena() == other->GetOwningArena())
            {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
            if (GetOwningArena() == other->GetOwningArena())
            {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
                InternalSwap(other);
            }
            else
            {
                ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
            }
        }
        void UnsafeArenaSwap(CollectorMsg* other)
        {
            if (other == this)
                return;
            GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
            InternalSwap(other);
        }

        // implements Message ----------------------------------------------

        CollectorMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final
        {
            return CreateMaybeMessage<CollectorMsg>(arena);
        }
        using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
        void CopyFrom(const CollectorMsg& from);
        using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
        void MergeFrom(const CollectorMsg& from);

    private:
        static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);

    public:
        PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
        bool IsInitialized() const final;

        size_t ByteSizeLong() const final;
        const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
        uint8_t* _InternalSerialize(
            uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream
        ) const final;
        int GetCachedSize() const final
        {
            return _cached_size_.Get();
        }

    private:
        void SharedCtor();
        void SharedDtor();
        void SetCachedSize(int size) const final;
        void InternalSwap(CollectorMsg* other);

    private:
        friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
        static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName()
        {
            return "protobuf.CollectorMsg";
        }

    protected:
        explicit CollectorMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned = false);

    public:
        static const ClassData _class_data_;
        const ::PROTOBUF_NAMESPACE_ID::Message::ClassData* GetClassData() const final;

        ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

        // nested types ----------------------------------------------------

        // accessors -------------------------------------------------------

        enum : int
        {
            kCollectorIdFieldNumber = 1,
            kCollectorTypeFieldNumber = 2,
        };
        // int64 collector_id = 1;
        void clear_collector_id();
        int64_t collector_id() const;
        void set_collector_id(int64_t value);

    private:
        int64_t _internal_collector_id() const;
        void _internal_set_collector_id(int64_t value);

    public:
        // .protobuf.CollectorType collector_type = 2;
        void clear_collector_type();
        ::protobuf::CollectorType collector_type() const;
        void set_collector_type(::protobuf::CollectorType value);

    private:
        ::protobuf::CollectorType _internal_collector_type() const;
        void _internal_set_collector_type(::protobuf::CollectorType value);

    public:
        // @@protoc_insertion_point(class_scope:protobuf.CollectorMsg)

    private:
        class _Internal;

        template<typename T>
        friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
        typedef void InternalArenaConstructable_;
        typedef void DestructorSkippable_;
        int64_t collector_id_;
        int collector_type_;
        mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
        friend struct ::TableStruct_Message2Server_2eproto;
    };
    // -------------------------------------------------------------------

    class ArmorMsg final :
        public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protobuf.ArmorMsg) */
    {
    public:
        inline ArmorMsg() :
            ArmorMsg(nullptr)
        {
        }
        ~ArmorMsg() override;
        explicit PROTOBUF_CONSTEXPR ArmorMsg(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

        ArmorMsg(const ArmorMsg& from);
        ArmorMsg(ArmorMsg&& from) noexcept
            :
            ArmorMsg()
        {
            *this = ::std::move(from);
        }

        inline ArmorMsg& operator=(const ArmorMsg& from)
        {
            CopyFrom(from);
            return *this;
        }
        inline ArmorMsg& operator=(ArmorMsg&& from) noexcept
        {
            if (this == &from)
                return *this;
            if (GetOwningArena() == from.GetOwningArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
                && GetOwningArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
            )
            {
                InternalSwap(&from);
            }
            else
            {
                CopyFrom(from);
            }
            return *this;
        }

        static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor()
        {
            return GetDescriptor();
        }
        static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor()
        {
            return default_instance().GetMetadata().descriptor;
        }
        static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection()
        {
            return default_instance().GetMetadata().reflection;
        }
        static const ArmorMsg& default_instance()
        {
            return *internal_default_instance();
        }
        static inline const ArmorMsg* internal_default_instance()
        {
            return reinterpret_cast<const ArmorMsg*>(
                &_ArmorMsg_default_instance_
            );
        }
        static constexpr int kIndexInFileMessages =
            4;

        friend void swap(ArmorMsg& a, ArmorMsg& b)
        {
            a.Swap(&b);
        }
        inline void Swap(ArmorMsg* other)
        {
            if (other == this)
                return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
            if (GetOwningArena() != nullptr &&
                GetOwningArena() == other->GetOwningArena())
            {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
            if (GetOwningArena() == other->GetOwningArena())
            {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
                InternalSwap(other);
            }
            else
            {
                ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
            }
        }
        void UnsafeArenaSwap(ArmorMsg* other)
        {
            if (other == this)
                return;
            GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
            InternalSwap(other);
        }

        // implements Message ----------------------------------------------

        ArmorMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final
        {
            return CreateMaybeMessage<ArmorMsg>(arena);
        }
        using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
        void CopyFrom(const ArmorMsg& from);
        using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
        void MergeFrom(const ArmorMsg& from);

    private:
        static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);

    public:
        PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
        bool IsInitialized() const final;

        size_t ByteSizeLong() const final;
        const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
        uint8_t* _InternalSerialize(
            uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream
        ) const final;
        int GetCachedSize() const final
        {
            return _cached_size_.Get();
        }

    private:
        void SharedCtor();
        void SharedDtor();
        void SetCachedSize(int size) const final;
        void InternalSwap(ArmorMsg* other);

    private:
        friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
        static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName()
        {
            return "protobuf.ArmorMsg";
        }

    protected:
        explicit ArmorMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned = false);

    public:
        static const ClassData _class_data_;
        const ::PROTOBUF_NAMESPACE_ID::Message::ClassData* GetClassData() const final;

        ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

        // nested types ----------------------------------------------------

        // accessors -------------------------------------------------------

        enum : int
        {
            kArmorIdFieldNumber = 1,
            kArmorTypeFieldNumber = 2,
        };
        // int64 armor_id = 1;
        void clear_armor_id();
        int64_t armor_id() const;
        void set_armor_id(int64_t value);

    private:
        int64_t _internal_armor_id() const;
        void _internal_set_armor_id(int64_t value);

    public:
        // .protobuf.ArmorType armor_type = 2;
        void clear_armor_type();
        ::protobuf::ArmorType armor_type() const;
        void set_armor_type(::protobuf::ArmorType value);

    private:
        ::protobuf::ArmorType _internal_armor_type() const;
        void _internal_set_armor_type(::protobuf::ArmorType value);

    public:
        // @@protoc_insertion_point(class_scope:protobuf.ArmorMsg)

    private:
        class _Internal;

        template<typename T>
        friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
        typedef void InternalArenaConstructable_;
        typedef void DestructorSkippable_;
        int64_t armor_id_;
        int armor_type_;
        mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
        friend struct ::TableStruct_Message2Server_2eproto;
    };
    // -------------------------------------------------------------------

    class ShieldMsg final :
        public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protobuf.ShieldMsg) */
    {
    public:
        inline ShieldMsg() :
            ShieldMsg(nullptr)
        {
        }
        ~ShieldMsg() override;
        explicit PROTOBUF_CONSTEXPR ShieldMsg(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

        ShieldMsg(const ShieldMsg& from);
        ShieldMsg(ShieldMsg&& from) noexcept
            :
            ShieldMsg()
        {
            *this = ::std::move(from);
        }

        inline ShieldMsg& operator=(const ShieldMsg& from)
        {
            CopyFrom(from);
            return *this;
        }
        inline ShieldMsg& operator=(ShieldMsg&& from) noexcept
        {
            if (this == &from)
                return *this;
            if (GetOwningArena() == from.GetOwningArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
                && GetOwningArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
            )
            {
                InternalSwap(&from);
            }
            else
            {
                CopyFrom(from);
            }
            return *this;
        }

        static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor()
        {
            return GetDescriptor();
        }
        static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor()
        {
            return default_instance().GetMetadata().descriptor;
        }
        static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection()
        {
            return default_instance().GetMetadata().reflection;
        }
        static const ShieldMsg& default_instance()
        {
            return *internal_default_instance();
        }
        static inline const ShieldMsg* internal_default_instance()
        {
            return reinterpret_cast<const ShieldMsg*>(
                &_ShieldMsg_default_instance_
            );
        }
        static constexpr int kIndexInFileMessages =
            5;

        friend void swap(ShieldMsg& a, ShieldMsg& b)
        {
            a.Swap(&b);
        }
        inline void Swap(ShieldMsg* other)
        {
            if (other == this)
                return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
            if (GetOwningArena() != nullptr &&
                GetOwningArena() == other->GetOwningArena())
            {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
            if (GetOwningArena() == other->GetOwningArena())
            {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
                InternalSwap(other);
            }
            else
            {
                ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
            }
        }
        void UnsafeArenaSwap(ShieldMsg* other)
        {
            if (other == this)
                return;
            GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
            InternalSwap(other);
        }

        // implements Message ----------------------------------------------

        ShieldMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final
        {
            return CreateMaybeMessage<ShieldMsg>(arena);
        }
        using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
        void CopyFrom(const ShieldMsg& from);
        using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
        void MergeFrom(const ShieldMsg& from);

    private:
        static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);

    public:
        PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
        bool IsInitialized() const final;

        size_t ByteSizeLong() const final;
        const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
        uint8_t* _InternalSerialize(
            uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream
        ) const final;
        int GetCachedSize() const final
        {
            return _cached_size_.Get();
        }

    private:
        void SharedCtor();
        void SharedDtor();
        void SetCachedSize(int size) const final;
        void InternalSwap(ShieldMsg* other);

    private:
        friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
        static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName()
        {
            return "protobuf.ShieldMsg";
        }

    protected:
        explicit ShieldMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned = false);

    public:
        static const ClassData _class_data_;
        const ::PROTOBUF_NAMESPACE_ID::Message::ClassData* GetClassData() const final;

        ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

        // nested types ----------------------------------------------------

        // accessors -------------------------------------------------------

        enum : int
        {
            kShieldIdFieldNumber = 1,
            kShieldTypeFieldNumber = 2,
        };
        // int64 shield_id = 1;
        void clear_shield_id();
        int64_t shield_id() const;
        void set_shield_id(int64_t value);

    private:
        int64_t _internal_shield_id() const;
        void _internal_set_shield_id(int64_t value);

    public:
        // .protobuf.ShieldType shield_type = 2;
        void clear_shield_type();
        ::protobuf::ShieldType shield_type() const;
        void set_shield_type(::protobuf::ShieldType value);

    private:
        ::protobuf::ShieldType _internal_shield_type() const;
        void _internal_set_shield_type(::protobuf::ShieldType value);

    public:
        // @@protoc_insertion_point(class_scope:protobuf.ShieldMsg)

    private:
        class _Internal;

        template<typename T>
        friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
        typedef void InternalArenaConstructable_;
        typedef void DestructorSkippable_;
        int64_t shield_id_;
        int shield_type_;
        mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
        friend struct ::TableStruct_Message2Server_2eproto;
    };
    // -------------------------------------------------------------------

    class BuilderMsg final :
        public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protobuf.BuilderMsg) */
    {
    public:
        inline BuilderMsg() :
            BuilderMsg(nullptr)
        {
        }
        ~BuilderMsg() override;
        explicit PROTOBUF_CONSTEXPR BuilderMsg(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

        BuilderMsg(const BuilderMsg& from);
        BuilderMsg(BuilderMsg&& from) noexcept
            :
            BuilderMsg()
        {
            *this = ::std::move(from);
        }

        inline BuilderMsg& operator=(const BuilderMsg& from)
        {
            CopyFrom(from);
            return *this;
        }
        inline BuilderMsg& operator=(BuilderMsg&& from) noexcept
        {
            if (this == &from)
                return *this;
            if (GetOwningArena() == from.GetOwningArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
                && GetOwningArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
            )
            {
                InternalSwap(&from);
            }
            else
            {
                CopyFrom(from);
            }
            return *this;
        }

        static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor()
        {
            return GetDescriptor();
        }
        static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor()
        {
            return default_instance().GetMetadata().descriptor;
        }
        static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection()
        {
            return default_instance().GetMetadata().reflection;
        }
        static const BuilderMsg& default_instance()
        {
            return *internal_default_instance();
        }
        static inline const BuilderMsg* internal_default_instance()
        {
            return reinterpret_cast<const BuilderMsg*>(
                &_BuilderMsg_default_instance_
            );
        }
        static constexpr int kIndexInFileMessages =
            6;

        friend void swap(BuilderMsg& a, BuilderMsg& b)
        {
            a.Swap(&b);
        }
        inline void Swap(BuilderMsg* other)
        {
            if (other == this)
                return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
            if (GetOwningArena() != nullptr &&
                GetOwningArena() == other->GetOwningArena())
            {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
            if (GetOwningArena() == other->GetOwningArena())
            {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
                InternalSwap(other);
            }
            else
            {
                ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
            }
        }
        void UnsafeArenaSwap(BuilderMsg* other)
        {
            if (other == this)
                return;
            GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
            InternalSwap(other);
        }

        // implements Message ----------------------------------------------

        BuilderMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final
        {
            return CreateMaybeMessage<BuilderMsg>(arena);
        }
        using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
        void CopyFrom(const BuilderMsg& from);
        using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
        void MergeFrom(const BuilderMsg& from);

    private:
        static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);

    public:
        PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
        bool IsInitialized() const final;

        size_t ByteSizeLong() const final;
        const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
        uint8_t* _InternalSerialize(
            uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream
        ) const final;
        int GetCachedSize() const final
        {
            return _cached_size_.Get();
        }

    private:
        void SharedCtor();
        void SharedDtor();
        void SetCachedSize(int size) const final;
        void InternalSwap(BuilderMsg* other);

    private:
        friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
        static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName()
        {
            return "protobuf.BuilderMsg";
        }

    protected:
        explicit BuilderMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned = false);

    public:
        static const ClassData _class_data_;
        const ::PROTOBUF_NAMESPACE_ID::Message::ClassData* GetClassData() const final;

        ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

        // nested types ----------------------------------------------------

        // accessors -------------------------------------------------------

        enum : int
        {
            kBuilderIdFieldNumber = 1,
            kBuilderTypeFieldNumber = 2,
        };
        // int64 builder_id = 1;
        void clear_builder_id();
        int64_t builder_id() const;
        void set_builder_id(int64_t value);

    private:
        int64_t _internal_builder_id() const;
        void _internal_set_builder_id(int64_t value);

    public:
        // .protobuf.BuilderType builder_type = 2;
        void clear_builder_type();
        ::protobuf::BuilderType builder_type() const;
        void set_builder_type(::protobuf::BuilderType value);

    private:
        ::protobuf::BuilderType _internal_builder_type() const;
        void _internal_set_builder_type(::protobuf::BuilderType value);

    public:
        // @@protoc_insertion_point(class_scope:protobuf.BuilderMsg)

    private:
        class _Internal;

        template<typename T>
        friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
        typedef void InternalArenaConstructable_;
        typedef void DestructorSkippable_;
        int64_t builder_id_;
        int builder_type_;
        mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
        friend struct ::TableStruct_Message2Server_2eproto;
    };
    // -------------------------------------------------------------------

    class BulleterMsg final :
        public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protobuf.BulleterMsg) */
    {
    public:
        inline BulleterMsg() :
            BulleterMsg(nullptr)
        {
        }
        ~BulleterMsg() override;
        explicit PROTOBUF_CONSTEXPR BulleterMsg(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

        BulleterMsg(const BulleterMsg& from);
        BulleterMsg(BulleterMsg&& from) noexcept
            :
            BulleterMsg()
        {
            *this = ::std::move(from);
        }

        inline BulleterMsg& operator=(const BulleterMsg& from)
        {
            CopyFrom(from);
            return *this;
        }
        inline BulleterMsg& operator=(BulleterMsg&& from) noexcept
        {
            if (this == &from)
                return *this;
            if (GetOwningArena() == from.GetOwningArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
                && GetOwningArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
            )
            {
                InternalSwap(&from);
            }
            else
            {
                CopyFrom(from);
            }
            return *this;
        }

        static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor()
        {
            return GetDescriptor();
        }
        static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor()
        {
            return default_instance().GetMetadata().descriptor;
        }
        static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection()
        {
            return default_instance().GetMetadata().reflection;
        }
        static const BulleterMsg& default_instance()
        {
            return *internal_default_instance();
        }
        static inline const BulleterMsg* internal_default_instance()
        {
            return reinterpret_cast<const BulleterMsg*>(
                &_BulleterMsg_default_instance_
            );
        }
        static constexpr int kIndexInFileMessages =
            7;

        friend void swap(BulleterMsg& a, BulleterMsg& b)
        {
            a.Swap(&b);
        }
        inline void Swap(BulleterMsg* other)
        {
            if (other == this)
                return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
            if (GetOwningArena() != nullptr &&
                GetOwningArena() == other->GetOwningArena())
            {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
            if (GetOwningArena() == other->GetOwningArena())
            {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
                InternalSwap(other);
            }
            else
            {
                ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
            }
        }
        void UnsafeArenaSwap(BulleterMsg* other)
        {
            if (other == this)
                return;
            GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
            InternalSwap(other);
        }

        // implements Message ----------------------------------------------

        BulleterMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final
        {
            return CreateMaybeMessage<BulleterMsg>(arena);
        }
        using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
        void CopyFrom(const BulleterMsg& from);
        using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
        void MergeFrom(const BulleterMsg& from);

    private:
        static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);

    public:
        PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
        bool IsInitialized() const final;

        size_t ByteSizeLong() const final;
        const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
        uint8_t* _InternalSerialize(
            uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream
        ) const final;
        int GetCachedSize() const final
        {
            return _cached_size_.Get();
        }

    private:
        void SharedCtor();
        void SharedDtor();
        void SetCachedSize(int size) const final;
        void InternalSwap(BulleterMsg* other);

    private:
        friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
        static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName()
        {
            return "protobuf.BulleterMsg";
        }

    protected:
        explicit BulleterMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned = false);

    public:
        static const ClassData _class_data_;
        const ::PROTOBUF_NAMESPACE_ID::Message::ClassData* GetClassData() const final;

        ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

        // nested types ----------------------------------------------------

        // accessors -------------------------------------------------------

        enum : int
        {
            kBulletIdFieldNumber = 1,
            kBulletTypeFieldNumber = 2,
        };
        // int64 bullet_id = 1;
        void clear_bullet_id();
        int64_t bullet_id() const;
        void set_bullet_id(int64_t value);

    private:
        int64_t _internal_bullet_id() const;
        void _internal_set_bullet_id(int64_t value);

    public:
        // .protobuf.BulletType bullet_type = 2;
        void clear_bullet_type();
        ::protobuf::BulletType bullet_type() const;
        void set_bullet_type(::protobuf::BulletType value);

    private:
        ::protobuf::BulletType _internal_bullet_type() const;
        void _internal_set_bullet_type(::protobuf::BulletType value);

    public:
        // @@protoc_insertion_point(class_scope:protobuf.BulleterMsg)

    private:
        class _Internal;

        template<typename T>
        friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
        typedef void InternalArenaConstructable_;
        typedef void DestructorSkippable_;
        int64_t bullet_id_;
        int bullet_type_;
        mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
        friend struct ::TableStruct_Message2Server_2eproto;
    };
    // -------------------------------------------------------------------

    class MoveMsg final :
        public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protobuf.MoveMsg) */
    {
    public:
        inline MoveMsg() :
            MoveMsg(nullptr)
        {
        }
        ~MoveMsg() override;
        explicit PROTOBUF_CONSTEXPR MoveMsg(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

        MoveMsg(const MoveMsg& from);
        MoveMsg(MoveMsg&& from) noexcept
            :
            MoveMsg()
        {
            *this = ::std::move(from);
        }

        inline MoveMsg& operator=(const MoveMsg& from)
        {
            CopyFrom(from);
            return *this;
        }
        inline MoveMsg& operator=(MoveMsg&& from) noexcept
        {
            if (this == &from)
                return *this;
            if (GetOwningArena() == from.GetOwningArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
                && GetOwningArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
            )
            {
                InternalSwap(&from);
            }
            else
            {
                CopyFrom(from);
            }
            return *this;
        }

        static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor()
        {
            return GetDescriptor();
        }
        static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor()
        {
            return default_instance().GetMetadata().descriptor;
        }
        static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection()
        {
            return default_instance().GetMetadata().reflection;
        }
        static const MoveMsg& default_instance()
        {
            return *internal_default_instance();
        }
        static inline const MoveMsg* internal_default_instance()
        {
            return reinterpret_cast<const MoveMsg*>(
                &_MoveMsg_default_instance_
            );
        }
        static constexpr int kIndexInFileMessages =
            8;

        friend void swap(MoveMsg& a, MoveMsg& b)
        {
            a.Swap(&b);
        }
        inline void Swap(MoveMsg* other)
        {
            if (other == this)
                return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
            if (GetOwningArena() != nullptr &&
                GetOwningArena() == other->GetOwningArena())
            {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
            if (GetOwningArena() == other->GetOwningArena())
            {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
                InternalSwap(other);
            }
            else
            {
                ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
            }
        }
        void UnsafeArenaSwap(MoveMsg* other)
        {
            if (other == this)
                return;
            GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
            InternalSwap(other);
        }

        // implements Message ----------------------------------------------

        MoveMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final
        {
            return CreateMaybeMessage<MoveMsg>(arena);
        }
        using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
        void CopyFrom(const MoveMsg& from);
        using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
        void MergeFrom(const MoveMsg& from);

    private:
        static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);

    public:
        PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
        bool IsInitialized() const final;

        size_t ByteSizeLong() const final;
        const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
        uint8_t* _InternalSerialize(
            uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream
        ) const final;
        int GetCachedSize() const final
        {
            return _cached_size_.Get();
        }

    private:
        void SharedCtor();
        void SharedDtor();
        void SetCachedSize(int size) const final;
        void InternalSwap(MoveMsg* other);

    private:
        friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
        static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName()
        {
            return "protobuf.MoveMsg";
        }

    protected:
        explicit MoveMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned = false);

    public:
        static const ClassData _class_data_;
        const ::PROTOBUF_NAMESPACE_ID::Message::ClassData* GetClassData() const final;

        ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

        // nested types ----------------------------------------------------

        // accessors -------------------------------------------------------

        enum : int
        {
            kShipIdFieldNumber = 1,
            kAngleFieldNumber = 2,
            kTimeInMillisecondsFieldNumber = 3,
        };
        // int64 ship_id = 1;
        void clear_ship_id();
        int64_t ship_id() const;
        void set_ship_id(int64_t value);

    private:
        int64_t _internal_ship_id() const;
        void _internal_set_ship_id(int64_t value);

    public:
        // double angle = 2;
        void clear_angle();
        double angle() const;
        void set_angle(double value);

    private:
        double _internal_angle() const;
        void _internal_set_angle(double value);

    public:
        // int64 time_in_milliseconds = 3;
        void clear_time_in_milliseconds();
        int64_t time_in_milliseconds() const;
        void set_time_in_milliseconds(int64_t value);

    private:
        int64_t _internal_time_in_milliseconds() const;
        void _internal_set_time_in_milliseconds(int64_t value);

    public:
        // @@protoc_insertion_point(class_scope:protobuf.MoveMsg)

    private:
        class _Internal;

        template<typename T>
        friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
        typedef void InternalArenaConstructable_;
        typedef void DestructorSkippable_;
        int64_t ship_id_;
        double angle_;
        int64_t time_in_milliseconds_;
        mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
        friend struct ::TableStruct_Message2Server_2eproto;
    };
    // -------------------------------------------------------------------

    class SendMsg final :
        public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protobuf.SendMsg) */
    {
    public:
        inline SendMsg() :
            SendMsg(nullptr)
        {
        }
        ~SendMsg() override;
        explicit PROTOBUF_CONSTEXPR SendMsg(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

        SendMsg(const SendMsg& from);
        SendMsg(SendMsg&& from) noexcept
            :
            SendMsg()
        {
            *this = ::std::move(from);
        }

        inline SendMsg& operator=(const SendMsg& from)
        {
            CopyFrom(from);
            return *this;
        }
        inline SendMsg& operator=(SendMsg&& from) noexcept
        {
            if (this == &from)
                return *this;
            if (GetOwningArena() == from.GetOwningArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
                && GetOwningArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
            )
            {
                InternalSwap(&from);
            }
            else
            {
                CopyFrom(from);
            }
            return *this;
        }

        static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor()
        {
            return GetDescriptor();
        }
        static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor()
        {
            return default_instance().GetMetadata().descriptor;
        }
        static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection()
        {
            return default_instance().GetMetadata().reflection;
        }
        static const SendMsg& default_instance()
        {
            return *internal_default_instance();
        }
        enum MessageCase
        {
            kTextMessage = 3,
            kBinaryMessage = 4,
            MESSAGE_NOT_SET = 0,
        };

        static inline const SendMsg* internal_default_instance()
        {
            return reinterpret_cast<const SendMsg*>(
                &_SendMsg_default_instance_
            );
        }
        static constexpr int kIndexInFileMessages =
            9;

        friend void swap(SendMsg& a, SendMsg& b)
        {
            a.Swap(&b);
        }
        inline void Swap(SendMsg* other)
        {
            if (other == this)
                return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
            if (GetOwningArena() != nullptr &&
                GetOwningArena() == other->GetOwningArena())
            {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
            if (GetOwningArena() == other->GetOwningArena())
            {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
                InternalSwap(other);
            }
            else
            {
                ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
            }
        }
        void UnsafeArenaSwap(SendMsg* other)
        {
            if (other == this)
                return;
            GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
            InternalSwap(other);
        }

        // implements Message ----------------------------------------------

        SendMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final
        {
            return CreateMaybeMessage<SendMsg>(arena);
        }
        using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
        void CopyFrom(const SendMsg& from);
        using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
        void MergeFrom(const SendMsg& from);

    private:
        static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);

    public:
        PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
        bool IsInitialized() const final;

        size_t ByteSizeLong() const final;
        const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
        uint8_t* _InternalSerialize(
            uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream
        ) const final;
        int GetCachedSize() const final
        {
            return _cached_size_.Get();
        }

    private:
        void SharedCtor();
        void SharedDtor();
        void SetCachedSize(int size) const final;
        void InternalSwap(SendMsg* other);

    private:
        friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
        static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName()
        {
            return "protobuf.SendMsg";
        }

    protected:
        explicit SendMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned = false);

    public:
        static const ClassData _class_data_;
        const ::PROTOBUF_NAMESPACE_ID::Message::ClassData* GetClassData() const final;

        ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

        // nested types ----------------------------------------------------

        // accessors -------------------------------------------------------

        enum : int
        {
            kPlayerIdFieldNumber = 1,
            kToPlayerIdFieldNumber = 2,
            kTextMessageFieldNumber = 3,
            kBinaryMessageFieldNumber = 4,
        };
        // int64 player_id = 1;
        void clear_player_id();
        int64_t player_id() const;
        void set_player_id(int64_t value);

    private:
        int64_t _internal_player_id() const;
        void _internal_set_player_id(int64_t value);

    public:
        // int64 to_player_id = 2;
        void clear_to_player_id();
        int64_t to_player_id() const;
        void set_to_player_id(int64_t value);

    private:
        int64_t _internal_to_player_id() const;
        void _internal_set_to_player_id(int64_t value);

    public:
        // string text_message = 3;
        bool has_text_message() const;

    private:
        bool _internal_has_text_message() const;

    public:
        void clear_text_message();
        const std::string& text_message() const;
        template<typename ArgT0 = const std::string&, typename... ArgT>
        void set_text_message(ArgT0&& arg0, ArgT... args);
        std::string* mutable_text_message();
        PROTOBUF_NODISCARD std::string* release_text_message();
        void set_allocated_text_message(std::string* text_message);

    private:
        const std::string& _internal_text_message() const;
        inline PROTOBUF_ALWAYS_INLINE void _internal_set_text_message(const std::string& value);
        std::string* _internal_mutable_text_message();

    public:
        // bytes binary_message = 4;
        bool has_binary_message() const;

    private:
        bool _internal_has_binary_message() const;

    public:
        void clear_binary_message();
        const std::string& binary_message() const;
        template<typename ArgT0 = const std::string&, typename... ArgT>
        void set_binary_message(ArgT0&& arg0, ArgT... args);
        std::string* mutable_binary_message();
        PROTOBUF_NODISCARD std::string* release_binary_message();
        void set_allocated_binary_message(std::string* binary_message);

    private:
        const std::string& _internal_binary_message() const;
        inline PROTOBUF_ALWAYS_INLINE void _internal_set_binary_message(const std::string& value);
        std::string* _internal_mutable_binary_message();

    public:
        void clear_message();
        MessageCase message_case() const;
        // @@protoc_insertion_point(class_scope:protobuf.SendMsg)

    private:
        class _Internal;
        void set_has_text_message();
        void set_has_binary_message();

        inline bool has_message() const;
        inline void clear_has_message();

        template<typename T>
        friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
        typedef void InternalArenaConstructable_;
        typedef void DestructorSkippable_;
        int64_t player_id_;
        int64_t to_player_id_;
        union MessageUnion
        {
            constexpr MessageUnion() :
                _constinit_{}
            {
            }
            ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
            ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr text_message_;
            ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr binary_message_;
        } message_;
        mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
        uint32_t _oneof_case_[1];

        friend struct ::TableStruct_Message2Server_2eproto;
    };
    // -------------------------------------------------------------------

    class AttackMsg final :
        public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protobuf.AttackMsg) */
    {
    public:
        inline AttackMsg() :
            AttackMsg(nullptr)
        {
        }
        ~AttackMsg() override;
        explicit PROTOBUF_CONSTEXPR AttackMsg(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

        AttackMsg(const AttackMsg& from);
        AttackMsg(AttackMsg&& from) noexcept
            :
            AttackMsg()
        {
            *this = ::std::move(from);
        }

        inline AttackMsg& operator=(const AttackMsg& from)
        {
            CopyFrom(from);
            return *this;
        }
        inline AttackMsg& operator=(AttackMsg&& from) noexcept
        {
            if (this == &from)
                return *this;
            if (GetOwningArena() == from.GetOwningArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
                && GetOwningArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
            )
            {
                InternalSwap(&from);
            }
            else
            {
                CopyFrom(from);
            }
            return *this;
        }

        static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor()
        {
            return GetDescriptor();
        }
        static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor()
        {
            return default_instance().GetMetadata().descriptor;
        }
        static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection()
        {
            return default_instance().GetMetadata().reflection;
        }
        static const AttackMsg& default_instance()
        {
            return *internal_default_instance();
        }
        static inline const AttackMsg* internal_default_instance()
        {
            return reinterpret_cast<const AttackMsg*>(
                &_AttackMsg_default_instance_
            );
        }
        static constexpr int kIndexInFileMessages =
            10;

        friend void swap(AttackMsg& a, AttackMsg& b)
        {
            a.Swap(&b);
        }
        inline void Swap(AttackMsg* other)
        {
            if (other == this)
                return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
            if (GetOwningArena() != nullptr &&
                GetOwningArena() == other->GetOwningArena())
            {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
            if (GetOwningArena() == other->GetOwningArena())
            {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
                InternalSwap(other);
            }
            else
            {
                ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
            }
        }
        void UnsafeArenaSwap(AttackMsg* other)
        {
            if (other == this)
                return;
            GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
            InternalSwap(other);
        }

        // implements Message ----------------------------------------------

        AttackMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final
        {
            return CreateMaybeMessage<AttackMsg>(arena);
        }
        using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
        void CopyFrom(const AttackMsg& from);
        using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
        void MergeFrom(const AttackMsg& from);

    private:
        static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);

    public:
        PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
        bool IsInitialized() const final;

        size_t ByteSizeLong() const final;
        const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
        uint8_t* _InternalSerialize(
            uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream
        ) const final;
        int GetCachedSize() const final
        {
            return _cached_size_.Get();
        }

    private:
        void SharedCtor();
        void SharedDtor();
        void SetCachedSize(int size) const final;
        void InternalSwap(AttackMsg* other);

    private:
        friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
        static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName()
        {
            return "protobuf.AttackMsg";
        }

    protected:
        explicit AttackMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned = false);

    public:
        static const ClassData _class_data_;
        const ::PROTOBUF_NAMESPACE_ID::Message::ClassData* GetClassData() const final;

        ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

        // nested types ----------------------------------------------------

        // accessors -------------------------------------------------------

        enum : int
        {
            kShipIdFieldNumber = 1,
            kAngleFieldNumber = 2,
        };
        // int64 ship_id = 1;
        void clear_ship_id();
        int64_t ship_id() const;
        void set_ship_id(int64_t value);

    private:
        int64_t _internal_ship_id() const;
        void _internal_set_ship_id(int64_t value);

    public:
        // double angle = 2;
        void clear_angle();
        double angle() const;
        void set_angle(double value);

    private:
        double _internal_angle() const;
        void _internal_set_angle(double value);

    public:
        // @@protoc_insertion_point(class_scope:protobuf.AttackMsg)

    private:
        class _Internal;

        template<typename T>
        friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
        typedef void InternalArenaConstructable_;
        typedef void DestructorSkippable_;
        int64_t ship_id_;
        double angle_;
        mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
        friend struct ::TableStruct_Message2Server_2eproto;
    };
    // -------------------------------------------------------------------

    class IDMsg final :
        public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protobuf.IDMsg) */
    {
    public:
        inline IDMsg() :
            IDMsg(nullptr)
        {
        }
        ~IDMsg() override;
        explicit PROTOBUF_CONSTEXPR IDMsg(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

        IDMsg(const IDMsg& from);
        IDMsg(IDMsg&& from) noexcept
            :
            IDMsg()
        {
            *this = ::std::move(from);
        }

        inline IDMsg& operator=(const IDMsg& from)
        {
            CopyFrom(from);
            return *this;
        }
        inline IDMsg& operator=(IDMsg&& from) noexcept
        {
            if (this == &from)
                return *this;
            if (GetOwningArena() == from.GetOwningArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
                && GetOwningArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
            )
            {
                InternalSwap(&from);
            }
            else
            {
                CopyFrom(from);
            }
            return *this;
        }

        static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor()
        {
            return GetDescriptor();
        }
        static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor()
        {
            return default_instance().GetMetadata().descriptor;
        }
        static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection()
        {
            return default_instance().GetMetadata().reflection;
        }
        static const IDMsg& default_instance()
        {
            return *internal_default_instance();
        }
        static inline const IDMsg* internal_default_instance()
        {
            return reinterpret_cast<const IDMsg*>(
                &_IDMsg_default_instance_
            );
        }
        static constexpr int kIndexInFileMessages =
            11;

        friend void swap(IDMsg& a, IDMsg& b)
        {
            a.Swap(&b);
        }
        inline void Swap(IDMsg* other)
        {
            if (other == this)
                return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
            if (GetOwningArena() != nullptr &&
                GetOwningArena() == other->GetOwningArena())
            {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
            if (GetOwningArena() == other->GetOwningArena())
            {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
                InternalSwap(other);
            }
            else
            {
                ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
            }
        }
        void UnsafeArenaSwap(IDMsg* other)
        {
            if (other == this)
                return;
            GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
            InternalSwap(other);
        }

        // implements Message ----------------------------------------------

        IDMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final
        {
            return CreateMaybeMessage<IDMsg>(arena);
        }
        using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
        void CopyFrom(const IDMsg& from);
        using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
        void MergeFrom(const IDMsg& from);

    private:
        static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);

    public:
        PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
        bool IsInitialized() const final;

        size_t ByteSizeLong() const final;
        const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
        uint8_t* _InternalSerialize(
            uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream
        ) const final;
        int GetCachedSize() const final
        {
            return _cached_size_.Get();
        }

    private:
        void SharedCtor();
        void SharedDtor();
        void SetCachedSize(int size) const final;
        void InternalSwap(IDMsg* other);

    private:
        friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
        static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName()
        {
            return "protobuf.IDMsg";
        }

    protected:
        explicit IDMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned = false);

    public:
        static const ClassData _class_data_;
        const ::PROTOBUF_NAMESPACE_ID::Message::ClassData* GetClassData() const final;

        ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

        // nested types ----------------------------------------------------

        // accessors -------------------------------------------------------

        enum : int
        {
            kShipIdFieldNumber = 1,
        };
        // int64 ship_id = 1;
        void clear_ship_id();
        int64_t ship_id() const;
        void set_ship_id(int64_t value);

    private:
        int64_t _internal_ship_id() const;
        void _internal_set_ship_id(int64_t value);

    public:
        // @@protoc_insertion_point(class_scope:protobuf.IDMsg)

    private:
        class _Internal;

        template<typename T>
        friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
        typedef void InternalArenaConstructable_;
        typedef void DestructorSkippable_;
        int64_t ship_id_;
        mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
        friend struct ::TableStruct_Message2Server_2eproto;
    };
    // -------------------------------------------------------------------

    class RecoverMsg final :
        public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protobuf.RecoverMsg) */
    {
    public:
        inline RecoverMsg() :
            RecoverMsg(nullptr)
        {
        }
        ~RecoverMsg() override;
        explicit PROTOBUF_CONSTEXPR RecoverMsg(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

        RecoverMsg(const RecoverMsg& from);
        RecoverMsg(RecoverMsg&& from) noexcept
            :
            RecoverMsg()
        {
            *this = ::std::move(from);
        }

        inline RecoverMsg& operator=(const RecoverMsg& from)
        {
            CopyFrom(from);
            return *this;
        }
        inline RecoverMsg& operator=(RecoverMsg&& from) noexcept
        {
            if (this == &from)
                return *this;
            if (GetOwningArena() == from.GetOwningArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
                && GetOwningArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
            )
            {
                InternalSwap(&from);
            }
            else
            {
                CopyFrom(from);
            }
            return *this;
        }

        static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor()
        {
            return GetDescriptor();
        }
        static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor()
        {
            return default_instance().GetMetadata().descriptor;
        }
        static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection()
        {
            return default_instance().GetMetadata().reflection;
        }
        static const RecoverMsg& default_instance()
        {
            return *internal_default_instance();
        }
        static inline const RecoverMsg* internal_default_instance()
        {
            return reinterpret_cast<const RecoverMsg*>(
                &_RecoverMsg_default_instance_
            );
        }
        static constexpr int kIndexInFileMessages =
            12;

        friend void swap(RecoverMsg& a, RecoverMsg& b)
        {
            a.Swap(&b);
        }
        inline void Swap(RecoverMsg* other)
        {
            if (other == this)
                return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
            if (GetOwningArena() != nullptr &&
                GetOwningArena() == other->GetOwningArena())
            {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
            if (GetOwningArena() == other->GetOwningArena())
            {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
                InternalSwap(other);
            }
            else
            {
                ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
            }
        }
        void UnsafeArenaSwap(RecoverMsg* other)
        {
            if (other == this)
                return;
            GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
            InternalSwap(other);
        }

        // implements Message ----------------------------------------------

        RecoverMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final
        {
            return CreateMaybeMessage<RecoverMsg>(arena);
        }
        using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
        void CopyFrom(const RecoverMsg& from);
        using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
        void MergeFrom(const RecoverMsg& from);

    private:
        static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);

    public:
        PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
        bool IsInitialized() const final;

        size_t ByteSizeLong() const final;
        const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
        uint8_t* _InternalSerialize(
            uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream
        ) const final;
        int GetCachedSize() const final
        {
            return _cached_size_.Get();
        }

    private:
        void SharedCtor();
        void SharedDtor();
        void SetCachedSize(int size) const final;
        void InternalSwap(RecoverMsg* other);

    private:
        friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
        static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName()
        {
            return "protobuf.RecoverMsg";
        }

    protected:
        explicit RecoverMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned = false);

    public:
        static const ClassData _class_data_;
        const ::PROTOBUF_NAMESPACE_ID::Message::ClassData* GetClassData() const final;

        ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

        // nested types ----------------------------------------------------

        // accessors -------------------------------------------------------

        enum : int
        {
            kShipIdFieldNumber = 1,
        };
        // int64 ship_id = 1;
        void clear_ship_id();
        int64_t ship_id() const;
        void set_ship_id(int64_t value);

    private:
        int64_t _internal_ship_id() const;
        void _internal_set_ship_id(int64_t value);

    public:
        // @@protoc_insertion_point(class_scope:protobuf.RecoverMsg)

    private:
        class _Internal;

        template<typename T>
        friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
        typedef void InternalArenaConstructable_;
        typedef void DestructorSkippable_;
        int64_t ship_id_;
        mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
        friend struct ::TableStruct_Message2Server_2eproto;
    };
    // -------------------------------------------------------------------

    class BuildMsg final :
        public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protobuf.BuildMsg) */
    {
    public:
        inline BuildMsg() :
            BuildMsg(nullptr)
        {
        }
        ~BuildMsg() override;
        explicit PROTOBUF_CONSTEXPR BuildMsg(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

        BuildMsg(const BuildMsg& from);
        BuildMsg(BuildMsg&& from) noexcept
            :
            BuildMsg()
        {
            *this = ::std::move(from);
        }

        inline BuildMsg& operator=(const BuildMsg& from)
        {
            CopyFrom(from);
            return *this;
        }
        inline BuildMsg& operator=(BuildMsg&& from) noexcept
        {
            if (this == &from)
                return *this;
            if (GetOwningArena() == from.GetOwningArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
                && GetOwningArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
            )
            {
                InternalSwap(&from);
            }
            else
            {
                CopyFrom(from);
            }
            return *this;
        }

        static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor()
        {
            return GetDescriptor();
        }
        static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor()
        {
            return default_instance().GetMetadata().descriptor;
        }
        static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection()
        {
            return default_instance().GetMetadata().reflection;
        }
        static const BuildMsg& default_instance()
        {
            return *internal_default_instance();
        }
        static inline const BuildMsg* internal_default_instance()
        {
            return reinterpret_cast<const BuildMsg*>(
                &_BuildMsg_default_instance_
            );
        }
        static constexpr int kIndexInFileMessages =
            13;

        friend void swap(BuildMsg& a, BuildMsg& b)
        {
            a.Swap(&b);
        }
        inline void Swap(BuildMsg* other)
        {
            if (other == this)
                return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
            if (GetOwningArena() != nullptr &&
                GetOwningArena() == other->GetOwningArena())
            {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
            if (GetOwningArena() == other->GetOwningArena())
            {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
                InternalSwap(other);
            }
            else
            {
                ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
            }
        }
        void UnsafeArenaSwap(BuildMsg* other)
        {
            if (other == this)
                return;
            GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
            InternalSwap(other);
        }

        // implements Message ----------------------------------------------

        BuildMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final
        {
            return CreateMaybeMessage<BuildMsg>(arena);
        }
        using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
        void CopyFrom(const BuildMsg& from);
        using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
        void MergeFrom(const BuildMsg& from);

    private:
        static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);

    public:
        PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
        bool IsInitialized() const final;

        size_t ByteSizeLong() const final;
        const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
        uint8_t* _InternalSerialize(
            uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream
        ) const final;
        int GetCachedSize() const final
        {
            return _cached_size_.Get();
        }

    private:
        void SharedCtor();
        void SharedDtor();
        void SetCachedSize(int size) const final;
        void InternalSwap(BuildMsg* other);

    private:
        friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
        static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName()
        {
            return "protobuf.BuildMsg";
        }

    protected:
        explicit BuildMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned = false);

    public:
        static const ClassData _class_data_;
        const ::PROTOBUF_NAMESPACE_ID::Message::ClassData* GetClassData() const final;

        ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

        // nested types ----------------------------------------------------

        // accessors -------------------------------------------------------

        enum : int
        {
            kShipIdFieldNumber = 1,
            kBuildingIdFieldNumber = 2,
            kBuildingTypeFieldNumber = 3,
            kShipTypeFieldNumber = 4,
        };
        // int64 ship_id = 1;
        void clear_ship_id();
        int64_t ship_id() const;
        void set_ship_id(int64_t value);

    private:
        int64_t _internal_ship_id() const;
        void _internal_set_ship_id(int64_t value);

    public:
        // int64 building_id = 2;
        void clear_building_id();
        int64_t building_id() const;
        void set_building_id(int64_t value);

    private:
        int64_t _internal_building_id() const;
        void _internal_set_building_id(int64_t value);

    public:
        // .protobuf.BuildingType building_type = 3;
        void clear_building_type();
        ::protobuf::BuildingType building_type() const;
        void set_building_type(::protobuf::BuildingType value);

    private:
        ::protobuf::BuildingType _internal_building_type() const;
        void _internal_set_building_type(::protobuf::BuildingType value);

    public:
        // .protobuf.ShipType ship_type = 4;
        void clear_ship_type();
        ::protobuf::ShipType ship_type() const;
        void set_ship_type(::protobuf::ShipType value);

    private:
        ::protobuf::ShipType _internal_ship_type() const;
        void _internal_set_ship_type(::protobuf::ShipType value);

    public:
        // @@protoc_insertion_point(class_scope:protobuf.BuildMsg)

    private:
        class _Internal;

        template<typename T>
        friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
        typedef void InternalArenaConstructable_;
        typedef void DestructorSkippable_;
        int64_t ship_id_;
        int64_t building_id_;
        int building_type_;
        int ship_type_;
        mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
        friend struct ::TableStruct_Message2Server_2eproto;
    };
    // ===================================================================

    // ===================================================================

#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
    // ShipMsg

    // int64 ship_id = 1;
    inline void ShipMsg::clear_ship_id()
    {
        ship_id_ = int64_t{0};
    }
    inline int64_t ShipMsg::_internal_ship_id() const
    {
        return ship_id_;
    }
    inline int64_t ShipMsg::ship_id() const
    {
        // @@protoc_insertion_point(field_get:protobuf.ShipMsg.ship_id)
        return _internal_ship_id();
    }
    inline void ShipMsg::_internal_set_ship_id(int64_t value)
    {
        ship_id_ = value;
    }
    inline void ShipMsg::set_ship_id(int64_t value)
    {
        _internal_set_ship_id(value);
        // @@protoc_insertion_point(field_set:protobuf.ShipMsg.ship_id)
    }

    // .protobuf.ShipType ship_type = 2;
    inline void ShipMsg::clear_ship_type()
    {
        ship_type_ = 0;
    }
    inline ::protobuf::ShipType ShipMsg::_internal_ship_type() const
    {
        return static_cast<::protobuf::ShipType>(ship_type_);
    }
    inline ::protobuf::ShipType ShipMsg::ship_type() const
    {
        // @@protoc_insertion_point(field_get:protobuf.ShipMsg.ship_type)
        return _internal_ship_type();
    }
    inline void ShipMsg::_internal_set_ship_type(::protobuf::ShipType value)
    {
        ship_type_ = value;
    }
    inline void ShipMsg::set_ship_type(::protobuf::ShipType value)
    {
        _internal_set_ship_type(value);
        // @@protoc_insertion_point(field_set:protobuf.ShipMsg.ship_type)
    }

    // -------------------------------------------------------------------

    // BuildingMsg

    // int64 building_id = 1;
    inline void BuildingMsg::clear_building_id()
    {
        building_id_ = int64_t{0};
    }
    inline int64_t BuildingMsg::_internal_building_id() const
    {
        return building_id_;
    }
    inline int64_t BuildingMsg::building_id() const
    {
        // @@protoc_insertion_point(field_get:protobuf.BuildingMsg.building_id)
        return _internal_building_id();
    }
    inline void BuildingMsg::_internal_set_building_id(int64_t value)
    {
        building_id_ = value;
    }
    inline void BuildingMsg::set_building_id(int64_t value)
    {
        _internal_set_building_id(value);
        // @@protoc_insertion_point(field_set:protobuf.BuildingMsg.building_id)
    }

    // .protobuf.BuildingType building_type = 2;
    inline void BuildingMsg::clear_building_type()
    {
        building_type_ = 0;
    }
    inline ::protobuf::BuildingType BuildingMsg::_internal_building_type() const
    {
        return static_cast<::protobuf::BuildingType>(building_type_);
    }
    inline ::protobuf::BuildingType BuildingMsg::building_type() const
    {
        // @@protoc_insertion_point(field_get:protobuf.BuildingMsg.building_type)
        return _internal_building_type();
    }
    inline void BuildingMsg::_internal_set_building_type(::protobuf::BuildingType value)
    {
        building_type_ = value;
    }
    inline void BuildingMsg::set_building_type(::protobuf::BuildingType value)
    {
        _internal_set_building_type(value);
        // @@protoc_insertion_point(field_set:protobuf.BuildingMsg.building_type)
    }

    // -------------------------------------------------------------------

    // HomeMsg

    // .protobuf.PlayerTeam team = 1;
    inline void HomeMsg::clear_team()
    {
        team_ = 0;
    }
    inline ::protobuf::PlayerTeam HomeMsg::_internal_team() const
    {
        return static_cast<::protobuf::PlayerTeam>(team_);
    }
    inline ::protobuf::PlayerTeam HomeMsg::team() const
    {
        // @@protoc_insertion_point(field_get:protobuf.HomeMsg.team)
        return _internal_team();
    }
    inline void HomeMsg::_internal_set_team(::protobuf::PlayerTeam value)
    {
        team_ = value;
    }
    inline void HomeMsg::set_team(::protobuf::PlayerTeam value)
    {
        _internal_set_team(value);
        // @@protoc_insertion_point(field_set:protobuf.HomeMsg.team)
    }

    // -------------------------------------------------------------------

    // CollectorMsg

    // int64 collector_id = 1;
    inline void CollectorMsg::clear_collector_id()
    {
        collector_id_ = int64_t{0};
    }
    inline int64_t CollectorMsg::_internal_collector_id() const
    {
        return collector_id_;
    }
    inline int64_t CollectorMsg::collector_id() const
    {
        // @@protoc_insertion_point(field_get:protobuf.CollectorMsg.collector_id)
        return _internal_collector_id();
    }
    inline void CollectorMsg::_internal_set_collector_id(int64_t value)
    {
        collector_id_ = value;
    }
    inline void CollectorMsg::set_collector_id(int64_t value)
    {
        _internal_set_collector_id(value);
        // @@protoc_insertion_point(field_set:protobuf.CollectorMsg.collector_id)
    }

    // .protobuf.CollectorType collector_type = 2;
    inline void CollectorMsg::clear_collector_type()
    {
        collector_type_ = 0;
    }
    inline ::protobuf::CollectorType CollectorMsg::_internal_collector_type() const
    {
        return static_cast<::protobuf::CollectorType>(collector_type_);
    }
    inline ::protobuf::CollectorType CollectorMsg::collector_type() const
    {
        // @@protoc_insertion_point(field_get:protobuf.CollectorMsg.collector_type)
        return _internal_collector_type();
    }
    inline void CollectorMsg::_internal_set_collector_type(::protobuf::CollectorType value)
    {
        collector_type_ = value;
    }
    inline void CollectorMsg::set_collector_type(::protobuf::CollectorType value)
    {
        _internal_set_collector_type(value);
        // @@protoc_insertion_point(field_set:protobuf.CollectorMsg.collector_type)
    }

    // -------------------------------------------------------------------

    // ArmorMsg

    // int64 armor_id = 1;
    inline void ArmorMsg::clear_armor_id()
    {
        armor_id_ = int64_t{0};
    }
    inline int64_t ArmorMsg::_internal_armor_id() const
    {
        return armor_id_;
    }
    inline int64_t ArmorMsg::armor_id() const
    {
        // @@protoc_insertion_point(field_get:protobuf.ArmorMsg.armor_id)
        return _internal_armor_id();
    }
    inline void ArmorMsg::_internal_set_armor_id(int64_t value)
    {
        armor_id_ = value;
    }
    inline void ArmorMsg::set_armor_id(int64_t value)
    {
        _internal_set_armor_id(value);
        // @@protoc_insertion_point(field_set:protobuf.ArmorMsg.armor_id)
    }

    // .protobuf.ArmorType armor_type = 2;
    inline void ArmorMsg::clear_armor_type()
    {
        armor_type_ = 0;
    }
    inline ::protobuf::ArmorType ArmorMsg::_internal_armor_type() const
    {
        return static_cast<::protobuf::ArmorType>(armor_type_);
    }
    inline ::protobuf::ArmorType ArmorMsg::armor_type() const
    {
        // @@protoc_insertion_point(field_get:protobuf.ArmorMsg.armor_type)
        return _internal_armor_type();
    }
    inline void ArmorMsg::_internal_set_armor_type(::protobuf::ArmorType value)
    {
        armor_type_ = value;
    }
    inline void ArmorMsg::set_armor_type(::protobuf::ArmorType value)
    {
        _internal_set_armor_type(value);
        // @@protoc_insertion_point(field_set:protobuf.ArmorMsg.armor_type)
    }

    // -------------------------------------------------------------------

    // ShieldMsg

    // int64 shield_id = 1;
    inline void ShieldMsg::clear_shield_id()
    {
        shield_id_ = int64_t{0};
    }
    inline int64_t ShieldMsg::_internal_shield_id() const
    {
        return shield_id_;
    }
    inline int64_t ShieldMsg::shield_id() const
    {
        // @@protoc_insertion_point(field_get:protobuf.ShieldMsg.shield_id)
        return _internal_shield_id();
    }
    inline void ShieldMsg::_internal_set_shield_id(int64_t value)
    {
        shield_id_ = value;
    }
    inline void ShieldMsg::set_shield_id(int64_t value)
    {
        _internal_set_shield_id(value);
        // @@protoc_insertion_point(field_set:protobuf.ShieldMsg.shield_id)
    }

    // .protobuf.ShieldType shield_type = 2;
    inline void ShieldMsg::clear_shield_type()
    {
        shield_type_ = 0;
    }
    inline ::protobuf::ShieldType ShieldMsg::_internal_shield_type() const
    {
        return static_cast<::protobuf::ShieldType>(shield_type_);
    }
    inline ::protobuf::ShieldType ShieldMsg::shield_type() const
    {
        // @@protoc_insertion_point(field_get:protobuf.ShieldMsg.shield_type)
        return _internal_shield_type();
    }
    inline void ShieldMsg::_internal_set_shield_type(::protobuf::ShieldType value)
    {
        shield_type_ = value;
    }
    inline void ShieldMsg::set_shield_type(::protobuf::ShieldType value)
    {
        _internal_set_shield_type(value);
        // @@protoc_insertion_point(field_set:protobuf.ShieldMsg.shield_type)
    }

    // -------------------------------------------------------------------

    // BuilderMsg

    // int64 builder_id = 1;
    inline void BuilderMsg::clear_builder_id()
    {
        builder_id_ = int64_t{0};
    }
    inline int64_t BuilderMsg::_internal_builder_id() const
    {
        return builder_id_;
    }
    inline int64_t BuilderMsg::builder_id() const
    {
        // @@protoc_insertion_point(field_get:protobuf.BuilderMsg.builder_id)
        return _internal_builder_id();
    }
    inline void BuilderMsg::_internal_set_builder_id(int64_t value)
    {
        builder_id_ = value;
    }
    inline void BuilderMsg::set_builder_id(int64_t value)
    {
        _internal_set_builder_id(value);
        // @@protoc_insertion_point(field_set:protobuf.BuilderMsg.builder_id)
    }

    // .protobuf.BuilderType builder_type = 2;
    inline void BuilderMsg::clear_builder_type()
    {
        builder_type_ = 0;
    }
    inline ::protobuf::BuilderType BuilderMsg::_internal_builder_type() const
    {
        return static_cast<::protobuf::BuilderType>(builder_type_);
    }
    inline ::protobuf::BuilderType BuilderMsg::builder_type() const
    {
        // @@protoc_insertion_point(field_get:protobuf.BuilderMsg.builder_type)
        return _internal_builder_type();
    }
    inline void BuilderMsg::_internal_set_builder_type(::protobuf::BuilderType value)
    {
        builder_type_ = value;
    }
    inline void BuilderMsg::set_builder_type(::protobuf::BuilderType value)
    {
        _internal_set_builder_type(value);
        // @@protoc_insertion_point(field_set:protobuf.BuilderMsg.builder_type)
    }

    // -------------------------------------------------------------------

    // BulleterMsg

    // int64 bullet_id = 1;
    inline void BulleterMsg::clear_bullet_id()
    {
        bullet_id_ = int64_t{0};
    }
    inline int64_t BulleterMsg::_internal_bullet_id() const
    {
        return bullet_id_;
    }
    inline int64_t BulleterMsg::bullet_id() const
    {
        // @@protoc_insertion_point(field_get:protobuf.BulleterMsg.bullet_id)
        return _internal_bullet_id();
    }
    inline void BulleterMsg::_internal_set_bullet_id(int64_t value)
    {
        bullet_id_ = value;
    }
    inline void BulleterMsg::set_bullet_id(int64_t value)
    {
        _internal_set_bullet_id(value);
        // @@protoc_insertion_point(field_set:protobuf.BulleterMsg.bullet_id)
    }

    // .protobuf.BulletType bullet_type = 2;
    inline void BulleterMsg::clear_bullet_type()
    {
        bullet_type_ = 0;
    }
    inline ::protobuf::BulletType BulleterMsg::_internal_bullet_type() const
    {
        return static_cast<::protobuf::BulletType>(bullet_type_);
    }
    inline ::protobuf::BulletType BulleterMsg::bullet_type() const
    {
        // @@protoc_insertion_point(field_get:protobuf.BulleterMsg.bullet_type)
        return _internal_bullet_type();
    }
    inline void BulleterMsg::_internal_set_bullet_type(::protobuf::BulletType value)
    {
        bullet_type_ = value;
    }
    inline void BulleterMsg::set_bullet_type(::protobuf::BulletType value)
    {
        _internal_set_bullet_type(value);
        // @@protoc_insertion_point(field_set:protobuf.BulleterMsg.bullet_type)
    }

    // -------------------------------------------------------------------

    // MoveMsg

    // int64 ship_id = 1;
    inline void MoveMsg::clear_ship_id()
    {
        ship_id_ = int64_t{0};
    }
    inline int64_t MoveMsg::_internal_ship_id() const
    {
        return ship_id_;
    }
    inline int64_t MoveMsg::ship_id() const
    {
        // @@protoc_insertion_point(field_get:protobuf.MoveMsg.ship_id)
        return _internal_ship_id();
    }
    inline void MoveMsg::_internal_set_ship_id(int64_t value)
    {
        ship_id_ = value;
    }
    inline void MoveMsg::set_ship_id(int64_t value)
    {
        _internal_set_ship_id(value);
        // @@protoc_insertion_point(field_set:protobuf.MoveMsg.ship_id)
    }

    // double angle = 2;
    inline void MoveMsg::clear_angle()
    {
        angle_ = 0;
    }
    inline double MoveMsg::_internal_angle() const
    {
        return angle_;
    }
    inline double MoveMsg::angle() const
    {
        // @@protoc_insertion_point(field_get:protobuf.MoveMsg.angle)
        return _internal_angle();
    }
    inline void MoveMsg::_internal_set_angle(double value)
    {
        angle_ = value;
    }
    inline void MoveMsg::set_angle(double value)
    {
        _internal_set_angle(value);
        // @@protoc_insertion_point(field_set:protobuf.MoveMsg.angle)
    }

    // int64 time_in_milliseconds = 3;
    inline void MoveMsg::clear_time_in_milliseconds()
    {
        time_in_milliseconds_ = int64_t{0};
    }
    inline int64_t MoveMsg::_internal_time_in_milliseconds() const
    {
        return time_in_milliseconds_;
    }
    inline int64_t MoveMsg::time_in_milliseconds() const
    {
        // @@protoc_insertion_point(field_get:protobuf.MoveMsg.time_in_milliseconds)
        return _internal_time_in_milliseconds();
    }
    inline void MoveMsg::_internal_set_time_in_milliseconds(int64_t value)
    {
        time_in_milliseconds_ = value;
    }
    inline void MoveMsg::set_time_in_milliseconds(int64_t value)
    {
        _internal_set_time_in_milliseconds(value);
        // @@protoc_insertion_point(field_set:protobuf.MoveMsg.time_in_milliseconds)
    }

    // -------------------------------------------------------------------

    // SendMsg

    // int64 player_id = 1;
    inline void SendMsg::clear_player_id()
    {
        player_id_ = int64_t{0};
    }
    inline int64_t SendMsg::_internal_player_id() const
    {
        return player_id_;
    }
    inline int64_t SendMsg::player_id() const
    {
        // @@protoc_insertion_point(field_get:protobuf.SendMsg.player_id)
        return _internal_player_id();
    }
    inline void SendMsg::_internal_set_player_id(int64_t value)
    {
        player_id_ = value;
    }
    inline void SendMsg::set_player_id(int64_t value)
    {
        _internal_set_player_id(value);
        // @@protoc_insertion_point(field_set:protobuf.SendMsg.player_id)
    }

    // int64 to_player_id = 2;
    inline void SendMsg::clear_to_player_id()
    {
        to_player_id_ = int64_t{0};
    }
    inline int64_t SendMsg::_internal_to_player_id() const
    {
        return to_player_id_;
    }
    inline int64_t SendMsg::to_player_id() const
    {
        // @@protoc_insertion_point(field_get:protobuf.SendMsg.to_player_id)
        return _internal_to_player_id();
    }
    inline void SendMsg::_internal_set_to_player_id(int64_t value)
    {
        to_player_id_ = value;
    }
    inline void SendMsg::set_to_player_id(int64_t value)
    {
        _internal_set_to_player_id(value);
        // @@protoc_insertion_point(field_set:protobuf.SendMsg.to_player_id)
    }

    // string text_message = 3;
    inline bool SendMsg::_internal_has_text_message() const
    {
        return message_case() == kTextMessage;
    }
    inline bool SendMsg::has_text_message() const
    {
        return _internal_has_text_message();
    }
    inline void SendMsg::set_has_text_message()
    {
        _oneof_case_[0] = kTextMessage;
    }
    inline void SendMsg::clear_text_message()
    {
        if (_internal_has_text_message())
        {
            message_.text_message_.Destroy();
            clear_has_message();
        }
    }
    inline const std::string& SendMsg::text_message() const
    {
        // @@protoc_insertion_point(field_get:protobuf.SendMsg.text_message)
        return _internal_text_message();
    }
    template<typename ArgT0, typename... ArgT>
    inline void SendMsg::set_text_message(ArgT0&& arg0, ArgT... args)
    {
        if (!_internal_has_text_message())
        {
            clear_message();
            set_has_text_message();
            message_.text_message_.InitDefault();
        }
        message_.text_message_.Set(static_cast<ArgT0&&>(arg0), args..., GetArenaForAllocation());
        // @@protoc_insertion_point(field_set:protobuf.SendMsg.text_message)
    }
    inline std::string* SendMsg::mutable_text_message()
    {
        std::string* _s = _internal_mutable_text_message();
        // @@protoc_insertion_point(field_mutable:protobuf.SendMsg.text_message)
        return _s;
    }
    inline const std::string& SendMsg::_internal_text_message() const
    {
        if (_internal_has_text_message())
        {
            return message_.text_message_.Get();
        }
        return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
    }
    inline void SendMsg::_internal_set_text_message(const std::string& value)
    {
        if (!_internal_has_text_message())
        {
            clear_message();
            set_has_text_message();
            message_.text_message_.InitDefault();
        }
        message_.text_message_.Set(value, GetArenaForAllocation());
    }
    inline std::string* SendMsg::_internal_mutable_text_message()
    {
        if (!_internal_has_text_message())
        {
            clear_message();
            set_has_text_message();
            message_.text_message_.InitDefault();
        }
        return message_.text_message_.Mutable(GetArenaForAllocation());
    }
    inline std::string* SendMsg::release_text_message()
    {
        // @@protoc_insertion_point(field_release:protobuf.SendMsg.text_message)
        if (_internal_has_text_message())
        {
            clear_has_message();
            return message_.text_message_.Release();
        }
        else
        {
            return nullptr;
        }
    }
    inline void SendMsg::set_allocated_text_message(std::string* text_message)
    {
        if (has_message())
        {
            clear_message();
        }
        if (text_message != nullptr)
        {
            set_has_text_message();
            message_.text_message_.InitAllocated(text_message, GetArenaForAllocation());
        }
        // @@protoc_insertion_point(field_set_allocated:protobuf.SendMsg.text_message)
    }

    // bytes binary_message = 4;
    inline bool SendMsg::_internal_has_binary_message() const
    {
        return message_case() == kBinaryMessage;
    }
    inline bool SendMsg::has_binary_message() const
    {
        return _internal_has_binary_message();
    }
    inline void SendMsg::set_has_binary_message()
    {
        _oneof_case_[0] = kBinaryMessage;
    }
    inline void SendMsg::clear_binary_message()
    {
        if (_internal_has_binary_message())
        {
            message_.binary_message_.Destroy();
            clear_has_message();
        }
    }
    inline const std::string& SendMsg::binary_message() const
    {
        // @@protoc_insertion_point(field_get:protobuf.SendMsg.binary_message)
        return _internal_binary_message();
    }
    template<typename ArgT0, typename... ArgT>
    inline void SendMsg::set_binary_message(ArgT0&& arg0, ArgT... args)
    {
        if (!_internal_has_binary_message())
        {
            clear_message();
            set_has_binary_message();
            message_.binary_message_.InitDefault();
        }
        message_.binary_message_.SetBytes(static_cast<ArgT0&&>(arg0), args..., GetArenaForAllocation());
        // @@protoc_insertion_point(field_set:protobuf.SendMsg.binary_message)
    }
    inline std::string* SendMsg::mutable_binary_message()
    {
        std::string* _s = _internal_mutable_binary_message();
        // @@protoc_insertion_point(field_mutable:protobuf.SendMsg.binary_message)
        return _s;
    }
    inline const std::string& SendMsg::_internal_binary_message() const
    {
        if (_internal_has_binary_message())
        {
            return message_.binary_message_.Get();
        }
        return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
    }
    inline void SendMsg::_internal_set_binary_message(const std::string& value)
    {
        if (!_internal_has_binary_message())
        {
            clear_message();
            set_has_binary_message();
            message_.binary_message_.InitDefault();
        }
        message_.binary_message_.Set(value, GetArenaForAllocation());
    }
    inline std::string* SendMsg::_internal_mutable_binary_message()
    {
        if (!_internal_has_binary_message())
        {
            clear_message();
            set_has_binary_message();
            message_.binary_message_.InitDefault();
        }
        return message_.binary_message_.Mutable(GetArenaForAllocation());
    }
    inline std::string* SendMsg::release_binary_message()
    {
        // @@protoc_insertion_point(field_release:protobuf.SendMsg.binary_message)
        if (_internal_has_binary_message())
        {
            clear_has_message();
            return message_.binary_message_.Release();
        }
        else
        {
            return nullptr;
        }
    }
    inline void SendMsg::set_allocated_binary_message(std::string* binary_message)
    {
        if (has_message())
        {
            clear_message();
        }
        if (binary_message != nullptr)
        {
            set_has_binary_message();
            message_.binary_message_.InitAllocated(binary_message, GetArenaForAllocation());
        }
        // @@protoc_insertion_point(field_set_allocated:protobuf.SendMsg.binary_message)
    }

    inline bool SendMsg::has_message() const
    {
        return message_case() != MESSAGE_NOT_SET;
    }
    inline void SendMsg::clear_has_message()
    {
        _oneof_case_[0] = MESSAGE_NOT_SET;
    }
    inline SendMsg::MessageCase SendMsg::message_case() const
    {
        return SendMsg::MessageCase(_oneof_case_[0]);
    }
    // -------------------------------------------------------------------

    // AttackMsg

    // int64 ship_id = 1;
    inline void AttackMsg::clear_ship_id()
    {
        ship_id_ = int64_t{0};
    }
    inline int64_t AttackMsg::_internal_ship_id() const
    {
        return ship_id_;
    }
    inline int64_t AttackMsg::ship_id() const
    {
        // @@protoc_insertion_point(field_get:protobuf.AttackMsg.ship_id)
        return _internal_ship_id();
    }
    inline void AttackMsg::_internal_set_ship_id(int64_t value)
    {
        ship_id_ = value;
    }
    inline void AttackMsg::set_ship_id(int64_t value)
    {
        _internal_set_ship_id(value);
        // @@protoc_insertion_point(field_set:protobuf.AttackMsg.ship_id)
    }

    // double angle = 2;
    inline void AttackMsg::clear_angle()
    {
        angle_ = 0;
    }
    inline double AttackMsg::_internal_angle() const
    {
        return angle_;
    }
    inline double AttackMsg::angle() const
    {
        // @@protoc_insertion_point(field_get:protobuf.AttackMsg.angle)
        return _internal_angle();
    }
    inline void AttackMsg::_internal_set_angle(double value)
    {
        angle_ = value;
    }
    inline void AttackMsg::set_angle(double value)
    {
        _internal_set_angle(value);
        // @@protoc_insertion_point(field_set:protobuf.AttackMsg.angle)
    }

    // -------------------------------------------------------------------

    // IDMsg

    // int64 ship_id = 1;
    inline void IDMsg::clear_ship_id()
    {
        ship_id_ = int64_t{0};
    }
    inline int64_t IDMsg::_internal_ship_id() const
    {
        return ship_id_;
    }
    inline int64_t IDMsg::ship_id() const
    {
        // @@protoc_insertion_point(field_get:protobuf.IDMsg.ship_id)
        return _internal_ship_id();
    }
    inline void IDMsg::_internal_set_ship_id(int64_t value)
    {
        ship_id_ = value;
    }
    inline void IDMsg::set_ship_id(int64_t value)
    {
        _internal_set_ship_id(value);
        // @@protoc_insertion_point(field_set:protobuf.IDMsg.ship_id)
    }

    // -------------------------------------------------------------------

    // RecoverMsg

    // int64 ship_id = 1;
    inline void RecoverMsg::clear_ship_id()
    {
        ship_id_ = int64_t{0};
    }
    inline int64_t RecoverMsg::_internal_ship_id() const
    {
        return ship_id_;
    }
    inline int64_t RecoverMsg::ship_id() const
    {
        // @@protoc_insertion_point(field_get:protobuf.RecoverMsg.ship_id)
        return _internal_ship_id();
    }
    inline void RecoverMsg::_internal_set_ship_id(int64_t value)
    {
        ship_id_ = value;
    }
    inline void RecoverMsg::set_ship_id(int64_t value)
    {
        _internal_set_ship_id(value);
        // @@protoc_insertion_point(field_set:protobuf.RecoverMsg.ship_id)
    }

    // -------------------------------------------------------------------

    // BuildMsg

    // int64 ship_id = 1;
    inline void BuildMsg::clear_ship_id()
    {
        ship_id_ = int64_t{0};
    }
    inline int64_t BuildMsg::_internal_ship_id() const
    {
        return ship_id_;
    }
    inline int64_t BuildMsg::ship_id() const
    {
        // @@protoc_insertion_point(field_get:protobuf.BuildMsg.ship_id)
        return _internal_ship_id();
    }
    inline void BuildMsg::_internal_set_ship_id(int64_t value)
    {
        ship_id_ = value;
    }
    inline void BuildMsg::set_ship_id(int64_t value)
    {
        _internal_set_ship_id(value);
        // @@protoc_insertion_point(field_set:protobuf.BuildMsg.ship_id)
    }

    // int64 building_id = 2;
    inline void BuildMsg::clear_building_id()
    {
        building_id_ = int64_t{0};
    }
    inline int64_t BuildMsg::_internal_building_id() const
    {
        return building_id_;
    }
    inline int64_t BuildMsg::building_id() const
    {
        // @@protoc_insertion_point(field_get:protobuf.BuildMsg.building_id)
        return _internal_building_id();
    }
    inline void BuildMsg::_internal_set_building_id(int64_t value)
    {
        building_id_ = value;
    }
    inline void BuildMsg::set_building_id(int64_t value)
    {
        _internal_set_building_id(value);
        // @@protoc_insertion_point(field_set:protobuf.BuildMsg.building_id)
    }

    // .protobuf.BuildingType building_type = 3;
    inline void BuildMsg::clear_building_type()
    {
        building_type_ = 0;
    }
    inline ::protobuf::BuildingType BuildMsg::_internal_building_type() const
    {
        return static_cast<::protobuf::BuildingType>(building_type_);
    }
    inline ::protobuf::BuildingType BuildMsg::building_type() const
    {
        // @@protoc_insertion_point(field_get:protobuf.BuildMsg.building_type)
        return _internal_building_type();
    }
    inline void BuildMsg::_internal_set_building_type(::protobuf::BuildingType value)
    {
        building_type_ = value;
    }
    inline void BuildMsg::set_building_type(::protobuf::BuildingType value)
    {
        _internal_set_building_type(value);
        // @@protoc_insertion_point(field_set:protobuf.BuildMsg.building_type)
    }

    // .protobuf.ShipType ship_type = 4;
    inline void BuildMsg::clear_ship_type()
    {
        ship_type_ = 0;
    }
    inline ::protobuf::ShipType BuildMsg::_internal_ship_type() const
    {
        return static_cast<::protobuf::ShipType>(ship_type_);
    }
    inline ::protobuf::ShipType BuildMsg::ship_type() const
    {
        // @@protoc_insertion_point(field_get:protobuf.BuildMsg.ship_type)
        return _internal_ship_type();
    }
    inline void BuildMsg::_internal_set_ship_type(::protobuf::ShipType value)
    {
        ship_type_ = value;
    }
    inline void BuildMsg::set_ship_type(::protobuf::ShipType value)
    {
        _internal_set_ship_type(value);
        // @@protoc_insertion_point(field_set:protobuf.BuildMsg.ship_type)
    }

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__
    // -------------------------------------------------------------------

    // -------------------------------------------------------------------

    // -------------------------------------------------------------------

    // -------------------------------------------------------------------

    // -------------------------------------------------------------------

    // -------------------------------------------------------------------

    // -------------------------------------------------------------------

    // -------------------------------------------------------------------

    // -------------------------------------------------------------------

    // -------------------------------------------------------------------

    // -------------------------------------------------------------------

    // -------------------------------------------------------------------

    // -------------------------------------------------------------------

    // @@protoc_insertion_point(namespace_scope)

}  // namespace protobuf

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Message2Server_2eproto
