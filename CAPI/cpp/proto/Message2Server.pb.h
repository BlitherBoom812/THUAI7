// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Message2Server.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Message2Server_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Message2Server_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>   // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "MessageType.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Message2Server_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal
{
    class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Message2Server_2eproto
{
    static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Message2Server_2eproto;
namespace protobuf
{
    class AttackMsg;
    struct AttackMsgDefaultTypeInternal;
    extern AttackMsgDefaultTypeInternal _AttackMsg_default_instance_;
    class BuildShipMsg;
    struct BuildShipMsgDefaultTypeInternal;
    extern BuildShipMsgDefaultTypeInternal _BuildShipMsg_default_instance_;
    class ConstructMsg;
    struct ConstructMsgDefaultTypeInternal;
    extern ConstructMsgDefaultTypeInternal _ConstructMsg_default_instance_;
    class IDMsg;
    struct IDMsgDefaultTypeInternal;
    extern IDMsgDefaultTypeInternal _IDMsg_default_instance_;
    class InstallMsg;
    struct InstallMsgDefaultTypeInternal;
    extern InstallMsgDefaultTypeInternal _InstallMsg_default_instance_;
    class MoveMsg;
    struct MoveMsgDefaultTypeInternal;
    extern MoveMsgDefaultTypeInternal _MoveMsg_default_instance_;
    class PlayerMsg;
    struct PlayerMsgDefaultTypeInternal;
    extern PlayerMsgDefaultTypeInternal _PlayerMsg_default_instance_;
    class SendMsg;
    struct SendMsgDefaultTypeInternal;
    extern SendMsgDefaultTypeInternal _SendMsg_default_instance_;
}  // namespace protobuf
PROTOBUF_NAMESPACE_OPEN
template<>
::protobuf::AttackMsg* Arena::CreateMaybeMessage<::protobuf::AttackMsg>(Arena*);
template<>
::protobuf::BuildShipMsg* Arena::CreateMaybeMessage<::protobuf::BuildShipMsg>(Arena*);
template<>
::protobuf::ConstructMsg* Arena::CreateMaybeMessage<::protobuf::ConstructMsg>(Arena*);
template<>
::protobuf::IDMsg* Arena::CreateMaybeMessage<::protobuf::IDMsg>(Arena*);
template<>
::protobuf::InstallMsg* Arena::CreateMaybeMessage<::protobuf::InstallMsg>(Arena*);
template<>
::protobuf::MoveMsg* Arena::CreateMaybeMessage<::protobuf::MoveMsg>(Arena*);
template<>
::protobuf::PlayerMsg* Arena::CreateMaybeMessage<::protobuf::PlayerMsg>(Arena*);
template<>
::protobuf::SendMsg* Arena::CreateMaybeMessage<::protobuf::SendMsg>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace protobuf
{

    // ===================================================================

    class IDMsg final :
        public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protobuf.IDMsg) */
    {
    public:
        inline IDMsg() :
            IDMsg(nullptr)
        {
        }
        ~IDMsg() override;
        explicit PROTOBUF_CONSTEXPR IDMsg(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

        IDMsg(const IDMsg& from);
        IDMsg(IDMsg&& from) noexcept
            :
            IDMsg()
        {
            *this = ::std::move(from);
        }

        inline IDMsg& operator=(const IDMsg& from)
        {
            CopyFrom(from);
            return *this;
        }
        inline IDMsg& operator=(IDMsg&& from) noexcept
        {
            if (this == &from)
                return *this;
            if (GetOwningArena() == from.GetOwningArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
                && GetOwningArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
            )
            {
                InternalSwap(&from);
            }
            else
            {
                CopyFrom(from);
            }
            return *this;
        }

        static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor()
        {
            return GetDescriptor();
        }
        static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor()
        {
            return default_instance().GetMetadata().descriptor;
        }
        static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection()
        {
            return default_instance().GetMetadata().reflection;
        }
        static const IDMsg& default_instance()
        {
            return *internal_default_instance();
        }
        static inline const IDMsg* internal_default_instance()
        {
            return reinterpret_cast<const IDMsg*>(
                &_IDMsg_default_instance_
            );
        }
        static constexpr int kIndexInFileMessages =
            0;

        friend void swap(IDMsg& a, IDMsg& b)
        {
            a.Swap(&b);
        }
        inline void Swap(IDMsg* other)
        {
            if (other == this)
                return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
            if (GetOwningArena() != nullptr &&
                GetOwningArena() == other->GetOwningArena())
            {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
            if (GetOwningArena() == other->GetOwningArena())
            {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
                InternalSwap(other);
            }
            else
            {
                ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
            }
        }
        void UnsafeArenaSwap(IDMsg* other)
        {
            if (other == this)
                return;
            GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
            InternalSwap(other);
        }

        // implements Message ----------------------------------------------

        IDMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final
        {
            return CreateMaybeMessage<IDMsg>(arena);
        }
        using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
        void CopyFrom(const IDMsg& from);
        using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
        void MergeFrom(const IDMsg& from);

    private:
        static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);

    public:
        PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
        bool IsInitialized() const final;

        size_t ByteSizeLong() const final;
        const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
        uint8_t* _InternalSerialize(
            uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream
        ) const final;
        int GetCachedSize() const final
        {
            return _cached_size_.Get();
        }

    private:
        void SharedCtor();
        void SharedDtor();
        void SetCachedSize(int size) const final;
        void InternalSwap(IDMsg* other);

    private:
        friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
        static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName()
        {
            return "protobuf.IDMsg";
        }

    protected:
        explicit IDMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned = false);

    public:
        static const ClassData _class_data_;
        const ::PROTOBUF_NAMESPACE_ID::Message::ClassData* GetClassData() const final;

        ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

        // nested types ----------------------------------------------------

        // accessors -------------------------------------------------------

        enum : int
        {
            kPlayerIdFieldNumber = 1,
            kTeamIdFieldNumber = 2,
        };
        // int64 player_id = 1;
        void clear_player_id();
        int64_t player_id() const;
        void set_player_id(int64_t value);

    private:
        int64_t _internal_player_id() const;
        void _internal_set_player_id(int64_t value);

    public:
        // int64 team_id = 2;
        void clear_team_id();
        int64_t team_id() const;
        void set_team_id(int64_t value);

    private:
        int64_t _internal_team_id() const;
        void _internal_set_team_id(int64_t value);

    public:
        // @@protoc_insertion_point(class_scope:protobuf.IDMsg)

    private:
        class _Internal;

        template<typename T>
        friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
        typedef void InternalArenaConstructable_;
        typedef void DestructorSkippable_;
        int64_t player_id_;
        int64_t team_id_;
        mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
        friend struct ::TableStruct_Message2Server_2eproto;
    };
    // -------------------------------------------------------------------

    class PlayerMsg final :
        public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protobuf.PlayerMsg) */
    {
    public:
        inline PlayerMsg() :
            PlayerMsg(nullptr)
        {
        }
        ~PlayerMsg() override;
        explicit PROTOBUF_CONSTEXPR PlayerMsg(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

        PlayerMsg(const PlayerMsg& from);
        PlayerMsg(PlayerMsg&& from) noexcept
            :
            PlayerMsg()
        {
            *this = ::std::move(from);
        }

        inline PlayerMsg& operator=(const PlayerMsg& from)
        {
            CopyFrom(from);
            return *this;
        }
        inline PlayerMsg& operator=(PlayerMsg&& from) noexcept
        {
            if (this == &from)
                return *this;
            if (GetOwningArena() == from.GetOwningArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
                && GetOwningArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
            )
            {
                InternalSwap(&from);
            }
            else
            {
                CopyFrom(from);
            }
            return *this;
        }

        static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor()
        {
            return GetDescriptor();
        }
        static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor()
        {
            return default_instance().GetMetadata().descriptor;
        }
        static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection()
        {
            return default_instance().GetMetadata().reflection;
        }
        static const PlayerMsg& default_instance()
        {
            return *internal_default_instance();
        }
        static inline const PlayerMsg* internal_default_instance()
        {
            return reinterpret_cast<const PlayerMsg*>(
                &_PlayerMsg_default_instance_
            );
        }
        static constexpr int kIndexInFileMessages =
            1;

        friend void swap(PlayerMsg& a, PlayerMsg& b)
        {
            a.Swap(&b);
        }
        inline void Swap(PlayerMsg* other)
        {
            if (other == this)
                return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
            if (GetOwningArena() != nullptr &&
                GetOwningArena() == other->GetOwningArena())
            {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
            if (GetOwningArena() == other->GetOwningArena())
            {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
                InternalSwap(other);
            }
            else
            {
                ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
            }
        }
        void UnsafeArenaSwap(PlayerMsg* other)
        {
            if (other == this)
                return;
            GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
            InternalSwap(other);
        }

        // implements Message ----------------------------------------------

        PlayerMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final
        {
            return CreateMaybeMessage<PlayerMsg>(arena);
        }
        using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
        void CopyFrom(const PlayerMsg& from);
        using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
        void MergeFrom(const PlayerMsg& from);

    private:
        static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);

    public:
        PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
        bool IsInitialized() const final;

        size_t ByteSizeLong() const final;
        const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
        uint8_t* _InternalSerialize(
            uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream
        ) const final;
        int GetCachedSize() const final
        {
            return _cached_size_.Get();
        }

    private:
        void SharedCtor();
        void SharedDtor();
        void SetCachedSize(int size) const final;
        void InternalSwap(PlayerMsg* other);

    private:
        friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
        static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName()
        {
            return "protobuf.PlayerMsg";
        }

    protected:
        explicit PlayerMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned = false);

    public:
        static const ClassData _class_data_;
        const ::PROTOBUF_NAMESPACE_ID::Message::ClassData* GetClassData() const final;

        ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

        // nested types ----------------------------------------------------

        // accessors -------------------------------------------------------

        enum : int
        {
            kPlayerIdFieldNumber = 1,
            kTeamIdFieldNumber = 2,
            kShipTypeFieldNumber = 3,
            kXFieldNumber = 4,
            kYFieldNumber = 5,
        };
        // int64 player_id = 1;
        void clear_player_id();
        int64_t player_id() const;
        void set_player_id(int64_t value);

    private:
        int64_t _internal_player_id() const;
        void _internal_set_player_id(int64_t value);

    public:
        // int64 team_id = 2;
        void clear_team_id();
        int64_t team_id() const;
        void set_team_id(int64_t value);

    private:
        int64_t _internal_team_id() const;
        void _internal_set_team_id(int64_t value);

    public:
        // .protobuf.ShipType ship_type = 3;
        void clear_ship_type();
        ::protobuf::ShipType ship_type() const;
        void set_ship_type(::protobuf::ShipType value);

    private:
        ::protobuf::ShipType _internal_ship_type() const;
        void _internal_set_ship_type(::protobuf::ShipType value);

    public:
        // int32 x = 4;
        void clear_x();
        int32_t x() const;
        void set_x(int32_t value);

    private:
        int32_t _internal_x() const;
        void _internal_set_x(int32_t value);

    public:
        // int32 y = 5;
        void clear_y();
        int32_t y() const;
        void set_y(int32_t value);

    private:
        int32_t _internal_y() const;
        void _internal_set_y(int32_t value);

    public:
        // @@protoc_insertion_point(class_scope:protobuf.PlayerMsg)

    private:
        class _Internal;

        template<typename T>
        friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
        typedef void InternalArenaConstructable_;
        typedef void DestructorSkippable_;
        int64_t player_id_;
        int64_t team_id_;
        int ship_type_;
        int32_t x_;
        int32_t y_;
        mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
        friend struct ::TableStruct_Message2Server_2eproto;
    };
    // -------------------------------------------------------------------

    class MoveMsg final :
        public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protobuf.MoveMsg) */
    {
    public:
        inline MoveMsg() :
            MoveMsg(nullptr)
        {
        }
        ~MoveMsg() override;
        explicit PROTOBUF_CONSTEXPR MoveMsg(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

        MoveMsg(const MoveMsg& from);
        MoveMsg(MoveMsg&& from) noexcept
            :
            MoveMsg()
        {
            *this = ::std::move(from);
        }

        inline MoveMsg& operator=(const MoveMsg& from)
        {
            CopyFrom(from);
            return *this;
        }
        inline MoveMsg& operator=(MoveMsg&& from) noexcept
        {
            if (this == &from)
                return *this;
            if (GetOwningArena() == from.GetOwningArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
                && GetOwningArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
            )
            {
                InternalSwap(&from);
            }
            else
            {
                CopyFrom(from);
            }
            return *this;
        }

        static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor()
        {
            return GetDescriptor();
        }
        static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor()
        {
            return default_instance().GetMetadata().descriptor;
        }
        static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection()
        {
            return default_instance().GetMetadata().reflection;
        }
        static const MoveMsg& default_instance()
        {
            return *internal_default_instance();
        }
        static inline const MoveMsg* internal_default_instance()
        {
            return reinterpret_cast<const MoveMsg*>(
                &_MoveMsg_default_instance_
            );
        }
        static constexpr int kIndexInFileMessages =
            2;

        friend void swap(MoveMsg& a, MoveMsg& b)
        {
            a.Swap(&b);
        }
        inline void Swap(MoveMsg* other)
        {
            if (other == this)
                return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
            if (GetOwningArena() != nullptr &&
                GetOwningArena() == other->GetOwningArena())
            {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
            if (GetOwningArena() == other->GetOwningArena())
            {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
                InternalSwap(other);
            }
            else
            {
                ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
            }
        }
        void UnsafeArenaSwap(MoveMsg* other)
        {
            if (other == this)
                return;
            GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
            InternalSwap(other);
        }

        // implements Message ----------------------------------------------

        MoveMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final
        {
            return CreateMaybeMessage<MoveMsg>(arena);
        }
        using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
        void CopyFrom(const MoveMsg& from);
        using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
        void MergeFrom(const MoveMsg& from);

    private:
        static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);

    public:
        PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
        bool IsInitialized() const final;

        size_t ByteSizeLong() const final;
        const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
        uint8_t* _InternalSerialize(
            uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream
        ) const final;
        int GetCachedSize() const final
        {
            return _cached_size_.Get();
        }

    private:
        void SharedCtor();
        void SharedDtor();
        void SetCachedSize(int size) const final;
        void InternalSwap(MoveMsg* other);

    private:
        friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
        static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName()
        {
            return "protobuf.MoveMsg";
        }

    protected:
        explicit MoveMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned = false);

    public:
        static const ClassData _class_data_;
        const ::PROTOBUF_NAMESPACE_ID::Message::ClassData* GetClassData() const final;

        ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

        // nested types ----------------------------------------------------

        // accessors -------------------------------------------------------

        enum : int
        {
            kPlayerIdFieldNumber = 1,
            kAngleFieldNumber = 2,
            kTimeInMillisecondsFieldNumber = 3,
            kTeamIdFieldNumber = 4,
        };
        // int64 player_id = 1;
        void clear_player_id();
        int64_t player_id() const;
        void set_player_id(int64_t value);

    private:
        int64_t _internal_player_id() const;
        void _internal_set_player_id(int64_t value);

    public:
        // double angle = 2;
        void clear_angle();
        double angle() const;
        void set_angle(double value);

    private:
        double _internal_angle() const;
        void _internal_set_angle(double value);

    public:
        // int64 time_in_milliseconds = 3;
        void clear_time_in_milliseconds();
        int64_t time_in_milliseconds() const;
        void set_time_in_milliseconds(int64_t value);

    private:
        int64_t _internal_time_in_milliseconds() const;
        void _internal_set_time_in_milliseconds(int64_t value);

    public:
        // int64 team_id = 4;
        void clear_team_id();
        int64_t team_id() const;
        void set_team_id(int64_t value);

    private:
        int64_t _internal_team_id() const;
        void _internal_set_team_id(int64_t value);

    public:
        // @@protoc_insertion_point(class_scope:protobuf.MoveMsg)

    private:
        class _Internal;

        template<typename T>
        friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
        typedef void InternalArenaConstructable_;
        typedef void DestructorSkippable_;
        int64_t player_id_;
        double angle_;
        int64_t time_in_milliseconds_;
        int64_t team_id_;
        mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
        friend struct ::TableStruct_Message2Server_2eproto;
    };
    // -------------------------------------------------------------------

    class SendMsg final :
        public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protobuf.SendMsg) */
    {
    public:
        inline SendMsg() :
            SendMsg(nullptr)
        {
        }
        ~SendMsg() override;
        explicit PROTOBUF_CONSTEXPR SendMsg(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

        SendMsg(const SendMsg& from);
        SendMsg(SendMsg&& from) noexcept
            :
            SendMsg()
        {
            *this = ::std::move(from);
        }

        inline SendMsg& operator=(const SendMsg& from)
        {
            CopyFrom(from);
            return *this;
        }
        inline SendMsg& operator=(SendMsg&& from) noexcept
        {
            if (this == &from)
                return *this;
            if (GetOwningArena() == from.GetOwningArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
                && GetOwningArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
            )
            {
                InternalSwap(&from);
            }
            else
            {
                CopyFrom(from);
            }
            return *this;
        }

        static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor()
        {
            return GetDescriptor();
        }
        static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor()
        {
            return default_instance().GetMetadata().descriptor;
        }
        static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection()
        {
            return default_instance().GetMetadata().reflection;
        }
        static const SendMsg& default_instance()
        {
            return *internal_default_instance();
        }
        enum MessageCase
        {
            kTextMessage = 3,
            kBinaryMessage = 4,
            MESSAGE_NOT_SET = 0,
        };

        static inline const SendMsg* internal_default_instance()
        {
            return reinterpret_cast<const SendMsg*>(
                &_SendMsg_default_instance_
            );
        }
        static constexpr int kIndexInFileMessages =
            3;

        friend void swap(SendMsg& a, SendMsg& b)
        {
            a.Swap(&b);
        }
        inline void Swap(SendMsg* other)
        {
            if (other == this)
                return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
            if (GetOwningArena() != nullptr &&
                GetOwningArena() == other->GetOwningArena())
            {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
            if (GetOwningArena() == other->GetOwningArena())
            {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
                InternalSwap(other);
            }
            else
            {
                ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
            }
        }
        void UnsafeArenaSwap(SendMsg* other)
        {
            if (other == this)
                return;
            GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
            InternalSwap(other);
        }

        // implements Message ----------------------------------------------

        SendMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final
        {
            return CreateMaybeMessage<SendMsg>(arena);
        }
        using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
        void CopyFrom(const SendMsg& from);
        using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
        void MergeFrom(const SendMsg& from);

    private:
        static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);

    public:
        PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
        bool IsInitialized() const final;

        size_t ByteSizeLong() const final;
        const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
        uint8_t* _InternalSerialize(
            uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream
        ) const final;
        int GetCachedSize() const final
        {
            return _cached_size_.Get();
        }

    private:
        void SharedCtor();
        void SharedDtor();
        void SetCachedSize(int size) const final;
        void InternalSwap(SendMsg* other);

    private:
        friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
        static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName()
        {
            return "protobuf.SendMsg";
        }

    protected:
        explicit SendMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned = false);

    public:
        static const ClassData _class_data_;
        const ::PROTOBUF_NAMESPACE_ID::Message::ClassData* GetClassData() const final;

        ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

        // nested types ----------------------------------------------------

        // accessors -------------------------------------------------------

        enum : int
        {
            kPlayerIdFieldNumber = 1,
            kToPlayerIdFieldNumber = 2,
            kTeamIdFieldNumber = 5,
            kTextMessageFieldNumber = 3,
            kBinaryMessageFieldNumber = 4,
        };
        // int64 player_id = 1;
        void clear_player_id();
        int64_t player_id() const;
        void set_player_id(int64_t value);

    private:
        int64_t _internal_player_id() const;
        void _internal_set_player_id(int64_t value);

    public:
        // int64 to_player_id = 2;
        void clear_to_player_id();
        int64_t to_player_id() const;
        void set_to_player_id(int64_t value);

    private:
        int64_t _internal_to_player_id() const;
        void _internal_set_to_player_id(int64_t value);

    public:
        // int64 team_id = 5;
        void clear_team_id();
        int64_t team_id() const;
        void set_team_id(int64_t value);

    private:
        int64_t _internal_team_id() const;
        void _internal_set_team_id(int64_t value);

    public:
        // string text_message = 3;
        bool has_text_message() const;

    private:
        bool _internal_has_text_message() const;

    public:
        void clear_text_message();
        const std::string& text_message() const;
        template<typename ArgT0 = const std::string&, typename... ArgT>
        void set_text_message(ArgT0&& arg0, ArgT... args);
        std::string* mutable_text_message();
        PROTOBUF_NODISCARD std::string* release_text_message();
        void set_allocated_text_message(std::string* text_message);

    private:
        const std::string& _internal_text_message() const;
        inline PROTOBUF_ALWAYS_INLINE void _internal_set_text_message(const std::string& value);
        std::string* _internal_mutable_text_message();

    public:
        // bytes binary_message = 4;
        bool has_binary_message() const;

    private:
        bool _internal_has_binary_message() const;

    public:
        void clear_binary_message();
        const std::string& binary_message() const;
        template<typename ArgT0 = const std::string&, typename... ArgT>
        void set_binary_message(ArgT0&& arg0, ArgT... args);
        std::string* mutable_binary_message();
        PROTOBUF_NODISCARD std::string* release_binary_message();
        void set_allocated_binary_message(std::string* binary_message);

    private:
        const std::string& _internal_binary_message() const;
        inline PROTOBUF_ALWAYS_INLINE void _internal_set_binary_message(const std::string& value);
        std::string* _internal_mutable_binary_message();

    public:
        void clear_message();
        MessageCase message_case() const;
        // @@protoc_insertion_point(class_scope:protobuf.SendMsg)

    private:
        class _Internal;
        void set_has_text_message();
        void set_has_binary_message();

        inline bool has_message() const;
        inline void clear_has_message();

        template<typename T>
        friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
        typedef void InternalArenaConstructable_;
        typedef void DestructorSkippable_;
        int64_t player_id_;
        int64_t to_player_id_;
        int64_t team_id_;
        union MessageUnion
        {
            constexpr MessageUnion() :
                _constinit_{}
            {
            }
            ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
            ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr text_message_;
            ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr binary_message_;
        } message_;
        mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
        uint32_t _oneof_case_[1];

        friend struct ::TableStruct_Message2Server_2eproto;
    };
    // -------------------------------------------------------------------

    class AttackMsg final :
        public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protobuf.AttackMsg) */
    {
    public:
        inline AttackMsg() :
            AttackMsg(nullptr)
        {
        }
        ~AttackMsg() override;
        explicit PROTOBUF_CONSTEXPR AttackMsg(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

        AttackMsg(const AttackMsg& from);
        AttackMsg(AttackMsg&& from) noexcept
            :
            AttackMsg()
        {
            *this = ::std::move(from);
        }

        inline AttackMsg& operator=(const AttackMsg& from)
        {
            CopyFrom(from);
            return *this;
        }
        inline AttackMsg& operator=(AttackMsg&& from) noexcept
        {
            if (this == &from)
                return *this;
            if (GetOwningArena() == from.GetOwningArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
                && GetOwningArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
            )
            {
                InternalSwap(&from);
            }
            else
            {
                CopyFrom(from);
            }
            return *this;
        }

        static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor()
        {
            return GetDescriptor();
        }
        static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor()
        {
            return default_instance().GetMetadata().descriptor;
        }
        static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection()
        {
            return default_instance().GetMetadata().reflection;
        }
        static const AttackMsg& default_instance()
        {
            return *internal_default_instance();
        }
        static inline const AttackMsg* internal_default_instance()
        {
            return reinterpret_cast<const AttackMsg*>(
                &_AttackMsg_default_instance_
            );
        }
        static constexpr int kIndexInFileMessages =
            4;

        friend void swap(AttackMsg& a, AttackMsg& b)
        {
            a.Swap(&b);
        }
        inline void Swap(AttackMsg* other)
        {
            if (other == this)
                return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
            if (GetOwningArena() != nullptr &&
                GetOwningArena() == other->GetOwningArena())
            {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
            if (GetOwningArena() == other->GetOwningArena())
            {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
                InternalSwap(other);
            }
            else
            {
                ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
            }
        }
        void UnsafeArenaSwap(AttackMsg* other)
        {
            if (other == this)
                return;
            GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
            InternalSwap(other);
        }

        // implements Message ----------------------------------------------

        AttackMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final
        {
            return CreateMaybeMessage<AttackMsg>(arena);
        }
        using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
        void CopyFrom(const AttackMsg& from);
        using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
        void MergeFrom(const AttackMsg& from);

    private:
        static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);

    public:
        PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
        bool IsInitialized() const final;

        size_t ByteSizeLong() const final;
        const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
        uint8_t* _InternalSerialize(
            uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream
        ) const final;
        int GetCachedSize() const final
        {
            return _cached_size_.Get();
        }

    private:
        void SharedCtor();
        void SharedDtor();
        void SetCachedSize(int size) const final;
        void InternalSwap(AttackMsg* other);

    private:
        friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
        static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName()
        {
            return "protobuf.AttackMsg";
        }

    protected:
        explicit AttackMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned = false);

    public:
        static const ClassData _class_data_;
        const ::PROTOBUF_NAMESPACE_ID::Message::ClassData* GetClassData() const final;

        ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

        // nested types ----------------------------------------------------

        // accessors -------------------------------------------------------

        enum : int
        {
            kPlayerIdFieldNumber = 1,
            kAngleFieldNumber = 2,
            kTeamIdFieldNumber = 3,
        };
        // int64 player_id = 1;
        void clear_player_id();
        int64_t player_id() const;
        void set_player_id(int64_t value);

    private:
        int64_t _internal_player_id() const;
        void _internal_set_player_id(int64_t value);

    public:
        // double angle = 2;
        void clear_angle();
        double angle() const;
        void set_angle(double value);

    private:
        double _internal_angle() const;
        void _internal_set_angle(double value);

    public:
        // int64 team_id = 3;
        void clear_team_id();
        int64_t team_id() const;
        void set_team_id(int64_t value);

    private:
        int64_t _internal_team_id() const;
        void _internal_set_team_id(int64_t value);

    public:
        // @@protoc_insertion_point(class_scope:protobuf.AttackMsg)

    private:
        class _Internal;

        template<typename T>
        friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
        typedef void InternalArenaConstructable_;
        typedef void DestructorSkippable_;
        int64_t player_id_;
        double angle_;
        int64_t team_id_;
        mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
        friend struct ::TableStruct_Message2Server_2eproto;
    };
    // -------------------------------------------------------------------

    class ConstructMsg final :
        public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protobuf.ConstructMsg) */
    {
    public:
        inline ConstructMsg() :
            ConstructMsg(nullptr)
        {
        }
        ~ConstructMsg() override;
        explicit PROTOBUF_CONSTEXPR ConstructMsg(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

        ConstructMsg(const ConstructMsg& from);
        ConstructMsg(ConstructMsg&& from) noexcept
            :
            ConstructMsg()
        {
            *this = ::std::move(from);
        }

        inline ConstructMsg& operator=(const ConstructMsg& from)
        {
            CopyFrom(from);
            return *this;
        }
        inline ConstructMsg& operator=(ConstructMsg&& from) noexcept
        {
            if (this == &from)
                return *this;
            if (GetOwningArena() == from.GetOwningArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
                && GetOwningArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
            )
            {
                InternalSwap(&from);
            }
            else
            {
                CopyFrom(from);
            }
            return *this;
        }

        static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor()
        {
            return GetDescriptor();
        }
        static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor()
        {
            return default_instance().GetMetadata().descriptor;
        }
        static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection()
        {
            return default_instance().GetMetadata().reflection;
        }
        static const ConstructMsg& default_instance()
        {
            return *internal_default_instance();
        }
        static inline const ConstructMsg* internal_default_instance()
        {
            return reinterpret_cast<const ConstructMsg*>(
                &_ConstructMsg_default_instance_
            );
        }
        static constexpr int kIndexInFileMessages =
            5;

        friend void swap(ConstructMsg& a, ConstructMsg& b)
        {
            a.Swap(&b);
        }
        inline void Swap(ConstructMsg* other)
        {
            if (other == this)
                return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
            if (GetOwningArena() != nullptr &&
                GetOwningArena() == other->GetOwningArena())
            {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
            if (GetOwningArena() == other->GetOwningArena())
            {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
                InternalSwap(other);
            }
            else
            {
                ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
            }
        }
        void UnsafeArenaSwap(ConstructMsg* other)
        {
            if (other == this)
                return;
            GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
            InternalSwap(other);
        }

        // implements Message ----------------------------------------------

        ConstructMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final
        {
            return CreateMaybeMessage<ConstructMsg>(arena);
        }
        using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
        void CopyFrom(const ConstructMsg& from);
        using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
        void MergeFrom(const ConstructMsg& from);

    private:
        static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);

    public:
        PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
        bool IsInitialized() const final;

        size_t ByteSizeLong() const final;
        const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
        uint8_t* _InternalSerialize(
            uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream
        ) const final;
        int GetCachedSize() const final
        {
            return _cached_size_.Get();
        }

    private:
        void SharedCtor();
        void SharedDtor();
        void SetCachedSize(int size) const final;
        void InternalSwap(ConstructMsg* other);

    private:
        friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
        static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName()
        {
            return "protobuf.ConstructMsg";
        }

    protected:
        explicit ConstructMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned = false);

    public:
        static const ClassData _class_data_;
        const ::PROTOBUF_NAMESPACE_ID::Message::ClassData* GetClassData() const final;

        ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

        // nested types ----------------------------------------------------

        // accessors -------------------------------------------------------

        enum : int
        {
            kPlayerIdFieldNumber = 1,
            kTeamIdFieldNumber = 3,
            kConstructionTypeFieldNumber = 2,
        };
        // int64 player_id = 1;
        void clear_player_id();
        int64_t player_id() const;
        void set_player_id(int64_t value);

    private:
        int64_t _internal_player_id() const;
        void _internal_set_player_id(int64_t value);

    public:
        // int64 team_id = 3;
        void clear_team_id();
        int64_t team_id() const;
        void set_team_id(int64_t value);

    private:
        int64_t _internal_team_id() const;
        void _internal_set_team_id(int64_t value);

    public:
        // .protobuf.ConstructionType construction_type = 2;
        void clear_construction_type();
        ::protobuf::ConstructionType construction_type() const;
        void set_construction_type(::protobuf::ConstructionType value);

    private:
        ::protobuf::ConstructionType _internal_construction_type() const;
        void _internal_set_construction_type(::protobuf::ConstructionType value);

    public:
        // @@protoc_insertion_point(class_scope:protobuf.ConstructMsg)

    private:
        class _Internal;

        template<typename T>
        friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
        typedef void InternalArenaConstructable_;
        typedef void DestructorSkippable_;
        int64_t player_id_;
        int64_t team_id_;
        int construction_type_;
        mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
        friend struct ::TableStruct_Message2Server_2eproto;
    };
    // -------------------------------------------------------------------

    class InstallMsg final :
        public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protobuf.InstallMsg) */
    {
    public:
        inline InstallMsg() :
            InstallMsg(nullptr)
        {
        }
        ~InstallMsg() override;
        explicit PROTOBUF_CONSTEXPR InstallMsg(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

        InstallMsg(const InstallMsg& from);
        InstallMsg(InstallMsg&& from) noexcept
            :
            InstallMsg()
        {
            *this = ::std::move(from);
        }

        inline InstallMsg& operator=(const InstallMsg& from)
        {
            CopyFrom(from);
            return *this;
        }
        inline InstallMsg& operator=(InstallMsg&& from) noexcept
        {
            if (this == &from)
                return *this;
            if (GetOwningArena() == from.GetOwningArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
                && GetOwningArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
            )
            {
                InternalSwap(&from);
            }
            else
            {
                CopyFrom(from);
            }
            return *this;
        }

        static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor()
        {
            return GetDescriptor();
        }
        static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor()
        {
            return default_instance().GetMetadata().descriptor;
        }
        static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection()
        {
            return default_instance().GetMetadata().reflection;
        }
        static const InstallMsg& default_instance()
        {
            return *internal_default_instance();
        }
        static inline const InstallMsg* internal_default_instance()
        {
            return reinterpret_cast<const InstallMsg*>(
                &_InstallMsg_default_instance_
            );
        }
        static constexpr int kIndexInFileMessages =
            6;

        friend void swap(InstallMsg& a, InstallMsg& b)
        {
            a.Swap(&b);
        }
        inline void Swap(InstallMsg* other)
        {
            if (other == this)
                return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
            if (GetOwningArena() != nullptr &&
                GetOwningArena() == other->GetOwningArena())
            {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
            if (GetOwningArena() == other->GetOwningArena())
            {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
                InternalSwap(other);
            }
            else
            {
                ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
            }
        }
        void UnsafeArenaSwap(InstallMsg* other)
        {
            if (other == this)
                return;
            GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
            InternalSwap(other);
        }

        // implements Message ----------------------------------------------

        InstallMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final
        {
            return CreateMaybeMessage<InstallMsg>(arena);
        }
        using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
        void CopyFrom(const InstallMsg& from);
        using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
        void MergeFrom(const InstallMsg& from);

    private:
        static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);

    public:
        PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
        bool IsInitialized() const final;

        size_t ByteSizeLong() const final;
        const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
        uint8_t* _InternalSerialize(
            uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream
        ) const final;
        int GetCachedSize() const final
        {
            return _cached_size_.Get();
        }

    private:
        void SharedCtor();
        void SharedDtor();
        void SetCachedSize(int size) const final;
        void InternalSwap(InstallMsg* other);

    private:
        friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
        static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName()
        {
            return "protobuf.InstallMsg";
        }

    protected:
        explicit InstallMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned = false);

    public:
        static const ClassData _class_data_;
        const ::PROTOBUF_NAMESPACE_ID::Message::ClassData* GetClassData() const final;

        ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

        // nested types ----------------------------------------------------

        // accessors -------------------------------------------------------

        enum : int
        {
            kPlayerIdFieldNumber = 2,
            kTeamIdFieldNumber = 3,
            kModuleTypeFieldNumber = 1,
        };
        // int64 player_id = 2;
        void clear_player_id();
        int64_t player_id() const;
        void set_player_id(int64_t value);

    private:
        int64_t _internal_player_id() const;
        void _internal_set_player_id(int64_t value);

    public:
        // int64 team_id = 3;
        void clear_team_id();
        int64_t team_id() const;
        void set_team_id(int64_t value);

    private:
        int64_t _internal_team_id() const;
        void _internal_set_team_id(int64_t value);

    public:
        // .protobuf.ModuleType module_type = 1;
        void clear_module_type();
        ::protobuf::ModuleType module_type() const;
        void set_module_type(::protobuf::ModuleType value);

    private:
        ::protobuf::ModuleType _internal_module_type() const;
        void _internal_set_module_type(::protobuf::ModuleType value);

    public:
        // @@protoc_insertion_point(class_scope:protobuf.InstallMsg)

    private:
        class _Internal;

        template<typename T>
        friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
        typedef void InternalArenaConstructable_;
        typedef void DestructorSkippable_;
        int64_t player_id_;
        int64_t team_id_;
        int module_type_;
        mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
        friend struct ::TableStruct_Message2Server_2eproto;
    };
    // -------------------------------------------------------------------

    class BuildShipMsg final :
        public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protobuf.BuildShipMsg) */
    {
    public:
        inline BuildShipMsg() :
            BuildShipMsg(nullptr)
        {
        }
        ~BuildShipMsg() override;
        explicit PROTOBUF_CONSTEXPR BuildShipMsg(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

        BuildShipMsg(const BuildShipMsg& from);
        BuildShipMsg(BuildShipMsg&& from) noexcept
            :
            BuildShipMsg()
        {
            *this = ::std::move(from);
        }

        inline BuildShipMsg& operator=(const BuildShipMsg& from)
        {
            CopyFrom(from);
            return *this;
        }
        inline BuildShipMsg& operator=(BuildShipMsg&& from) noexcept
        {
            if (this == &from)
                return *this;
            if (GetOwningArena() == from.GetOwningArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
                && GetOwningArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
            )
            {
                InternalSwap(&from);
            }
            else
            {
                CopyFrom(from);
            }
            return *this;
        }

        static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor()
        {
            return GetDescriptor();
        }
        static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor()
        {
            return default_instance().GetMetadata().descriptor;
        }
        static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection()
        {
            return default_instance().GetMetadata().reflection;
        }
        static const BuildShipMsg& default_instance()
        {
            return *internal_default_instance();
        }
        static inline const BuildShipMsg* internal_default_instance()
        {
            return reinterpret_cast<const BuildShipMsg*>(
                &_BuildShipMsg_default_instance_
            );
        }
        static constexpr int kIndexInFileMessages =
            7;

        friend void swap(BuildShipMsg& a, BuildShipMsg& b)
        {
            a.Swap(&b);
        }
        inline void Swap(BuildShipMsg* other)
        {
            if (other == this)
                return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
            if (GetOwningArena() != nullptr &&
                GetOwningArena() == other->GetOwningArena())
            {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
            if (GetOwningArena() == other->GetOwningArena())
            {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
                InternalSwap(other);
            }
            else
            {
                ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
            }
        }
        void UnsafeArenaSwap(BuildShipMsg* other)
        {
            if (other == this)
                return;
            GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
            InternalSwap(other);
        }

        // implements Message ----------------------------------------------

        BuildShipMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final
        {
            return CreateMaybeMessage<BuildShipMsg>(arena);
        }
        using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
        void CopyFrom(const BuildShipMsg& from);
        using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
        void MergeFrom(const BuildShipMsg& from);

    private:
        static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);

    public:
        PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
        bool IsInitialized() const final;

        size_t ByteSizeLong() const final;
        const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
        uint8_t* _InternalSerialize(
            uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream
        ) const final;
        int GetCachedSize() const final
        {
            return _cached_size_.Get();
        }

    private:
        void SharedCtor();
        void SharedDtor();
        void SetCachedSize(int size) const final;
        void InternalSwap(BuildShipMsg* other);

    private:
        friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
        static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName()
        {
            return "protobuf.BuildShipMsg";
        }

    protected:
        explicit BuildShipMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned = false);

    public:
        static const ClassData _class_data_;
        const ::PROTOBUF_NAMESPACE_ID::Message::ClassData* GetClassData() const final;

        ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

        // nested types ----------------------------------------------------

        // accessors -------------------------------------------------------

        enum : int
        {
            kXFieldNumber = 1,
            kYFieldNumber = 2,
            kTeamIdFieldNumber = 4,
            kShipTypeFieldNumber = 3,
        };
        // int32 x = 1;
        void clear_x();
        int32_t x() const;
        void set_x(int32_t value);

    private:
        int32_t _internal_x() const;
        void _internal_set_x(int32_t value);

    public:
        // int32 y = 2;
        void clear_y();
        int32_t y() const;
        void set_y(int32_t value);

    private:
        int32_t _internal_y() const;
        void _internal_set_y(int32_t value);

    public:
        // int64 team_id = 4;
        void clear_team_id();
        int64_t team_id() const;
        void set_team_id(int64_t value);

    private:
        int64_t _internal_team_id() const;
        void _internal_set_team_id(int64_t value);

    public:
        // .protobuf.ShipType ship_type = 3;
        void clear_ship_type();
        ::protobuf::ShipType ship_type() const;
        void set_ship_type(::protobuf::ShipType value);

    private:
        ::protobuf::ShipType _internal_ship_type() const;
        void _internal_set_ship_type(::protobuf::ShipType value);

    public:
        // @@protoc_insertion_point(class_scope:protobuf.BuildShipMsg)

    private:
        class _Internal;

        template<typename T>
        friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
        typedef void InternalArenaConstructable_;
        typedef void DestructorSkippable_;
        int32_t x_;
        int32_t y_;
        int64_t team_id_;
        int ship_type_;
        mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
        friend struct ::TableStruct_Message2Server_2eproto;
    };
    // ===================================================================

    // ===================================================================

#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
    // IDMsg

    // int64 player_id = 1;
    inline void IDMsg::clear_player_id()
    {
        player_id_ = int64_t{0};
    }
    inline int64_t IDMsg::_internal_player_id() const
    {
        return player_id_;
    }
    inline int64_t IDMsg::player_id() const
    {
        // @@protoc_insertion_point(field_get:protobuf.IDMsg.player_id)
        return _internal_player_id();
    }
    inline void IDMsg::_internal_set_player_id(int64_t value)
    {
        player_id_ = value;
    }
    inline void IDMsg::set_player_id(int64_t value)
    {
        _internal_set_player_id(value);
        // @@protoc_insertion_point(field_set:protobuf.IDMsg.player_id)
    }

    // int64 team_id = 2;
    inline void IDMsg::clear_team_id()
    {
        team_id_ = int64_t{0};
    }
    inline int64_t IDMsg::_internal_team_id() const
    {
        return team_id_;
    }
    inline int64_t IDMsg::team_id() const
    {
        // @@protoc_insertion_point(field_get:protobuf.IDMsg.team_id)
        return _internal_team_id();
    }
    inline void IDMsg::_internal_set_team_id(int64_t value)
    {
        team_id_ = value;
    }
    inline void IDMsg::set_team_id(int64_t value)
    {
        _internal_set_team_id(value);
        // @@protoc_insertion_point(field_set:protobuf.IDMsg.team_id)
    }

    // -------------------------------------------------------------------

    // PlayerMsg

    // int64 player_id = 1;
    inline void PlayerMsg::clear_player_id()
    {
        player_id_ = int64_t{0};
    }
    inline int64_t PlayerMsg::_internal_player_id() const
    {
        return player_id_;
    }
    inline int64_t PlayerMsg::player_id() const
    {
        // @@protoc_insertion_point(field_get:protobuf.PlayerMsg.player_id)
        return _internal_player_id();
    }
    inline void PlayerMsg::_internal_set_player_id(int64_t value)
    {
        player_id_ = value;
    }
    inline void PlayerMsg::set_player_id(int64_t value)
    {
        _internal_set_player_id(value);
        // @@protoc_insertion_point(field_set:protobuf.PlayerMsg.player_id)
    }

    // int64 team_id = 2;
    inline void PlayerMsg::clear_team_id()
    {
        team_id_ = int64_t{0};
    }
    inline int64_t PlayerMsg::_internal_team_id() const
    {
        return team_id_;
    }
    inline int64_t PlayerMsg::team_id() const
    {
        // @@protoc_insertion_point(field_get:protobuf.PlayerMsg.team_id)
        return _internal_team_id();
    }
    inline void PlayerMsg::_internal_set_team_id(int64_t value)
    {
        team_id_ = value;
    }
    inline void PlayerMsg::set_team_id(int64_t value)
    {
        _internal_set_team_id(value);
        // @@protoc_insertion_point(field_set:protobuf.PlayerMsg.team_id)
    }

    // .protobuf.ShipType ship_type = 3;
    inline void PlayerMsg::clear_ship_type()
    {
        ship_type_ = 0;
    }
    inline ::protobuf::ShipType PlayerMsg::_internal_ship_type() const
    {
        return static_cast<::protobuf::ShipType>(ship_type_);
    }
    inline ::protobuf::ShipType PlayerMsg::ship_type() const
    {
        // @@protoc_insertion_point(field_get:protobuf.PlayerMsg.ship_type)
        return _internal_ship_type();
    }
    inline void PlayerMsg::_internal_set_ship_type(::protobuf::ShipType value)
    {
        ship_type_ = value;
    }
    inline void PlayerMsg::set_ship_type(::protobuf::ShipType value)
    {
        _internal_set_ship_type(value);
        // @@protoc_insertion_point(field_set:protobuf.PlayerMsg.ship_type)
    }

    // int32 x = 4;
    inline void PlayerMsg::clear_x()
    {
        x_ = 0;
    }
    inline int32_t PlayerMsg::_internal_x() const
    {
        return x_;
    }
    inline int32_t PlayerMsg::x() const
    {
        // @@protoc_insertion_point(field_get:protobuf.PlayerMsg.x)
        return _internal_x();
    }
    inline void PlayerMsg::_internal_set_x(int32_t value)
    {
        x_ = value;
    }
    inline void PlayerMsg::set_x(int32_t value)
    {
        _internal_set_x(value);
        // @@protoc_insertion_point(field_set:protobuf.PlayerMsg.x)
    }

    // int32 y = 5;
    inline void PlayerMsg::clear_y()
    {
        y_ = 0;
    }
    inline int32_t PlayerMsg::_internal_y() const
    {
        return y_;
    }
    inline int32_t PlayerMsg::y() const
    {
        // @@protoc_insertion_point(field_get:protobuf.PlayerMsg.y)
        return _internal_y();
    }
    inline void PlayerMsg::_internal_set_y(int32_t value)
    {
        y_ = value;
    }
    inline void PlayerMsg::set_y(int32_t value)
    {
        _internal_set_y(value);
        // @@protoc_insertion_point(field_set:protobuf.PlayerMsg.y)
    }

    // -------------------------------------------------------------------

    // MoveMsg

    // int64 player_id = 1;
    inline void MoveMsg::clear_player_id()
    {
        player_id_ = int64_t{0};
    }
    inline int64_t MoveMsg::_internal_player_id() const
    {
        return player_id_;
    }
    inline int64_t MoveMsg::player_id() const
    {
        // @@protoc_insertion_point(field_get:protobuf.MoveMsg.player_id)
        return _internal_player_id();
    }
    inline void MoveMsg::_internal_set_player_id(int64_t value)
    {
        player_id_ = value;
    }
    inline void MoveMsg::set_player_id(int64_t value)
    {
        _internal_set_player_id(value);
        // @@protoc_insertion_point(field_set:protobuf.MoveMsg.player_id)
    }

    // double angle = 2;
    inline void MoveMsg::clear_angle()
    {
        angle_ = 0;
    }
    inline double MoveMsg::_internal_angle() const
    {
        return angle_;
    }
    inline double MoveMsg::angle() const
    {
        // @@protoc_insertion_point(field_get:protobuf.MoveMsg.angle)
        return _internal_angle();
    }
    inline void MoveMsg::_internal_set_angle(double value)
    {
        angle_ = value;
    }
    inline void MoveMsg::set_angle(double value)
    {
        _internal_set_angle(value);
        // @@protoc_insertion_point(field_set:protobuf.MoveMsg.angle)
    }

    // int64 time_in_milliseconds = 3;
    inline void MoveMsg::clear_time_in_milliseconds()
    {
        time_in_milliseconds_ = int64_t{0};
    }
    inline int64_t MoveMsg::_internal_time_in_milliseconds() const
    {
        return time_in_milliseconds_;
    }
    inline int64_t MoveMsg::time_in_milliseconds() const
    {
        // @@protoc_insertion_point(field_get:protobuf.MoveMsg.time_in_milliseconds)
        return _internal_time_in_milliseconds();
    }
    inline void MoveMsg::_internal_set_time_in_milliseconds(int64_t value)
    {
        time_in_milliseconds_ = value;
    }
    inline void MoveMsg::set_time_in_milliseconds(int64_t value)
    {
        _internal_set_time_in_milliseconds(value);
        // @@protoc_insertion_point(field_set:protobuf.MoveMsg.time_in_milliseconds)
    }

    // int64 team_id = 4;
    inline void MoveMsg::clear_team_id()
    {
        team_id_ = int64_t{0};
    }
    inline int64_t MoveMsg::_internal_team_id() const
    {
        return team_id_;
    }
    inline int64_t MoveMsg::team_id() const
    {
        // @@protoc_insertion_point(field_get:protobuf.MoveMsg.team_id)
        return _internal_team_id();
    }
    inline void MoveMsg::_internal_set_team_id(int64_t value)
    {
        team_id_ = value;
    }
    inline void MoveMsg::set_team_id(int64_t value)
    {
        _internal_set_team_id(value);
        // @@protoc_insertion_point(field_set:protobuf.MoveMsg.team_id)
    }

    // -------------------------------------------------------------------

    // SendMsg

    // int64 player_id = 1;
    inline void SendMsg::clear_player_id()
    {
        player_id_ = int64_t{0};
    }
    inline int64_t SendMsg::_internal_player_id() const
    {
        return player_id_;
    }
    inline int64_t SendMsg::player_id() const
    {
        // @@protoc_insertion_point(field_get:protobuf.SendMsg.player_id)
        return _internal_player_id();
    }
    inline void SendMsg::_internal_set_player_id(int64_t value)
    {
        player_id_ = value;
    }
    inline void SendMsg::set_player_id(int64_t value)
    {
        _internal_set_player_id(value);
        // @@protoc_insertion_point(field_set:protobuf.SendMsg.player_id)
    }

    // int64 to_player_id = 2;
    inline void SendMsg::clear_to_player_id()
    {
        to_player_id_ = int64_t{0};
    }
    inline int64_t SendMsg::_internal_to_player_id() const
    {
        return to_player_id_;
    }
    inline int64_t SendMsg::to_player_id() const
    {
        // @@protoc_insertion_point(field_get:protobuf.SendMsg.to_player_id)
        return _internal_to_player_id();
    }
    inline void SendMsg::_internal_set_to_player_id(int64_t value)
    {
        to_player_id_ = value;
    }
    inline void SendMsg::set_to_player_id(int64_t value)
    {
        _internal_set_to_player_id(value);
        // @@protoc_insertion_point(field_set:protobuf.SendMsg.to_player_id)
    }

    // string text_message = 3;
    inline bool SendMsg::_internal_has_text_message() const
    {
        return message_case() == kTextMessage;
    }
    inline bool SendMsg::has_text_message() const
    {
        return _internal_has_text_message();
    }
    inline void SendMsg::set_has_text_message()
    {
        _oneof_case_[0] = kTextMessage;
    }
    inline void SendMsg::clear_text_message()
    {
        if (_internal_has_text_message())
        {
            message_.text_message_.Destroy();
            clear_has_message();
        }
    }
    inline const std::string& SendMsg::text_message() const
    {
        // @@protoc_insertion_point(field_get:protobuf.SendMsg.text_message)
        return _internal_text_message();
    }
    template<typename ArgT0, typename... ArgT>
    inline void SendMsg::set_text_message(ArgT0&& arg0, ArgT... args)
    {
        if (!_internal_has_text_message())
        {
            clear_message();
            set_has_text_message();
            message_.text_message_.InitDefault();
        }
        message_.text_message_.Set(static_cast<ArgT0&&>(arg0), args..., GetArenaForAllocation());
        // @@protoc_insertion_point(field_set:protobuf.SendMsg.text_message)
    }
    inline std::string* SendMsg::mutable_text_message()
    {
        std::string* _s = _internal_mutable_text_message();
        // @@protoc_insertion_point(field_mutable:protobuf.SendMsg.text_message)
        return _s;
    }
    inline const std::string& SendMsg::_internal_text_message() const
    {
        if (_internal_has_text_message())
        {
            return message_.text_message_.Get();
        }
        return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
    }
    inline void SendMsg::_internal_set_text_message(const std::string& value)
    {
        if (!_internal_has_text_message())
        {
            clear_message();
            set_has_text_message();
            message_.text_message_.InitDefault();
        }
        message_.text_message_.Set(value, GetArenaForAllocation());
    }
    inline std::string* SendMsg::_internal_mutable_text_message()
    {
        if (!_internal_has_text_message())
        {
            clear_message();
            set_has_text_message();
            message_.text_message_.InitDefault();
        }
        return message_.text_message_.Mutable(GetArenaForAllocation());
    }
    inline std::string* SendMsg::release_text_message()
    {
        // @@protoc_insertion_point(field_release:protobuf.SendMsg.text_message)
        if (_internal_has_text_message())
        {
            clear_has_message();
            return message_.text_message_.Release();
        }
        else
        {
            return nullptr;
        }
    }
    inline void SendMsg::set_allocated_text_message(std::string* text_message)
    {
        if (has_message())
        {
            clear_message();
        }
        if (text_message != nullptr)
        {
            set_has_text_message();
            message_.text_message_.InitAllocated(text_message, GetArenaForAllocation());
        }
        // @@protoc_insertion_point(field_set_allocated:protobuf.SendMsg.text_message)
    }

    // bytes binary_message = 4;
    inline bool SendMsg::_internal_has_binary_message() const
    {
        return message_case() == kBinaryMessage;
    }
    inline bool SendMsg::has_binary_message() const
    {
        return _internal_has_binary_message();
    }
    inline void SendMsg::set_has_binary_message()
    {
        _oneof_case_[0] = kBinaryMessage;
    }
    inline void SendMsg::clear_binary_message()
    {
        if (_internal_has_binary_message())
        {
            message_.binary_message_.Destroy();
            clear_has_message();
        }
    }
    inline const std::string& SendMsg::binary_message() const
    {
        // @@protoc_insertion_point(field_get:protobuf.SendMsg.binary_message)
        return _internal_binary_message();
    }
    template<typename ArgT0, typename... ArgT>
    inline void SendMsg::set_binary_message(ArgT0&& arg0, ArgT... args)
    {
        if (!_internal_has_binary_message())
        {
            clear_message();
            set_has_binary_message();
            message_.binary_message_.InitDefault();
        }
        message_.binary_message_.SetBytes(static_cast<ArgT0&&>(arg0), args..., GetArenaForAllocation());
        // @@protoc_insertion_point(field_set:protobuf.SendMsg.binary_message)
    }
    inline std::string* SendMsg::mutable_binary_message()
    {
        std::string* _s = _internal_mutable_binary_message();
        // @@protoc_insertion_point(field_mutable:protobuf.SendMsg.binary_message)
        return _s;
    }
    inline const std::string& SendMsg::_internal_binary_message() const
    {
        if (_internal_has_binary_message())
        {
            return message_.binary_message_.Get();
        }
        return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
    }
    inline void SendMsg::_internal_set_binary_message(const std::string& value)
    {
        if (!_internal_has_binary_message())
        {
            clear_message();
            set_has_binary_message();
            message_.binary_message_.InitDefault();
        }
        message_.binary_message_.Set(value, GetArenaForAllocation());
    }
    inline std::string* SendMsg::_internal_mutable_binary_message()
    {
        if (!_internal_has_binary_message())
        {
            clear_message();
            set_has_binary_message();
            message_.binary_message_.InitDefault();
        }
        return message_.binary_message_.Mutable(GetArenaForAllocation());
    }
    inline std::string* SendMsg::release_binary_message()
    {
        // @@protoc_insertion_point(field_release:protobuf.SendMsg.binary_message)
        if (_internal_has_binary_message())
        {
            clear_has_message();
            return message_.binary_message_.Release();
        }
        else
        {
            return nullptr;
        }
    }
    inline void SendMsg::set_allocated_binary_message(std::string* binary_message)
    {
        if (has_message())
        {
            clear_message();
        }
        if (binary_message != nullptr)
        {
            set_has_binary_message();
            message_.binary_message_.InitAllocated(binary_message, GetArenaForAllocation());
        }
        // @@protoc_insertion_point(field_set_allocated:protobuf.SendMsg.binary_message)
    }

    // int64 team_id = 5;
    inline void SendMsg::clear_team_id()
    {
        team_id_ = int64_t{0};
    }
    inline int64_t SendMsg::_internal_team_id() const
    {
        return team_id_;
    }
    inline int64_t SendMsg::team_id() const
    {
        // @@protoc_insertion_point(field_get:protobuf.SendMsg.team_id)
        return _internal_team_id();
    }
    inline void SendMsg::_internal_set_team_id(int64_t value)
    {
        team_id_ = value;
    }
    inline void SendMsg::set_team_id(int64_t value)
    {
        _internal_set_team_id(value);
        // @@protoc_insertion_point(field_set:protobuf.SendMsg.team_id)
    }

    inline bool SendMsg::has_message() const
    {
        return message_case() != MESSAGE_NOT_SET;
    }
    inline void SendMsg::clear_has_message()
    {
        _oneof_case_[0] = MESSAGE_NOT_SET;
    }
    inline SendMsg::MessageCase SendMsg::message_case() const
    {
        return SendMsg::MessageCase(_oneof_case_[0]);
    }
    // -------------------------------------------------------------------

    // AttackMsg

    // int64 player_id = 1;
    inline void AttackMsg::clear_player_id()
    {
        player_id_ = int64_t{0};
    }
    inline int64_t AttackMsg::_internal_player_id() const
    {
        return player_id_;
    }
    inline int64_t AttackMsg::player_id() const
    {
        // @@protoc_insertion_point(field_get:protobuf.AttackMsg.player_id)
        return _internal_player_id();
    }
    inline void AttackMsg::_internal_set_player_id(int64_t value)
    {
        player_id_ = value;
    }
    inline void AttackMsg::set_player_id(int64_t value)
    {
        _internal_set_player_id(value);
        // @@protoc_insertion_point(field_set:protobuf.AttackMsg.player_id)
    }

    // double angle = 2;
    inline void AttackMsg::clear_angle()
    {
        angle_ = 0;
    }
    inline double AttackMsg::_internal_angle() const
    {
        return angle_;
    }
    inline double AttackMsg::angle() const
    {
        // @@protoc_insertion_point(field_get:protobuf.AttackMsg.angle)
        return _internal_angle();
    }
    inline void AttackMsg::_internal_set_angle(double value)
    {
        angle_ = value;
    }
    inline void AttackMsg::set_angle(double value)
    {
        _internal_set_angle(value);
        // @@protoc_insertion_point(field_set:protobuf.AttackMsg.angle)
    }

    // int64 team_id = 3;
    inline void AttackMsg::clear_team_id()
    {
        team_id_ = int64_t{0};
    }
    inline int64_t AttackMsg::_internal_team_id() const
    {
        return team_id_;
    }
    inline int64_t AttackMsg::team_id() const
    {
        // @@protoc_insertion_point(field_get:protobuf.AttackMsg.team_id)
        return _internal_team_id();
    }
    inline void AttackMsg::_internal_set_team_id(int64_t value)
    {
        team_id_ = value;
    }
    inline void AttackMsg::set_team_id(int64_t value)
    {
        _internal_set_team_id(value);
        // @@protoc_insertion_point(field_set:protobuf.AttackMsg.team_id)
    }

    // -------------------------------------------------------------------

    // ConstructMsg

    // int64 player_id = 1;
    inline void ConstructMsg::clear_player_id()
    {
        player_id_ = int64_t{0};
    }
    inline int64_t ConstructMsg::_internal_player_id() const
    {
        return player_id_;
    }
    inline int64_t ConstructMsg::player_id() const
    {
        // @@protoc_insertion_point(field_get:protobuf.ConstructMsg.player_id)
        return _internal_player_id();
    }
    inline void ConstructMsg::_internal_set_player_id(int64_t value)
    {
        player_id_ = value;
    }
    inline void ConstructMsg::set_player_id(int64_t value)
    {
        _internal_set_player_id(value);
        // @@protoc_insertion_point(field_set:protobuf.ConstructMsg.player_id)
    }

    // .protobuf.ConstructionType construction_type = 2;
    inline void ConstructMsg::clear_construction_type()
    {
        construction_type_ = 0;
    }
    inline ::protobuf::ConstructionType ConstructMsg::_internal_construction_type() const
    {
        return static_cast<::protobuf::ConstructionType>(construction_type_);
    }
    inline ::protobuf::ConstructionType ConstructMsg::construction_type() const
    {
        // @@protoc_insertion_point(field_get:protobuf.ConstructMsg.construction_type)
        return _internal_construction_type();
    }
    inline void ConstructMsg::_internal_set_construction_type(::protobuf::ConstructionType value)
    {
        construction_type_ = value;
    }
    inline void ConstructMsg::set_construction_type(::protobuf::ConstructionType value)
    {
        _internal_set_construction_type(value);
        // @@protoc_insertion_point(field_set:protobuf.ConstructMsg.construction_type)
    }

    // int64 team_id = 3;
    inline void ConstructMsg::clear_team_id()
    {
        team_id_ = int64_t{0};
    }
    inline int64_t ConstructMsg::_internal_team_id() const
    {
        return team_id_;
    }
    inline int64_t ConstructMsg::team_id() const
    {
        // @@protoc_insertion_point(field_get:protobuf.ConstructMsg.team_id)
        return _internal_team_id();
    }
    inline void ConstructMsg::_internal_set_team_id(int64_t value)
    {
        team_id_ = value;
    }
    inline void ConstructMsg::set_team_id(int64_t value)
    {
        _internal_set_team_id(value);
        // @@protoc_insertion_point(field_set:protobuf.ConstructMsg.team_id)
    }

    // -------------------------------------------------------------------

    // InstallMsg

    // .protobuf.ModuleType module_type = 1;
    inline void InstallMsg::clear_module_type()
    {
        module_type_ = 0;
    }
    inline ::protobuf::ModuleType InstallMsg::_internal_module_type() const
    {
        return static_cast<::protobuf::ModuleType>(module_type_);
    }
    inline ::protobuf::ModuleType InstallMsg::module_type() const
    {
        // @@protoc_insertion_point(field_get:protobuf.InstallMsg.module_type)
        return _internal_module_type();
    }
    inline void InstallMsg::_internal_set_module_type(::protobuf::ModuleType value)
    {
        module_type_ = value;
    }
    inline void InstallMsg::set_module_type(::protobuf::ModuleType value)
    {
        _internal_set_module_type(value);
        // @@protoc_insertion_point(field_set:protobuf.InstallMsg.module_type)
    }

    // int64 player_id = 2;
    inline void InstallMsg::clear_player_id()
    {
        player_id_ = int64_t{0};
    }
    inline int64_t InstallMsg::_internal_player_id() const
    {
        return player_id_;
    }
    inline int64_t InstallMsg::player_id() const
    {
        // @@protoc_insertion_point(field_get:protobuf.InstallMsg.player_id)
        return _internal_player_id();
    }
    inline void InstallMsg::_internal_set_player_id(int64_t value)
    {
        player_id_ = value;
    }
    inline void InstallMsg::set_player_id(int64_t value)
    {
        _internal_set_player_id(value);
        // @@protoc_insertion_point(field_set:protobuf.InstallMsg.player_id)
    }

    // int64 team_id = 3;
    inline void InstallMsg::clear_team_id()
    {
        team_id_ = int64_t{0};
    }
    inline int64_t InstallMsg::_internal_team_id() const
    {
        return team_id_;
    }
    inline int64_t InstallMsg::team_id() const
    {
        // @@protoc_insertion_point(field_get:protobuf.InstallMsg.team_id)
        return _internal_team_id();
    }
    inline void InstallMsg::_internal_set_team_id(int64_t value)
    {
        team_id_ = value;
    }
    inline void InstallMsg::set_team_id(int64_t value)
    {
        _internal_set_team_id(value);
        // @@protoc_insertion_point(field_set:protobuf.InstallMsg.team_id)
    }

    // -------------------------------------------------------------------

    // BuildShipMsg

    // int32 x = 1;
    inline void BuildShipMsg::clear_x()
    {
        x_ = 0;
    }
    inline int32_t BuildShipMsg::_internal_x() const
    {
        return x_;
    }
    inline int32_t BuildShipMsg::x() const
    {
        // @@protoc_insertion_point(field_get:protobuf.BuildShipMsg.x)
        return _internal_x();
    }
    inline void BuildShipMsg::_internal_set_x(int32_t value)
    {
        x_ = value;
    }
    inline void BuildShipMsg::set_x(int32_t value)
    {
        _internal_set_x(value);
        // @@protoc_insertion_point(field_set:protobuf.BuildShipMsg.x)
    }

    // int32 y = 2;
    inline void BuildShipMsg::clear_y()
    {
        y_ = 0;
    }
    inline int32_t BuildShipMsg::_internal_y() const
    {
        return y_;
    }
    inline int32_t BuildShipMsg::y() const
    {
        // @@protoc_insertion_point(field_get:protobuf.BuildShipMsg.y)
        return _internal_y();
    }
    inline void BuildShipMsg::_internal_set_y(int32_t value)
    {
        y_ = value;
    }
    inline void BuildShipMsg::set_y(int32_t value)
    {
        _internal_set_y(value);
        // @@protoc_insertion_point(field_set:protobuf.BuildShipMsg.y)
    }

    // .protobuf.ShipType ship_type = 3;
    inline void BuildShipMsg::clear_ship_type()
    {
        ship_type_ = 0;
    }
    inline ::protobuf::ShipType BuildShipMsg::_internal_ship_type() const
    {
        return static_cast<::protobuf::ShipType>(ship_type_);
    }
    inline ::protobuf::ShipType BuildShipMsg::ship_type() const
    {
        // @@protoc_insertion_point(field_get:protobuf.BuildShipMsg.ship_type)
        return _internal_ship_type();
    }
    inline void BuildShipMsg::_internal_set_ship_type(::protobuf::ShipType value)
    {
        ship_type_ = value;
    }
    inline void BuildShipMsg::set_ship_type(::protobuf::ShipType value)
    {
        _internal_set_ship_type(value);
        // @@protoc_insertion_point(field_set:protobuf.BuildShipMsg.ship_type)
    }

    // int64 team_id = 4;
    inline void BuildShipMsg::clear_team_id()
    {
        team_id_ = int64_t{0};
    }
    inline int64_t BuildShipMsg::_internal_team_id() const
    {
        return team_id_;
    }
    inline int64_t BuildShipMsg::team_id() const
    {
        // @@protoc_insertion_point(field_get:protobuf.BuildShipMsg.team_id)
        return _internal_team_id();
    }
    inline void BuildShipMsg::_internal_set_team_id(int64_t value)
    {
        team_id_ = value;
    }
    inline void BuildShipMsg::set_team_id(int64_t value)
    {
        _internal_set_team_id(value);
        // @@protoc_insertion_point(field_set:protobuf.BuildShipMsg.team_id)
    }

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__
    // -------------------------------------------------------------------

    // -------------------------------------------------------------------

    // -------------------------------------------------------------------

    // -------------------------------------------------------------------

    // -------------------------------------------------------------------

    // -------------------------------------------------------------------

    // -------------------------------------------------------------------

    // @@protoc_insertion_point(namespace_scope)

}  // namespace protobuf

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Message2Server_2eproto
