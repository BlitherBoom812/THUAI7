// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Message2Clients.proto

#include "Message2Clients.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace protobuf
{
    PROTOBUF_CONSTEXPR MessageOfSweeper::MessageOfSweeper(
        ::_pbi::ConstantInitialized
    ) :
        _impl_{
            /*decltype(_impl_.x_)*/ 0, /*decltype(_impl_.y_)*/ 0, /*decltype(_impl_.speed_)*/ 0, /*decltype(_impl_.hp_)*/ 0, /*decltype(_impl_.armor_)*/ 0, /*decltype(_impl_.shield_)*/ 0, /*decltype(_impl_.team_id_)*/ int64_t{0}, /*decltype(_impl_.player_id_)*/ int64_t{0}, /*decltype(_impl_.guid_)*/ int64_t{0}, /*decltype(_impl_.sweeper_state_)*/ 0, /*decltype(_impl_.sweeper_type_)*/ 0, /*decltype(_impl_.view_range_)*/ 0, /*decltype(_impl_.producer_type_)*/ 0, /*decltype(_impl_.constructor_type_)*/ 0, /*decltype(_impl_.armor_type_)*/ 0, /*decltype(_impl_.shield_type_)*/ 0, /*decltype(_impl_.weapon_type_)*/ 0, /*decltype(_impl_.facing_direction_)*/ 0, /*decltype(_impl_._cached_size_)*/ {}}
    {
    }
    struct MessageOfSweeperDefaultTypeInternal
    {
        PROTOBUF_CONSTEXPR MessageOfSweeperDefaultTypeInternal() :
            _instance(::_pbi::ConstantInitialized{})
        {
        }
        ~MessageOfSweeperDefaultTypeInternal()
        {
        }
        union
        {
            MessageOfSweeper _instance;
        };
    };
    PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MessageOfSweeperDefaultTypeInternal _MessageOfSweeper_default_instance_;
    PROTOBUF_CONSTEXPR MessageOfBullet::MessageOfBullet(
        ::_pbi::ConstantInitialized
    ) :
        _impl_{
            /*decltype(_impl_.type_)*/ 0, /*decltype(_impl_.x_)*/ 0, /*decltype(_impl_.facing_direction_)*/ 0, /*decltype(_impl_.y_)*/ 0, /*decltype(_impl_.damage_)*/ 0, /*decltype(_impl_.team_id_)*/ int64_t{0}, /*decltype(_impl_.guid_)*/ int64_t{0}, /*decltype(_impl_.bomb_range_)*/ 0, /*decltype(_impl_.speed_)*/ 0, /*decltype(_impl_._cached_size_)*/ {}}
    {
    }
    struct MessageOfBulletDefaultTypeInternal
    {
        PROTOBUF_CONSTEXPR MessageOfBulletDefaultTypeInternal() :
            _instance(::_pbi::ConstantInitialized{})
        {
        }
        ~MessageOfBulletDefaultTypeInternal()
        {
        }
        union
        {
            MessageOfBullet _instance;
        };
    };
    PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MessageOfBulletDefaultTypeInternal _MessageOfBullet_default_instance_;
    PROTOBUF_CONSTEXPR MessageOfBombedBullet::MessageOfBombedBullet(
        ::_pbi::ConstantInitialized
    ) :
        _impl_{
            /*decltype(_impl_.type_)*/ 0, /*decltype(_impl_.x_)*/ 0, /*decltype(_impl_.facing_direction_)*/ 0, /*decltype(_impl_.mapping_id_)*/ int64_t{0}, /*decltype(_impl_.bomb_range_)*/ 0, /*decltype(_impl_.y_)*/ 0, /*decltype(_impl_._cached_size_)*/ {}}
    {
    }
    struct MessageOfBombedBulletDefaultTypeInternal
    {
        PROTOBUF_CONSTEXPR MessageOfBombedBulletDefaultTypeInternal() :
            _instance(::_pbi::ConstantInitialized{})
        {
        }
        ~MessageOfBombedBulletDefaultTypeInternal()
        {
        }
        union
        {
            MessageOfBombedBullet _instance;
        };
    };
    PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MessageOfBombedBulletDefaultTypeInternal _MessageOfBombedBullet_default_instance_;
    PROTOBUF_CONSTEXPR MessageOfRecycleBank::MessageOfRecycleBank(
        ::_pbi::ConstantInitialized
    ) :
        _impl_{
            /*decltype(_impl_.x_)*/ 0, /*decltype(_impl_.y_)*/ 0, /*decltype(_impl_.team_id_)*/ int64_t{0}, /*decltype(_impl_.hp_)*/ 0, /*decltype(_impl_._cached_size_)*/ {}}
    {
    }
    struct MessageOfRecycleBankDefaultTypeInternal
    {
        PROTOBUF_CONSTEXPR MessageOfRecycleBankDefaultTypeInternal() :
            _instance(::_pbi::ConstantInitialized{})
        {
        }
        ~MessageOfRecycleBankDefaultTypeInternal()
        {
        }
        union
        {
            MessageOfRecycleBank _instance;
        };
    };
    PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MessageOfRecycleBankDefaultTypeInternal _MessageOfRecycleBank_default_instance_;
    PROTOBUF_CONSTEXPR MessageOfChargeStation::MessageOfChargeStation(
        ::_pbi::ConstantInitialized
    ) :
        _impl_{
            /*decltype(_impl_.x_)*/ 0, /*decltype(_impl_.y_)*/ 0, /*decltype(_impl_.team_id_)*/ int64_t{0}, /*decltype(_impl_.hp_)*/ 0, /*decltype(_impl_._cached_size_)*/ {}}
    {
    }
    struct MessageOfChargeStationDefaultTypeInternal
    {
        PROTOBUF_CONSTEXPR MessageOfChargeStationDefaultTypeInternal() :
            _instance(::_pbi::ConstantInitialized{})
        {
        }
        ~MessageOfChargeStationDefaultTypeInternal()
        {
        }
        union
        {
            MessageOfChargeStation _instance;
        };
    };
    PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MessageOfChargeStationDefaultTypeInternal _MessageOfChargeStation_default_instance_;
    PROTOBUF_CONSTEXPR MessageOfSignalTower::MessageOfSignalTower(
        ::_pbi::ConstantInitialized
    ) :
        _impl_{
            /*decltype(_impl_.x_)*/ 0, /*decltype(_impl_.y_)*/ 0, /*decltype(_impl_.team_id_)*/ int64_t{0}, /*decltype(_impl_.hp_)*/ 0, /*decltype(_impl_._cached_size_)*/ {}}
    {
    }
    struct MessageOfSignalTowerDefaultTypeInternal
    {
        PROTOBUF_CONSTEXPR MessageOfSignalTowerDefaultTypeInternal() :
            _instance(::_pbi::ConstantInitialized{})
        {
        }
        ~MessageOfSignalTowerDefaultTypeInternal()
        {
        }
        union
        {
            MessageOfSignalTower _instance;
        };
    };
    PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MessageOfSignalTowerDefaultTypeInternal _MessageOfSignalTower_default_instance_;
    PROTOBUF_CONSTEXPR MessageOfBridge::MessageOfBridge(
        ::_pbi::ConstantInitialized
    ) :
        _impl_{
            /*decltype(_impl_.x_)*/ 0, /*decltype(_impl_.y_)*/ 0, /*decltype(_impl_.hp_)*/ 0, /*decltype(_impl_._cached_size_)*/ {}}
    {
    }
    struct MessageOfBridgeDefaultTypeInternal
    {
        PROTOBUF_CONSTEXPR MessageOfBridgeDefaultTypeInternal() :
            _instance(::_pbi::ConstantInitialized{})
        {
        }
        ~MessageOfBridgeDefaultTypeInternal()
        {
        }
        union
        {
            MessageOfBridge _instance;
        };
    };
    PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MessageOfBridgeDefaultTypeInternal _MessageOfBridge_default_instance_;
    PROTOBUF_CONSTEXPR MessageOfGarbage::MessageOfGarbage(
        ::_pbi::ConstantInitialized
    ) :
        _impl_{
            /*decltype(_impl_.x_)*/ 0, /*decltype(_impl_.y_)*/ 0, /*decltype(_impl_.progress_)*/ 0, /*decltype(_impl_._cached_size_)*/ {}}
    {
    }
    struct MessageOfGarbageDefaultTypeInternal
    {
        PROTOBUF_CONSTEXPR MessageOfGarbageDefaultTypeInternal() :
            _instance(::_pbi::ConstantInitialized{})
        {
        }
        ~MessageOfGarbageDefaultTypeInternal()
        {
        }
        union
        {
            MessageOfGarbage _instance;
        };
    };
    PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MessageOfGarbageDefaultTypeInternal _MessageOfGarbage_default_instance_;
    PROTOBUF_CONSTEXPR MessageOfHome::MessageOfHome(
        ::_pbi::ConstantInitialized
    ) :
        _impl_{
            /*decltype(_impl_.x_)*/ 0, /*decltype(_impl_.y_)*/ 0, /*decltype(_impl_.team_id_)*/ int64_t{0}, /*decltype(_impl_.hp_)*/ 0, /*decltype(_impl_._cached_size_)*/ {}}
    {
    }
    struct MessageOfHomeDefaultTypeInternal
    {
        PROTOBUF_CONSTEXPR MessageOfHomeDefaultTypeInternal() :
            _instance(::_pbi::ConstantInitialized{})
        {
        }
        ~MessageOfHomeDefaultTypeInternal()
        {
        }
        union
        {
            MessageOfHome _instance;
        };
    };
    PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MessageOfHomeDefaultTypeInternal _MessageOfHome_default_instance_;
    PROTOBUF_CONSTEXPR MessageOfMap_Row::MessageOfMap_Row(
        ::_pbi::ConstantInitialized
    ) :
        _impl_{
            /*decltype(_impl_.cols_)*/ {}, /*decltype(_impl_._cols_cached_byte_size_)*/ {0}, /*decltype(_impl_._cached_size_)*/ {}}
    {
    }
    struct MessageOfMap_RowDefaultTypeInternal
    {
        PROTOBUF_CONSTEXPR MessageOfMap_RowDefaultTypeInternal() :
            _instance(::_pbi::ConstantInitialized{})
        {
        }
        ~MessageOfMap_RowDefaultTypeInternal()
        {
        }
        union
        {
            MessageOfMap_Row _instance;
        };
    };
    PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MessageOfMap_RowDefaultTypeInternal _MessageOfMap_Row_default_instance_;
    PROTOBUF_CONSTEXPR MessageOfMap::MessageOfMap(
        ::_pbi::ConstantInitialized
    ) :
        _impl_{
            /*decltype(_impl_.rows_)*/ {}, /*decltype(_impl_.height_)*/ 0u, /*decltype(_impl_.width_)*/ 0u, /*decltype(_impl_._cached_size_)*/ {}}
    {
    }
    struct MessageOfMapDefaultTypeInternal
    {
        PROTOBUF_CONSTEXPR MessageOfMapDefaultTypeInternal() :
            _instance(::_pbi::ConstantInitialized{})
        {
        }
        ~MessageOfMapDefaultTypeInternal()
        {
        }
        union
        {
            MessageOfMap _instance;
        };
    };
    PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MessageOfMapDefaultTypeInternal _MessageOfMap_default_instance_;
    PROTOBUF_CONSTEXPR MessageOfTeam::MessageOfTeam(
        ::_pbi::ConstantInitialized
    ) :
        _impl_{
            /*decltype(_impl_.team_id_)*/ int64_t{0}, /*decltype(_impl_.player_id_)*/ int64_t{0}, /*decltype(_impl_.score_)*/ 0, /*decltype(_impl_.energy_)*/ 0, /*decltype(_impl_.guid_)*/ int64_t{0}, /*decltype(_impl_._cached_size_)*/ {}}
    {
    }
    struct MessageOfTeamDefaultTypeInternal
    {
        PROTOBUF_CONSTEXPR MessageOfTeamDefaultTypeInternal() :
            _instance(::_pbi::ConstantInitialized{})
        {
        }
        ~MessageOfTeamDefaultTypeInternal()
        {
        }
        union
        {
            MessageOfTeam _instance;
        };
    };
    PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MessageOfTeamDefaultTypeInternal _MessageOfTeam_default_instance_;
    PROTOBUF_CONSTEXPR MessageOfObj::MessageOfObj(
        ::_pbi::ConstantInitialized
    ) :
        _impl_{
            /*decltype(_impl_.message_of_obj_)*/ {}, /*decltype(_impl_._cached_size_)*/ {}, /*decltype(_impl_._oneof_case_)*/ {}}
    {
    }
    struct MessageOfObjDefaultTypeInternal
    {
        PROTOBUF_CONSTEXPR MessageOfObjDefaultTypeInternal() :
            _instance(::_pbi::ConstantInitialized{})
        {
        }
        ~MessageOfObjDefaultTypeInternal()
        {
        }
        union
        {
            MessageOfObj _instance;
        };
    };
    PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MessageOfObjDefaultTypeInternal _MessageOfObj_default_instance_;
    PROTOBUF_CONSTEXPR MessageOfAll::MessageOfAll(
        ::_pbi::ConstantInitialized
    ) :
        _impl_{
            /*decltype(_impl_.game_time_)*/ 0, /*decltype(_impl_.red_team_score_)*/ 0, /*decltype(_impl_.blue_team_score_)*/ 0, /*decltype(_impl_.red_team_energy_)*/ 0, /*decltype(_impl_.blue_team_energy_)*/ 0, /*decltype(_impl_.red_home_hp_)*/ 0, /*decltype(_impl_.blue_home_hp_)*/ 0, /*decltype(_impl_._cached_size_)*/ {}}
    {
    }
    struct MessageOfAllDefaultTypeInternal
    {
        PROTOBUF_CONSTEXPR MessageOfAllDefaultTypeInternal() :
            _instance(::_pbi::ConstantInitialized{})
        {
        }
        ~MessageOfAllDefaultTypeInternal()
        {
        }
        union
        {
            MessageOfAll _instance;
        };
    };
    PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MessageOfAllDefaultTypeInternal _MessageOfAll_default_instance_;
    PROTOBUF_CONSTEXPR MessageToClient::MessageToClient(
        ::_pbi::ConstantInitialized
    ) :
        _impl_{
            /*decltype(_impl_.obj_message_)*/ {}, /*decltype(_impl_.all_message_)*/ nullptr, /*decltype(_impl_.game_state_)*/ 0, /*decltype(_impl_._cached_size_)*/ {}}
    {
    }
    struct MessageToClientDefaultTypeInternal
    {
        PROTOBUF_CONSTEXPR MessageToClientDefaultTypeInternal() :
            _instance(::_pbi::ConstantInitialized{})
        {
        }
        ~MessageToClientDefaultTypeInternal()
        {
        }
        union
        {
            MessageToClient _instance;
        };
    };
    PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MessageToClientDefaultTypeInternal _MessageToClient_default_instance_;
    PROTOBUF_CONSTEXPR MoveRes::MoveRes(
        ::_pbi::ConstantInitialized
    ) :
        _impl_{
            /*decltype(_impl_.actual_speed_)*/ int64_t{0}, /*decltype(_impl_.actual_angle_)*/ 0, /*decltype(_impl_.act_success_)*/ false, /*decltype(_impl_._cached_size_)*/ {}}
    {
    }
    struct MoveResDefaultTypeInternal
    {
        PROTOBUF_CONSTEXPR MoveResDefaultTypeInternal() :
            _instance(::_pbi::ConstantInitialized{})
        {
        }
        ~MoveResDefaultTypeInternal()
        {
        }
        union
        {
            MoveRes _instance;
        };
    };
    PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MoveResDefaultTypeInternal _MoveRes_default_instance_;
    PROTOBUF_CONSTEXPR BoolRes::BoolRes(
        ::_pbi::ConstantInitialized
    ) :
        _impl_{
            /*decltype(_impl_.act_success_)*/ false, /*decltype(_impl_._cached_size_)*/ {}}
    {
    }
    struct BoolResDefaultTypeInternal
    {
        PROTOBUF_CONSTEXPR BoolResDefaultTypeInternal() :
            _instance(::_pbi::ConstantInitialized{})
        {
        }
        ~BoolResDefaultTypeInternal()
        {
        }
        union
        {
            BoolRes _instance;
        };
    };
    PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BoolResDefaultTypeInternal _BoolRes_default_instance_;
    PROTOBUF_CONSTEXPR SweeperInfoRes::SweeperInfoRes(
        ::_pbi::ConstantInitialized
    ) :
        _impl_{
            /*decltype(_impl_.sweeper_info_)*/ {}, /*decltype(_impl_._cached_size_)*/ {}}
    {
    }
    struct SweeperInfoResDefaultTypeInternal
    {
        PROTOBUF_CONSTEXPR SweeperInfoResDefaultTypeInternal() :
            _instance(::_pbi::ConstantInitialized{})
        {
        }
        ~SweeperInfoResDefaultTypeInternal()
        {
        }
        union
        {
            SweeperInfoRes _instance;
        };
    };
    PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SweeperInfoResDefaultTypeInternal _SweeperInfoRes_default_instance_;
    PROTOBUF_CONSTEXPR EcoRes::EcoRes(
        ::_pbi::ConstantInitialized
    ) :
        _impl_{
            /*decltype(_impl_.economy_)*/ int64_t{0}, /*decltype(_impl_._cached_size_)*/ {}}
    {
    }
    struct EcoResDefaultTypeInternal
    {
        PROTOBUF_CONSTEXPR EcoResDefaultTypeInternal() :
            _instance(::_pbi::ConstantInitialized{})
        {
        }
        ~EcoResDefaultTypeInternal()
        {
        }
        union
        {
            EcoRes _instance;
        };
    };
    PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EcoResDefaultTypeInternal _EcoRes_default_instance_;
    PROTOBUF_CONSTEXPR MessageOfNews::MessageOfNews(
        ::_pbi::ConstantInitialized
    ) :
        _impl_{
            /*decltype(_impl_.from_id_)*/ int64_t{0}, /*decltype(_impl_.to_id_)*/ int64_t{0}, /*decltype(_impl_.news_)*/ {}, /*decltype(_impl_._cached_size_)*/ {}, /*decltype(_impl_._oneof_case_)*/ {}}
    {
    }
    struct MessageOfNewsDefaultTypeInternal
    {
        PROTOBUF_CONSTEXPR MessageOfNewsDefaultTypeInternal() :
            _instance(::_pbi::ConstantInitialized{})
        {
        }
        ~MessageOfNewsDefaultTypeInternal()
        {
        }
        union
        {
            MessageOfNews _instance;
        };
    };
    PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MessageOfNewsDefaultTypeInternal _MessageOfNews_default_instance_;
}  // namespace protobuf
static ::_pb::Metadata file_level_metadata_Message2Clients_2eproto[20];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_Message2Clients_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_Message2Clients_2eproto = nullptr;

const uint32_t TableStruct_Message2Clients_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfSweeper, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfSweeper, _impl_.x_),
    PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfSweeper, _impl_.y_),
    PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfSweeper, _impl_.speed_),
    PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfSweeper, _impl_.hp_),
    PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfSweeper, _impl_.armor_),
    PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfSweeper, _impl_.shield_),
    PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfSweeper, _impl_.team_id_),
    PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfSweeper, _impl_.player_id_),
    PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfSweeper, _impl_.guid_),
    PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfSweeper, _impl_.sweeper_state_),
    PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfSweeper, _impl_.sweeper_type_),
    PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfSweeper, _impl_.view_range_),
    PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfSweeper, _impl_.producer_type_),
    PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfSweeper, _impl_.constructor_type_),
    PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfSweeper, _impl_.armor_type_),
    PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfSweeper, _impl_.shield_type_),
    PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfSweeper, _impl_.weapon_type_),
    PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfSweeper, _impl_.facing_direction_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfBullet, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfBullet, _impl_.type_),
    PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfBullet, _impl_.x_),
    PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfBullet, _impl_.y_),
    PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfBullet, _impl_.facing_direction_),
    PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfBullet, _impl_.damage_),
    PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfBullet, _impl_.team_id_),
    PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfBullet, _impl_.guid_),
    PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfBullet, _impl_.bomb_range_),
    PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfBullet, _impl_.speed_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfBombedBullet, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfBombedBullet, _impl_.type_),
    PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfBombedBullet, _impl_.x_),
    PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfBombedBullet, _impl_.y_),
    PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfBombedBullet, _impl_.facing_direction_),
    PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfBombedBullet, _impl_.mapping_id_),
    PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfBombedBullet, _impl_.bomb_range_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfRecycleBank, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfRecycleBank, _impl_.x_),
    PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfRecycleBank, _impl_.y_),
    PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfRecycleBank, _impl_.hp_),
    PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfRecycleBank, _impl_.team_id_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfChargeStation, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfChargeStation, _impl_.x_),
    PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfChargeStation, _impl_.y_),
    PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfChargeStation, _impl_.hp_),
    PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfChargeStation, _impl_.team_id_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfSignalTower, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfSignalTower, _impl_.x_),
    PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfSignalTower, _impl_.y_),
    PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfSignalTower, _impl_.hp_),
    PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfSignalTower, _impl_.team_id_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfBridge, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfBridge, _impl_.x_),
    PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfBridge, _impl_.y_),
    PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfBridge, _impl_.hp_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfGarbage, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfGarbage, _impl_.x_),
    PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfGarbage, _impl_.y_),
    PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfGarbage, _impl_.progress_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfHome, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfHome, _impl_.x_),
    PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfHome, _impl_.y_),
    PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfHome, _impl_.hp_),
    PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfHome, _impl_.team_id_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfMap_Row, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfMap_Row, _impl_.cols_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfMap, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfMap, _impl_.height_),
    PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfMap, _impl_.width_),
    PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfMap, _impl_.rows_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfTeam, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfTeam, _impl_.team_id_),
    PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfTeam, _impl_.player_id_),
    PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfTeam, _impl_.score_),
    PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfTeam, _impl_.energy_),
    PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfTeam, _impl_.guid_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfObj, _internal_metadata_),
    ~0u,  // no _extensions_
    PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfObj, _impl_._oneof_case_[0]),
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfObj, _impl_.message_of_obj_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfAll, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfAll, _impl_.game_time_),
    PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfAll, _impl_.red_team_score_),
    PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfAll, _impl_.blue_team_score_),
    PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfAll, _impl_.red_team_energy_),
    PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfAll, _impl_.blue_team_energy_),
    PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfAll, _impl_.red_home_hp_),
    PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfAll, _impl_.blue_home_hp_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::protobuf::MessageToClient, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    PROTOBUF_FIELD_OFFSET(::protobuf::MessageToClient, _impl_.obj_message_),
    PROTOBUF_FIELD_OFFSET(::protobuf::MessageToClient, _impl_.game_state_),
    PROTOBUF_FIELD_OFFSET(::protobuf::MessageToClient, _impl_.all_message_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::protobuf::MoveRes, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    PROTOBUF_FIELD_OFFSET(::protobuf::MoveRes, _impl_.actual_speed_),
    PROTOBUF_FIELD_OFFSET(::protobuf::MoveRes, _impl_.actual_angle_),
    PROTOBUF_FIELD_OFFSET(::protobuf::MoveRes, _impl_.act_success_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::protobuf::BoolRes, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    PROTOBUF_FIELD_OFFSET(::protobuf::BoolRes, _impl_.act_success_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::protobuf::SweeperInfoRes, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    PROTOBUF_FIELD_OFFSET(::protobuf::SweeperInfoRes, _impl_.sweeper_info_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::protobuf::EcoRes, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    PROTOBUF_FIELD_OFFSET(::protobuf::EcoRes, _impl_.economy_),
    ~0u,  // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfNews, _internal_metadata_),
    ~0u,  // no _extensions_
    PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfNews, _impl_._oneof_case_[0]),
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ::_pbi::kInvalidFieldOffsetTag,
    ::_pbi::kInvalidFieldOffsetTag,
    PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfNews, _impl_.from_id_),
    PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfNews, _impl_.to_id_),
    PROTOBUF_FIELD_OFFSET(::protobuf::MessageOfNews, _impl_.news_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    {0, -1, -1, sizeof(::protobuf::MessageOfSweeper)},
    {24, -1, -1, sizeof(::protobuf::MessageOfBullet)},
    {39, -1, -1, sizeof(::protobuf::MessageOfBombedBullet)},
    {51, -1, -1, sizeof(::protobuf::MessageOfRecycleBank)},
    {61, -1, -1, sizeof(::protobuf::MessageOfChargeStation)},
    {71, -1, -1, sizeof(::protobuf::MessageOfSignalTower)},
    {81, -1, -1, sizeof(::protobuf::MessageOfBridge)},
    {90, -1, -1, sizeof(::protobuf::MessageOfGarbage)},
    {99, -1, -1, sizeof(::protobuf::MessageOfHome)},
    {109, -1, -1, sizeof(::protobuf::MessageOfMap_Row)},
    {116, -1, -1, sizeof(::protobuf::MessageOfMap)},
    {125, -1, -1, sizeof(::protobuf::MessageOfTeam)},
    {136, -1, -1, sizeof(::protobuf::MessageOfObj)},
    {155, -1, -1, sizeof(::protobuf::MessageOfAll)},
    {168, -1, -1, sizeof(::protobuf::MessageToClient)},
    {177, -1, -1, sizeof(::protobuf::MoveRes)},
    {186, -1, -1, sizeof(::protobuf::BoolRes)},
    {193, -1, -1, sizeof(::protobuf::SweeperInfoRes)},
    {200, -1, -1, sizeof(::protobuf::EcoRes)},
    {207, -1, -1, sizeof(::protobuf::MessageOfNews)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::protobuf::_MessageOfSweeper_default_instance_._instance,
    &::protobuf::_MessageOfBullet_default_instance_._instance,
    &::protobuf::_MessageOfBombedBullet_default_instance_._instance,
    &::protobuf::_MessageOfRecycleBank_default_instance_._instance,
    &::protobuf::_MessageOfChargeStation_default_instance_._instance,
    &::protobuf::_MessageOfSignalTower_default_instance_._instance,
    &::protobuf::_MessageOfBridge_default_instance_._instance,
    &::protobuf::_MessageOfGarbage_default_instance_._instance,
    &::protobuf::_MessageOfHome_default_instance_._instance,
    &::protobuf::_MessageOfMap_Row_default_instance_._instance,
    &::protobuf::_MessageOfMap_default_instance_._instance,
    &::protobuf::_MessageOfTeam_default_instance_._instance,
    &::protobuf::_MessageOfObj_default_instance_._instance,
    &::protobuf::_MessageOfAll_default_instance_._instance,
    &::protobuf::_MessageToClient_default_instance_._instance,
    &::protobuf::_MoveRes_default_instance_._instance,
    &::protobuf::_BoolRes_default_instance_._instance,
    &::protobuf::_SweeperInfoRes_default_instance_._instance,
    &::protobuf::_EcoRes_default_instance_._instance,
    &::protobuf::_MessageOfNews_default_instance_._instance,
};

const char descriptor_table_protodef_Message2Clients_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
    "\n\025Message2Clients.proto\022\010protobuf\032\021Messa"
    "geType.proto\"\201\004\n\020MessageOfSweeper\022\t\n\001x\030\001"
    " \001(\005\022\t\n\001y\030\002 \001(\005\022\r\n\005speed\030\003 \001(\005\022\n\n\002hp\030\004 \001"
    "(\005\022\r\n\005armor\030\005 \001(\005\022\016\n\006shield\030\006 \001(\005\022\017\n\007tea"
    "m_id\030\007 \001(\003\022\021\n\tplayer_id\030\010 \001(\003\022\014\n\004guid\030\t "
    "\001(\003\022-\n\rsweeper_state\030\n \001(\0162\026.protobuf.Sw"
    "eeperState\022+\n\014sweeper_type\030\013 \001(\0162\025.proto"
    "buf.SweeperType\022\022\n\nview_range\030\014 \001(\005\022-\n\rp"
    "roducer_type\030\r \001(\0162\026.protobuf.ProducerTy"
    "pe\0223\n\020constructor_type\030\016 \001(\0162\031.protobuf."
    "ConstructorType\022\'\n\narmor_type\030\017 \001(\0162\023.pr"
    "otobuf.ArmorType\022)\n\013shield_type\030\020 \001(\0162\024."
    "protobuf.ShieldType\022)\n\013weapon_type\030\021 \001(\016"
    "2\024.protobuf.WeaponType\022\030\n\020facing_directi"
    "on\030\022 \001(\001\"\267\001\n\017MessageOfBullet\022\"\n\004type\030\001 \001"
    "(\0162\024.protobuf.BulletType\022\t\n\001x\030\002 \001(\005\022\t\n\001y"
    "\030\003 \001(\005\022\030\n\020facing_direction\030\004 \001(\001\022\016\n\006dama"
    "ge\030\005 \001(\005\022\017\n\007team_id\030\006 \001(\003\022\014\n\004guid\030\007 \001(\003\022"
    "\022\n\nbomb_range\030\010 \001(\001\022\r\n\005speed\030\t \001(\005\"\223\001\n\025M"
    "essageOfBombedBullet\022\"\n\004type\030\001 \001(\0162\024.pro"
    "tobuf.BulletType\022\t\n\001x\030\002 \001(\005\022\t\n\001y\030\003 \001(\005\022\030"
    "\n\020facing_direction\030\004 \001(\001\022\022\n\nmapping_id\030\005"
    " \001(\003\022\022\n\nbomb_range\030\006 \001(\001\"I\n\024MessageOfRec"
    "ycleBank\022\t\n\001x\030\001 \001(\005\022\t\n\001y\030\002 \001(\005\022\n\n\002hp\030\003 \001"
    "(\005\022\017\n\007team_id\030\004 \001(\003\"K\n\026MessageOfChargeSt"
    "ation\022\t\n\001x\030\001 \001(\005\022\t\n\001y\030\002 \001(\005\022\n\n\002hp\030\003 \001(\005\022"
    "\017\n\007team_id\030\004 \001(\003\"I\n\024MessageOfSignalTower"
    "\022\t\n\001x\030\001 \001(\005\022\t\n\001y\030\002 \001(\005\022\n\n\002hp\030\003 \001(\005\022\017\n\007te"
    "am_id\030\004 \001(\003\"3\n\017MessageOfBridge\022\t\n\001x\030\001 \001("
    "\005\022\t\n\001y\030\002 \001(\005\022\n\n\002hp\030\003 \001(\005\":\n\020MessageOfGar"
    "bage\022\t\n\001x\030\001 \001(\005\022\t\n\001y\030\002 \001(\005\022\020\n\010progress\030\003"
    " \001(\005\"B\n\rMessageOfHome\022\t\n\001x\030\001 \001(\005\022\t\n\001y\030\002 "
    "\001(\005\022\n\n\002hp\030\003 \001(\005\022\017\n\007team_id\030\004 \001(\003\"\201\001\n\014Mes"
    "sageOfMap\022\016\n\006height\030\001 \001(\r\022\r\n\005width\030\002 \001(\r"
    "\022(\n\004rows\030\003 \003(\0132\032.protobuf.MessageOfMap.R"
    "ow\032(\n\003Row\022!\n\004cols\030\001 \003(\0162\023.protobuf.Place"
    "Type\"`\n\rMessageOfTeam\022\017\n\007team_id\030\001 \001(\003\022\021"
    "\n\tplayer_id\030\002 \001(\003\022\r\n\005score\030\003 \001(\005\022\016\n\006ener"
    "gy\030\004 \001(\005\022\014\n\004guid\030\005 \001(\003\"\275\005\n\014MessageOfObj\022"
    "5\n\017sweeper_message\030\001 \001(\0132\032.protobuf.Mess"
    "ageOfSweeperH\000\0223\n\016bullet_message\030\002 \001(\0132\031"
    ".protobuf.MessageOfBulletH\000\022=\n\023recycleba"
    "nk_message\030\003 \001(\0132\036.protobuf.MessageOfRec"
    "ycleBankH\000\022A\n\025chargestation_message\030\004 \001("
    "\0132 .protobuf.MessageOfChargeStationH\000\022=\n"
    "\023signaltower_message\030\005 \001(\0132\036.protobuf.Me"
    "ssageOfSignalTowerH\000\0223\n\016bridge_message\030\006"
    " \001(\0132\031.protobuf.MessageOfBridgeH\000\022/\n\014hom"
    "e_message\030\007 \001(\0132\027.protobuf.MessageOfHome"
    "H\000\0225\n\017garbage_message\030\010 \001(\0132\032.protobuf.M"
    "essageOfGarbageH\000\022-\n\013map_message\030\t \001(\0132\026"
    ".protobuf.MessageOfMapH\000\022/\n\014news_message"
    "\030\n \001(\0132\027.protobuf.MessageOfNewsH\000\022@\n\025bom"
    "bed_bullet_message\030\013 \001(\0132\037.protobuf.Mess"
    "ageOfBombedBulletH\000\022/\n\014team_message\030\014 \001("
    "\0132\027.protobuf.MessageOfTeamH\000B\020\n\016message_"
    "of_obj\"\260\001\n\014MessageOfAll\022\021\n\tgame_time\030\001 \001"
    "(\005\022\026\n\016red_team_score\030\002 \001(\005\022\027\n\017blue_team_"
    "score\030\003 \001(\005\022\027\n\017red_team_energy\030\004 \001(\005\022\030\n\020"
    "blue_team_energy\030\005 \001(\005\022\023\n\013red_home_hp\030\006 "
    "\001(\005\022\024\n\014blue_home_hp\030\007 \001(\005\"\224\001\n\017MessageToC"
    "lient\022+\n\013obj_message\030\001 \003(\0132\026.protobuf.Me"
    "ssageOfObj\022\'\n\ngame_state\030\002 \001(\0162\023.protobu"
    "f.GameState\022+\n\013all_message\030\003 \001(\0132\026.proto"
    "buf.MessageOfAll\"J\n\007MoveRes\022\024\n\014actual_sp"
    "eed\030\001 \001(\003\022\024\n\014actual_angle\030\002 \001(\001\022\023\n\013act_s"
    "uccess\030\003 \001(\010\"\036\n\007BoolRes\022\023\n\013act_success\030\001"
    " \001(\010\"B\n\016SweeperInfoRes\0220\n\014sweeper_info\030\001"
    " \003(\0132\032.protobuf.MessageOfSweeper\"\031\n\006EcoR"
    "es\022\017\n\007economy\030\001 \001(\003\"i\n\rMessageOfNews\022\026\n\014"
    "text_message\030\001 \001(\tH\000\022\030\n\016binary_message\030\004"
    " \001(\014H\000\022\017\n\007from_id\030\002 \001(\003\022\r\n\005to_id\030\003 \001(\003B\006"
    "\n\004newsb\006proto3";
static const ::_pbi::DescriptorTable* const descriptor_table_Message2Clients_2eproto_deps[1] = {
    &::descriptor_table_MessageType_2eproto,
};
static ::_pbi::once_flag descriptor_table_Message2Clients_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_Message2Clients_2eproto = {
    false,
    false,
    2894,
    descriptor_table_protodef_Message2Clients_2eproto,
    "Message2Clients.proto",
    &descriptor_table_Message2Clients_2eproto_once,
    descriptor_table_Message2Clients_2eproto_deps,
    1,
    20,
    schemas,
    file_default_instances,
    TableStruct_Message2Clients_2eproto::offsets,
    file_level_metadata_Message2Clients_2eproto,
    file_level_enum_descriptors_Message2Clients_2eproto,
    file_level_service_descriptors_Message2Clients_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_Message2Clients_2eproto_getter()
{
    return &descriptor_table_Message2Clients_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_Message2Clients_2eproto(&descriptor_table_Message2Clients_2eproto);
namespace protobuf
{

    // ===================================================================

    class MessageOfSweeper::_Internal
    {
    public:
    };

    MessageOfSweeper::MessageOfSweeper(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned) :
        ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned)
    {
        SharedCtor(arena, is_message_owned);
        // @@protoc_insertion_point(arena_constructor:protobuf.MessageOfSweeper)
    }
    MessageOfSweeper::MessageOfSweeper(const MessageOfSweeper& from) :
        ::PROTOBUF_NAMESPACE_ID::Message()
    {
        MessageOfSweeper* const _this = this;
        (void)_this;
        new (&_impl_) Impl_{
            decltype(_impl_.x_){}, decltype(_impl_.y_){}, decltype(_impl_.speed_){}, decltype(_impl_.hp_){}, decltype(_impl_.armor_){}, decltype(_impl_.shield_){}, decltype(_impl_.team_id_){}, decltype(_impl_.player_id_){}, decltype(_impl_.guid_){}, decltype(_impl_.sweeper_state_){}, decltype(_impl_.sweeper_type_){}, decltype(_impl_.view_range_){}, decltype(_impl_.producer_type_){}, decltype(_impl_.constructor_type_){}, decltype(_impl_.armor_type_){}, decltype(_impl_.shield_type_){}, decltype(_impl_.weapon_type_){}, decltype(_impl_.facing_direction_){}, /*decltype(_impl_._cached_size_)*/ {}};

        _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
        ::memcpy(&_impl_.x_, &from._impl_.x_, static_cast<size_t>(reinterpret_cast<char*>(&_impl_.facing_direction_) - reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.facing_direction_));
        // @@protoc_insertion_point(copy_constructor:protobuf.MessageOfSweeper)
    }

    inline void MessageOfSweeper::SharedCtor(
        ::_pb::Arena* arena, bool is_message_owned
    )
    {
        (void)arena;
        (void)is_message_owned;
        new (&_impl_) Impl_{
            decltype(_impl_.x_){0}, decltype(_impl_.y_){0}, decltype(_impl_.speed_){0}, decltype(_impl_.hp_){0}, decltype(_impl_.armor_){0}, decltype(_impl_.shield_){0}, decltype(_impl_.team_id_){int64_t{0}}, decltype(_impl_.player_id_){int64_t{0}}, decltype(_impl_.guid_){int64_t{0}}, decltype(_impl_.sweeper_state_){0}, decltype(_impl_.sweeper_type_){0}, decltype(_impl_.view_range_){0}, decltype(_impl_.producer_type_){0}, decltype(_impl_.constructor_type_){0}, decltype(_impl_.armor_type_){0}, decltype(_impl_.shield_type_){0}, decltype(_impl_.weapon_type_){0}, decltype(_impl_.facing_direction_){0}, /*decltype(_impl_._cached_size_)*/ {}};
    }

    MessageOfSweeper::~MessageOfSweeper()
    {
        // @@protoc_insertion_point(destructor:protobuf.MessageOfSweeper)
        if (auto* arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>())
        {
            (void)arena;
            return;
        }
        SharedDtor();
    }

    inline void MessageOfSweeper::SharedDtor()
    {
        GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
    }

    void MessageOfSweeper::SetCachedSize(int size) const
    {
        _impl_._cached_size_.Set(size);
    }

    void MessageOfSweeper::Clear()
    {
        // @@protoc_insertion_point(message_clear_start:protobuf.MessageOfSweeper)
        uint32_t cached_has_bits = 0;
        // Prevent compiler warnings about cached_has_bits being unused
        (void)cached_has_bits;

        ::memset(&_impl_.x_, 0, static_cast<size_t>(reinterpret_cast<char*>(&_impl_.facing_direction_) - reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.facing_direction_));
        _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
    }

    const char* MessageOfSweeper::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx)
    {
#define CHK_(x)                       \
    if (PROTOBUF_PREDICT_FALSE(!(x))) \
    goto failure
        while (!ctx->Done(&ptr))
        {
            uint32_t tag;
            ptr = ::_pbi::ReadTag(ptr, &tag);
            switch (tag >> 3)
            {
                // int32 x = 1;
                case 1:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8))
                    {
                        _impl_.x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
                        CHK_(ptr);
                    }
                    else
                        goto handle_unusual;
                    continue;
                // int32 y = 2;
                case 2:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16))
                    {
                        _impl_.y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
                        CHK_(ptr);
                    }
                    else
                        goto handle_unusual;
                    continue;
                // int32 speed = 3;
                case 3:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24))
                    {
                        _impl_.speed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
                        CHK_(ptr);
                    }
                    else
                        goto handle_unusual;
                    continue;
                // int32 hp = 4;
                case 4:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32))
                    {
                        _impl_.hp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
                        CHK_(ptr);
                    }
                    else
                        goto handle_unusual;
                    continue;
                // int32 armor = 5;
                case 5:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40))
                    {
                        _impl_.armor_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
                        CHK_(ptr);
                    }
                    else
                        goto handle_unusual;
                    continue;
                // int32 shield = 6;
                case 6:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48))
                    {
                        _impl_.shield_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
                        CHK_(ptr);
                    }
                    else
                        goto handle_unusual;
                    continue;
                // int64 team_id = 7;
                case 7:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56))
                    {
                        _impl_.team_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
                        CHK_(ptr);
                    }
                    else
                        goto handle_unusual;
                    continue;
                // int64 player_id = 8;
                case 8:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64))
                    {
                        _impl_.player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
                        CHK_(ptr);
                    }
                    else
                        goto handle_unusual;
                    continue;
                // int64 guid = 9;
                case 9:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72))
                    {
                        _impl_.guid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
                        CHK_(ptr);
                    }
                    else
                        goto handle_unusual;
                    continue;
                // .protobuf.SweeperState sweeper_state = 10;
                case 10:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80))
                    {
                        uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
                        CHK_(ptr);
                        _internal_set_sweeper_state(static_cast<::protobuf::SweeperState>(val));
                    }
                    else
                        goto handle_unusual;
                    continue;
                // .protobuf.SweeperType sweeper_type = 11;
                case 11:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88))
                    {
                        uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
                        CHK_(ptr);
                        _internal_set_sweeper_type(static_cast<::protobuf::SweeperType>(val));
                    }
                    else
                        goto handle_unusual;
                    continue;
                // int32 view_range = 12;
                case 12:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96))
                    {
                        _impl_.view_range_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
                        CHK_(ptr);
                    }
                    else
                        goto handle_unusual;
                    continue;
                // .protobuf.ProducerType producer_type = 13;
                case 13:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104))
                    {
                        uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
                        CHK_(ptr);
                        _internal_set_producer_type(static_cast<::protobuf::ProducerType>(val));
                    }
                    else
                        goto handle_unusual;
                    continue;
                // .protobuf.ConstructorType constructor_type = 14;
                case 14:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112))
                    {
                        uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
                        CHK_(ptr);
                        _internal_set_constructor_type(static_cast<::protobuf::ConstructorType>(val));
                    }
                    else
                        goto handle_unusual;
                    continue;
                // .protobuf.ArmorType armor_type = 15;
                case 15:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120))
                    {
                        uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
                        CHK_(ptr);
                        _internal_set_armor_type(static_cast<::protobuf::ArmorType>(val));
                    }
                    else
                        goto handle_unusual;
                    continue;
                // .protobuf.ShieldType shield_type = 16;
                case 16:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128))
                    {
                        uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
                        CHK_(ptr);
                        _internal_set_shield_type(static_cast<::protobuf::ShieldType>(val));
                    }
                    else
                        goto handle_unusual;
                    continue;
                // .protobuf.WeaponType weapon_type = 17;
                case 17:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136))
                    {
                        uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
                        CHK_(ptr);
                        _internal_set_weapon_type(static_cast<::protobuf::WeaponType>(val));
                    }
                    else
                        goto handle_unusual;
                    continue;
                // double facing_direction = 18;
                case 18:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 145))
                    {
                        _impl_.facing_direction_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
                        ptr += sizeof(double);
                    }
                    else
                        goto handle_unusual;
                    continue;
                default:
                    goto handle_unusual;
            }  // switch
        handle_unusual:
            if ((tag == 0) || ((tag & 7) == 4))
            {
                CHK_(ptr);
                ctx->SetLastTag(tag);
                goto message_done;
            }
            ptr = UnknownFieldParse(
                tag,
                _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
                ptr,
                ctx
            );
            CHK_(ptr != nullptr);
        }  // while
    message_done:
        return ptr;
    failure:
        ptr = nullptr;
        goto message_done;
#undef CHK_
    }

    uint8_t* MessageOfSweeper::_InternalSerialize(
        uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream
    ) const
    {
        // @@protoc_insertion_point(serialize_to_array_start:protobuf.MessageOfSweeper)
        uint32_t cached_has_bits = 0;
        (void)cached_has_bits;

        // int32 x = 1;
        if (this->_internal_x() != 0)
        {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_x(), target);
        }

        // int32 y = 2;
        if (this->_internal_y() != 0)
        {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_y(), target);
        }

        // int32 speed = 3;
        if (this->_internal_speed() != 0)
        {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_speed(), target);
        }

        // int32 hp = 4;
        if (this->_internal_hp() != 0)
        {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_hp(), target);
        }

        // int32 armor = 5;
        if (this->_internal_armor() != 0)
        {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_armor(), target);
        }

        // int32 shield = 6;
        if (this->_internal_shield() != 0)
        {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_shield(), target);
        }

        // int64 team_id = 7;
        if (this->_internal_team_id() != 0)
        {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt64ToArray(7, this->_internal_team_id(), target);
        }

        // int64 player_id = 8;
        if (this->_internal_player_id() != 0)
        {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt64ToArray(8, this->_internal_player_id(), target);
        }

        // int64 guid = 9;
        if (this->_internal_guid() != 0)
        {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt64ToArray(9, this->_internal_guid(), target);
        }

        // .protobuf.SweeperState sweeper_state = 10;
        if (this->_internal_sweeper_state() != 0)
        {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                10, this->_internal_sweeper_state(), target
            );
        }

        // .protobuf.SweeperType sweeper_type = 11;
        if (this->_internal_sweeper_type() != 0)
        {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                11, this->_internal_sweeper_type(), target
            );
        }

        // int32 view_range = 12;
        if (this->_internal_view_range() != 0)
        {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt32ToArray(12, this->_internal_view_range(), target);
        }

        // .protobuf.ProducerType producer_type = 13;
        if (this->_internal_producer_type() != 0)
        {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                13, this->_internal_producer_type(), target
            );
        }

        // .protobuf.ConstructorType constructor_type = 14;
        if (this->_internal_constructor_type() != 0)
        {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                14, this->_internal_constructor_type(), target
            );
        }

        // .protobuf.ArmorType armor_type = 15;
        if (this->_internal_armor_type() != 0)
        {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                15, this->_internal_armor_type(), target
            );
        }

        // .protobuf.ShieldType shield_type = 16;
        if (this->_internal_shield_type() != 0)
        {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                16, this->_internal_shield_type(), target
            );
        }

        // .protobuf.WeaponType weapon_type = 17;
        if (this->_internal_weapon_type() != 0)
        {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                17, this->_internal_weapon_type(), target
            );
        }

        // double facing_direction = 18;
        static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
        double tmp_facing_direction = this->_internal_facing_direction();
        uint64_t raw_facing_direction;
        memcpy(&raw_facing_direction, &tmp_facing_direction, sizeof(tmp_facing_direction));
        if (raw_facing_direction != 0)
        {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(18, this->_internal_facing_direction(), target);
        }

        if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields()))
        {
            target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream
            );
        }
        // @@protoc_insertion_point(serialize_to_array_end:protobuf.MessageOfSweeper)
        return target;
    }

    size_t MessageOfSweeper::ByteSizeLong() const
    {
        // @@protoc_insertion_point(message_byte_size_start:protobuf.MessageOfSweeper)
        size_t total_size = 0;

        uint32_t cached_has_bits = 0;
        // Prevent compiler warnings about cached_has_bits being unused
        (void)cached_has_bits;

        // int32 x = 1;
        if (this->_internal_x() != 0)
        {
            total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_x());
        }

        // int32 y = 2;
        if (this->_internal_y() != 0)
        {
            total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_y());
        }

        // int32 speed = 3;
        if (this->_internal_speed() != 0)
        {
            total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_speed());
        }

        // int32 hp = 4;
        if (this->_internal_hp() != 0)
        {
            total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_hp());
        }

        // int32 armor = 5;
        if (this->_internal_armor() != 0)
        {
            total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_armor());
        }

        // int32 shield = 6;
        if (this->_internal_shield() != 0)
        {
            total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_shield());
        }

        // int64 team_id = 7;
        if (this->_internal_team_id() != 0)
        {
            total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_team_id());
        }

        // int64 player_id = 8;
        if (this->_internal_player_id() != 0)
        {
            total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_player_id());
        }

        // int64 guid = 9;
        if (this->_internal_guid() != 0)
        {
            total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_guid());
        }

        // .protobuf.SweeperState sweeper_state = 10;
        if (this->_internal_sweeper_state() != 0)
        {
            total_size += 1 +
                          ::_pbi::WireFormatLite::EnumSize(this->_internal_sweeper_state());
        }

        // .protobuf.SweeperType sweeper_type = 11;
        if (this->_internal_sweeper_type() != 0)
        {
            total_size += 1 +
                          ::_pbi::WireFormatLite::EnumSize(this->_internal_sweeper_type());
        }

        // int32 view_range = 12;
        if (this->_internal_view_range() != 0)
        {
            total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_view_range());
        }

        // .protobuf.ProducerType producer_type = 13;
        if (this->_internal_producer_type() != 0)
        {
            total_size += 1 +
                          ::_pbi::WireFormatLite::EnumSize(this->_internal_producer_type());
        }

        // .protobuf.ConstructorType constructor_type = 14;
        if (this->_internal_constructor_type() != 0)
        {
            total_size += 1 +
                          ::_pbi::WireFormatLite::EnumSize(this->_internal_constructor_type());
        }

        // .protobuf.ArmorType armor_type = 15;
        if (this->_internal_armor_type() != 0)
        {
            total_size += 1 +
                          ::_pbi::WireFormatLite::EnumSize(this->_internal_armor_type());
        }

        // .protobuf.ShieldType shield_type = 16;
        if (this->_internal_shield_type() != 0)
        {
            total_size += 2 +
                          ::_pbi::WireFormatLite::EnumSize(this->_internal_shield_type());
        }

        // .protobuf.WeaponType weapon_type = 17;
        if (this->_internal_weapon_type() != 0)
        {
            total_size += 2 +
                          ::_pbi::WireFormatLite::EnumSize(this->_internal_weapon_type());
        }

        // double facing_direction = 18;
        static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
        double tmp_facing_direction = this->_internal_facing_direction();
        uint64_t raw_facing_direction;
        memcpy(&raw_facing_direction, &tmp_facing_direction, sizeof(tmp_facing_direction));
        if (raw_facing_direction != 0)
        {
            total_size += 2 + 8;
        }

        return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
    }

    const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MessageOfSweeper::_class_data_ = {
        ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
        MessageOfSweeper::MergeImpl};
    const ::PROTOBUF_NAMESPACE_ID::Message::ClassData* MessageOfSweeper::GetClassData() const
    {
        return &_class_data_;
    }

    void MessageOfSweeper::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg)
    {
        auto* const _this = static_cast<MessageOfSweeper*>(&to_msg);
        auto& from = static_cast<const MessageOfSweeper&>(from_msg);
        // @@protoc_insertion_point(class_specific_merge_from_start:protobuf.MessageOfSweeper)
        GOOGLE_DCHECK_NE(&from, _this);
        uint32_t cached_has_bits = 0;
        (void)cached_has_bits;

        if (from._internal_x() != 0)
        {
            _this->_internal_set_x(from._internal_x());
        }
        if (from._internal_y() != 0)
        {
            _this->_internal_set_y(from._internal_y());
        }
        if (from._internal_speed() != 0)
        {
            _this->_internal_set_speed(from._internal_speed());
        }
        if (from._internal_hp() != 0)
        {
            _this->_internal_set_hp(from._internal_hp());
        }
        if (from._internal_armor() != 0)
        {
            _this->_internal_set_armor(from._internal_armor());
        }
        if (from._internal_shield() != 0)
        {
            _this->_internal_set_shield(from._internal_shield());
        }
        if (from._internal_team_id() != 0)
        {
            _this->_internal_set_team_id(from._internal_team_id());
        }
        if (from._internal_player_id() != 0)
        {
            _this->_internal_set_player_id(from._internal_player_id());
        }
        if (from._internal_guid() != 0)
        {
            _this->_internal_set_guid(from._internal_guid());
        }
        if (from._internal_sweeper_state() != 0)
        {
            _this->_internal_set_sweeper_state(from._internal_sweeper_state());
        }
        if (from._internal_sweeper_type() != 0)
        {
            _this->_internal_set_sweeper_type(from._internal_sweeper_type());
        }
        if (from._internal_view_range() != 0)
        {
            _this->_internal_set_view_range(from._internal_view_range());
        }
        if (from._internal_producer_type() != 0)
        {
            _this->_internal_set_producer_type(from._internal_producer_type());
        }
        if (from._internal_constructor_type() != 0)
        {
            _this->_internal_set_constructor_type(from._internal_constructor_type());
        }
        if (from._internal_armor_type() != 0)
        {
            _this->_internal_set_armor_type(from._internal_armor_type());
        }
        if (from._internal_shield_type() != 0)
        {
            _this->_internal_set_shield_type(from._internal_shield_type());
        }
        if (from._internal_weapon_type() != 0)
        {
            _this->_internal_set_weapon_type(from._internal_weapon_type());
        }
        static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
        double tmp_facing_direction = from._internal_facing_direction();
        uint64_t raw_facing_direction;
        memcpy(&raw_facing_direction, &tmp_facing_direction, sizeof(tmp_facing_direction));
        if (raw_facing_direction != 0)
        {
            _this->_internal_set_facing_direction(from._internal_facing_direction());
        }
        _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
    }

    void MessageOfSweeper::CopyFrom(const MessageOfSweeper& from)
    {
        // @@protoc_insertion_point(class_specific_copy_from_start:protobuf.MessageOfSweeper)
        if (&from == this)
            return;
        Clear();
        MergeFrom(from);
    }

    bool MessageOfSweeper::IsInitialized() const
    {
        return true;
    }

    void MessageOfSweeper::InternalSwap(MessageOfSweeper* other)
    {
        using std::swap;
        _internal_metadata_.InternalSwap(&other->_internal_metadata_);
        ::PROTOBUF_NAMESPACE_ID::internal::memswap<
            PROTOBUF_FIELD_OFFSET(MessageOfSweeper, _impl_.facing_direction_) + sizeof(MessageOfSweeper::_impl_.facing_direction_) - PROTOBUF_FIELD_OFFSET(MessageOfSweeper, _impl_.x_)>(
            reinterpret_cast<char*>(&_impl_.x_),
            reinterpret_cast<char*>(&other->_impl_.x_)
        );
    }

    ::PROTOBUF_NAMESPACE_ID::Metadata MessageOfSweeper::GetMetadata() const
    {
        return ::_pbi::AssignDescriptors(
            &descriptor_table_Message2Clients_2eproto_getter, &descriptor_table_Message2Clients_2eproto_once, file_level_metadata_Message2Clients_2eproto[0]
        );
    }

    // ===================================================================

    class MessageOfBullet::_Internal
    {
    public:
    };

    MessageOfBullet::MessageOfBullet(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned) :
        ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned)
    {
        SharedCtor(arena, is_message_owned);
        // @@protoc_insertion_point(arena_constructor:protobuf.MessageOfBullet)
    }
    MessageOfBullet::MessageOfBullet(const MessageOfBullet& from) :
        ::PROTOBUF_NAMESPACE_ID::Message()
    {
        MessageOfBullet* const _this = this;
        (void)_this;
        new (&_impl_) Impl_{
            decltype(_impl_.type_){}, decltype(_impl_.x_){}, decltype(_impl_.facing_direction_){}, decltype(_impl_.y_){}, decltype(_impl_.damage_){}, decltype(_impl_.team_id_){}, decltype(_impl_.guid_){}, decltype(_impl_.bomb_range_){}, decltype(_impl_.speed_){}, /*decltype(_impl_._cached_size_)*/ {}};

        _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
        ::memcpy(&_impl_.type_, &from._impl_.type_, static_cast<size_t>(reinterpret_cast<char*>(&_impl_.speed_) - reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.speed_));
        // @@protoc_insertion_point(copy_constructor:protobuf.MessageOfBullet)
    }

    inline void MessageOfBullet::SharedCtor(
        ::_pb::Arena* arena, bool is_message_owned
    )
    {
        (void)arena;
        (void)is_message_owned;
        new (&_impl_) Impl_{
            decltype(_impl_.type_){0}, decltype(_impl_.x_){0}, decltype(_impl_.facing_direction_){0}, decltype(_impl_.y_){0}, decltype(_impl_.damage_){0}, decltype(_impl_.team_id_){int64_t{0}}, decltype(_impl_.guid_){int64_t{0}}, decltype(_impl_.bomb_range_){0}, decltype(_impl_.speed_){0}, /*decltype(_impl_._cached_size_)*/ {}};
    }

    MessageOfBullet::~MessageOfBullet()
    {
        // @@protoc_insertion_point(destructor:protobuf.MessageOfBullet)
        if (auto* arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>())
        {
            (void)arena;
            return;
        }
        SharedDtor();
    }

    inline void MessageOfBullet::SharedDtor()
    {
        GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
    }

    void MessageOfBullet::SetCachedSize(int size) const
    {
        _impl_._cached_size_.Set(size);
    }

    void MessageOfBullet::Clear()
    {
        // @@protoc_insertion_point(message_clear_start:protobuf.MessageOfBullet)
        uint32_t cached_has_bits = 0;
        // Prevent compiler warnings about cached_has_bits being unused
        (void)cached_has_bits;

        ::memset(&_impl_.type_, 0, static_cast<size_t>(reinterpret_cast<char*>(&_impl_.speed_) - reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.speed_));
        _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
    }

    const char* MessageOfBullet::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx)
    {
#define CHK_(x)                       \
    if (PROTOBUF_PREDICT_FALSE(!(x))) \
    goto failure
        while (!ctx->Done(&ptr))
        {
            uint32_t tag;
            ptr = ::_pbi::ReadTag(ptr, &tag);
            switch (tag >> 3)
            {
                // .protobuf.BulletType type = 1;
                case 1:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8))
                    {
                        uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
                        CHK_(ptr);
                        _internal_set_type(static_cast<::protobuf::BulletType>(val));
                    }
                    else
                        goto handle_unusual;
                    continue;
                // int32 x = 2;
                case 2:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16))
                    {
                        _impl_.x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
                        CHK_(ptr);
                    }
                    else
                        goto handle_unusual;
                    continue;
                // int32 y = 3;
                case 3:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24))
                    {
                        _impl_.y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
                        CHK_(ptr);
                    }
                    else
                        goto handle_unusual;
                    continue;
                // double facing_direction = 4;
                case 4:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33))
                    {
                        _impl_.facing_direction_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
                        ptr += sizeof(double);
                    }
                    else
                        goto handle_unusual;
                    continue;
                // int32 damage = 5;
                case 5:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40))
                    {
                        _impl_.damage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
                        CHK_(ptr);
                    }
                    else
                        goto handle_unusual;
                    continue;
                // int64 team_id = 6;
                case 6:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48))
                    {
                        _impl_.team_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
                        CHK_(ptr);
                    }
                    else
                        goto handle_unusual;
                    continue;
                // int64 guid = 7;
                case 7:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56))
                    {
                        _impl_.guid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
                        CHK_(ptr);
                    }
                    else
                        goto handle_unusual;
                    continue;
                // double bomb_range = 8;
                case 8:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 65))
                    {
                        _impl_.bomb_range_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
                        ptr += sizeof(double);
                    }
                    else
                        goto handle_unusual;
                    continue;
                // int32 speed = 9;
                case 9:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72))
                    {
                        _impl_.speed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
                        CHK_(ptr);
                    }
                    else
                        goto handle_unusual;
                    continue;
                default:
                    goto handle_unusual;
            }  // switch
        handle_unusual:
            if ((tag == 0) || ((tag & 7) == 4))
            {
                CHK_(ptr);
                ctx->SetLastTag(tag);
                goto message_done;
            }
            ptr = UnknownFieldParse(
                tag,
                _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
                ptr,
                ctx
            );
            CHK_(ptr != nullptr);
        }  // while
    message_done:
        return ptr;
    failure:
        ptr = nullptr;
        goto message_done;
#undef CHK_
    }

    uint8_t* MessageOfBullet::_InternalSerialize(
        uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream
    ) const
    {
        // @@protoc_insertion_point(serialize_to_array_start:protobuf.MessageOfBullet)
        uint32_t cached_has_bits = 0;
        (void)cached_has_bits;

        // .protobuf.BulletType type = 1;
        if (this->_internal_type() != 0)
        {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                1, this->_internal_type(), target
            );
        }

        // int32 x = 2;
        if (this->_internal_x() != 0)
        {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_x(), target);
        }

        // int32 y = 3;
        if (this->_internal_y() != 0)
        {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_y(), target);
        }

        // double facing_direction = 4;
        static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
        double tmp_facing_direction = this->_internal_facing_direction();
        uint64_t raw_facing_direction;
        memcpy(&raw_facing_direction, &tmp_facing_direction, sizeof(tmp_facing_direction));
        if (raw_facing_direction != 0)
        {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(4, this->_internal_facing_direction(), target);
        }

        // int32 damage = 5;
        if (this->_internal_damage() != 0)
        {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_damage(), target);
        }

        // int64 team_id = 6;
        if (this->_internal_team_id() != 0)
        {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt64ToArray(6, this->_internal_team_id(), target);
        }

        // int64 guid = 7;
        if (this->_internal_guid() != 0)
        {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt64ToArray(7, this->_internal_guid(), target);
        }

        // double bomb_range = 8;
        static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
        double tmp_bomb_range = this->_internal_bomb_range();
        uint64_t raw_bomb_range;
        memcpy(&raw_bomb_range, &tmp_bomb_range, sizeof(tmp_bomb_range));
        if (raw_bomb_range != 0)
        {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(8, this->_internal_bomb_range(), target);
        }

        // int32 speed = 9;
        if (this->_internal_speed() != 0)
        {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt32ToArray(9, this->_internal_speed(), target);
        }

        if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields()))
        {
            target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream
            );
        }
        // @@protoc_insertion_point(serialize_to_array_end:protobuf.MessageOfBullet)
        return target;
    }

    size_t MessageOfBullet::ByteSizeLong() const
    {
        // @@protoc_insertion_point(message_byte_size_start:protobuf.MessageOfBullet)
        size_t total_size = 0;

        uint32_t cached_has_bits = 0;
        // Prevent compiler warnings about cached_has_bits being unused
        (void)cached_has_bits;

        // .protobuf.BulletType type = 1;
        if (this->_internal_type() != 0)
        {
            total_size += 1 +
                          ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
        }

        // int32 x = 2;
        if (this->_internal_x() != 0)
        {
            total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_x());
        }

        // double facing_direction = 4;
        static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
        double tmp_facing_direction = this->_internal_facing_direction();
        uint64_t raw_facing_direction;
        memcpy(&raw_facing_direction, &tmp_facing_direction, sizeof(tmp_facing_direction));
        if (raw_facing_direction != 0)
        {
            total_size += 1 + 8;
        }

        // int32 y = 3;
        if (this->_internal_y() != 0)
        {
            total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_y());
        }

        // int32 damage = 5;
        if (this->_internal_damage() != 0)
        {
            total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_damage());
        }

        // int64 team_id = 6;
        if (this->_internal_team_id() != 0)
        {
            total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_team_id());
        }

        // int64 guid = 7;
        if (this->_internal_guid() != 0)
        {
            total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_guid());
        }

        // double bomb_range = 8;
        static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
        double tmp_bomb_range = this->_internal_bomb_range();
        uint64_t raw_bomb_range;
        memcpy(&raw_bomb_range, &tmp_bomb_range, sizeof(tmp_bomb_range));
        if (raw_bomb_range != 0)
        {
            total_size += 1 + 8;
        }

        // int32 speed = 9;
        if (this->_internal_speed() != 0)
        {
            total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_speed());
        }

        return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
    }

    const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MessageOfBullet::_class_data_ = {
        ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
        MessageOfBullet::MergeImpl};
    const ::PROTOBUF_NAMESPACE_ID::Message::ClassData* MessageOfBullet::GetClassData() const
    {
        return &_class_data_;
    }

    void MessageOfBullet::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg)
    {
        auto* const _this = static_cast<MessageOfBullet*>(&to_msg);
        auto& from = static_cast<const MessageOfBullet&>(from_msg);
        // @@protoc_insertion_point(class_specific_merge_from_start:protobuf.MessageOfBullet)
        GOOGLE_DCHECK_NE(&from, _this);
        uint32_t cached_has_bits = 0;
        (void)cached_has_bits;

        if (from._internal_type() != 0)
        {
            _this->_internal_set_type(from._internal_type());
        }
        if (from._internal_x() != 0)
        {
            _this->_internal_set_x(from._internal_x());
        }
        static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
        double tmp_facing_direction = from._internal_facing_direction();
        uint64_t raw_facing_direction;
        memcpy(&raw_facing_direction, &tmp_facing_direction, sizeof(tmp_facing_direction));
        if (raw_facing_direction != 0)
        {
            _this->_internal_set_facing_direction(from._internal_facing_direction());
        }
        if (from._internal_y() != 0)
        {
            _this->_internal_set_y(from._internal_y());
        }
        if (from._internal_damage() != 0)
        {
            _this->_internal_set_damage(from._internal_damage());
        }
        if (from._internal_team_id() != 0)
        {
            _this->_internal_set_team_id(from._internal_team_id());
        }
        if (from._internal_guid() != 0)
        {
            _this->_internal_set_guid(from._internal_guid());
        }
        static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
        double tmp_bomb_range = from._internal_bomb_range();
        uint64_t raw_bomb_range;
        memcpy(&raw_bomb_range, &tmp_bomb_range, sizeof(tmp_bomb_range));
        if (raw_bomb_range != 0)
        {
            _this->_internal_set_bomb_range(from._internal_bomb_range());
        }
        if (from._internal_speed() != 0)
        {
            _this->_internal_set_speed(from._internal_speed());
        }
        _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
    }

    void MessageOfBullet::CopyFrom(const MessageOfBullet& from)
    {
        // @@protoc_insertion_point(class_specific_copy_from_start:protobuf.MessageOfBullet)
        if (&from == this)
            return;
        Clear();
        MergeFrom(from);
    }

    bool MessageOfBullet::IsInitialized() const
    {
        return true;
    }

    void MessageOfBullet::InternalSwap(MessageOfBullet* other)
    {
        using std::swap;
        _internal_metadata_.InternalSwap(&other->_internal_metadata_);
        ::PROTOBUF_NAMESPACE_ID::internal::memswap<
            PROTOBUF_FIELD_OFFSET(MessageOfBullet, _impl_.speed_) + sizeof(MessageOfBullet::_impl_.speed_) - PROTOBUF_FIELD_OFFSET(MessageOfBullet, _impl_.type_)>(
            reinterpret_cast<char*>(&_impl_.type_),
            reinterpret_cast<char*>(&other->_impl_.type_)
        );
    }

    ::PROTOBUF_NAMESPACE_ID::Metadata MessageOfBullet::GetMetadata() const
    {
        return ::_pbi::AssignDescriptors(
            &descriptor_table_Message2Clients_2eproto_getter, &descriptor_table_Message2Clients_2eproto_once, file_level_metadata_Message2Clients_2eproto[1]
        );
    }

    // ===================================================================

    class MessageOfBombedBullet::_Internal
    {
    public:
    };

    MessageOfBombedBullet::MessageOfBombedBullet(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned) :
        ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned)
    {
        SharedCtor(arena, is_message_owned);
        // @@protoc_insertion_point(arena_constructor:protobuf.MessageOfBombedBullet)
    }
    MessageOfBombedBullet::MessageOfBombedBullet(const MessageOfBombedBullet& from) :
        ::PROTOBUF_NAMESPACE_ID::Message()
    {
        MessageOfBombedBullet* const _this = this;
        (void)_this;
        new (&_impl_) Impl_{
            decltype(_impl_.type_){}, decltype(_impl_.x_){}, decltype(_impl_.facing_direction_){}, decltype(_impl_.mapping_id_){}, decltype(_impl_.bomb_range_){}, decltype(_impl_.y_){}, /*decltype(_impl_._cached_size_)*/ {}};

        _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
        ::memcpy(&_impl_.type_, &from._impl_.type_, static_cast<size_t>(reinterpret_cast<char*>(&_impl_.y_) - reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.y_));
        // @@protoc_insertion_point(copy_constructor:protobuf.MessageOfBombedBullet)
    }

    inline void MessageOfBombedBullet::SharedCtor(
        ::_pb::Arena* arena, bool is_message_owned
    )
    {
        (void)arena;
        (void)is_message_owned;
        new (&_impl_) Impl_{
            decltype(_impl_.type_){0}, decltype(_impl_.x_){0}, decltype(_impl_.facing_direction_){0}, decltype(_impl_.mapping_id_){int64_t{0}}, decltype(_impl_.bomb_range_){0}, decltype(_impl_.y_){0}, /*decltype(_impl_._cached_size_)*/ {}};
    }

    MessageOfBombedBullet::~MessageOfBombedBullet()
    {
        // @@protoc_insertion_point(destructor:protobuf.MessageOfBombedBullet)
        if (auto* arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>())
        {
            (void)arena;
            return;
        }
        SharedDtor();
    }

    inline void MessageOfBombedBullet::SharedDtor()
    {
        GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
    }

    void MessageOfBombedBullet::SetCachedSize(int size) const
    {
        _impl_._cached_size_.Set(size);
    }

    void MessageOfBombedBullet::Clear()
    {
        // @@protoc_insertion_point(message_clear_start:protobuf.MessageOfBombedBullet)
        uint32_t cached_has_bits = 0;
        // Prevent compiler warnings about cached_has_bits being unused
        (void)cached_has_bits;

        ::memset(&_impl_.type_, 0, static_cast<size_t>(reinterpret_cast<char*>(&_impl_.y_) - reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.y_));
        _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
    }

    const char* MessageOfBombedBullet::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx)
    {
#define CHK_(x)                       \
    if (PROTOBUF_PREDICT_FALSE(!(x))) \
    goto failure
        while (!ctx->Done(&ptr))
        {
            uint32_t tag;
            ptr = ::_pbi::ReadTag(ptr, &tag);
            switch (tag >> 3)
            {
                // .protobuf.BulletType type = 1;
                case 1:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8))
                    {
                        uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
                        CHK_(ptr);
                        _internal_set_type(static_cast<::protobuf::BulletType>(val));
                    }
                    else
                        goto handle_unusual;
                    continue;
                // int32 x = 2;
                case 2:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16))
                    {
                        _impl_.x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
                        CHK_(ptr);
                    }
                    else
                        goto handle_unusual;
                    continue;
                // int32 y = 3;
                case 3:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24))
                    {
                        _impl_.y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
                        CHK_(ptr);
                    }
                    else
                        goto handle_unusual;
                    continue;
                // double facing_direction = 4;
                case 4:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33))
                    {
                        _impl_.facing_direction_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
                        ptr += sizeof(double);
                    }
                    else
                        goto handle_unusual;
                    continue;
                // int64 mapping_id = 5;
                case 5:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40))
                    {
                        _impl_.mapping_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
                        CHK_(ptr);
                    }
                    else
                        goto handle_unusual;
                    continue;
                // double bomb_range = 6;
                case 6:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 49))
                    {
                        _impl_.bomb_range_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
                        ptr += sizeof(double);
                    }
                    else
                        goto handle_unusual;
                    continue;
                default:
                    goto handle_unusual;
            }  // switch
        handle_unusual:
            if ((tag == 0) || ((tag & 7) == 4))
            {
                CHK_(ptr);
                ctx->SetLastTag(tag);
                goto message_done;
            }
            ptr = UnknownFieldParse(
                tag,
                _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
                ptr,
                ctx
            );
            CHK_(ptr != nullptr);
        }  // while
    message_done:
        return ptr;
    failure:
        ptr = nullptr;
        goto message_done;
#undef CHK_
    }

    uint8_t* MessageOfBombedBullet::_InternalSerialize(
        uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream
    ) const
    {
        // @@protoc_insertion_point(serialize_to_array_start:protobuf.MessageOfBombedBullet)
        uint32_t cached_has_bits = 0;
        (void)cached_has_bits;

        // .protobuf.BulletType type = 1;
        if (this->_internal_type() != 0)
        {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                1, this->_internal_type(), target
            );
        }

        // int32 x = 2;
        if (this->_internal_x() != 0)
        {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_x(), target);
        }

        // int32 y = 3;
        if (this->_internal_y() != 0)
        {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_y(), target);
        }

        // double facing_direction = 4;
        static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
        double tmp_facing_direction = this->_internal_facing_direction();
        uint64_t raw_facing_direction;
        memcpy(&raw_facing_direction, &tmp_facing_direction, sizeof(tmp_facing_direction));
        if (raw_facing_direction != 0)
        {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(4, this->_internal_facing_direction(), target);
        }

        // int64 mapping_id = 5;
        if (this->_internal_mapping_id() != 0)
        {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt64ToArray(5, this->_internal_mapping_id(), target);
        }

        // double bomb_range = 6;
        static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
        double tmp_bomb_range = this->_internal_bomb_range();
        uint64_t raw_bomb_range;
        memcpy(&raw_bomb_range, &tmp_bomb_range, sizeof(tmp_bomb_range));
        if (raw_bomb_range != 0)
        {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(6, this->_internal_bomb_range(), target);
        }

        if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields()))
        {
            target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream
            );
        }
        // @@protoc_insertion_point(serialize_to_array_end:protobuf.MessageOfBombedBullet)
        return target;
    }

    size_t MessageOfBombedBullet::ByteSizeLong() const
    {
        // @@protoc_insertion_point(message_byte_size_start:protobuf.MessageOfBombedBullet)
        size_t total_size = 0;

        uint32_t cached_has_bits = 0;
        // Prevent compiler warnings about cached_has_bits being unused
        (void)cached_has_bits;

        // .protobuf.BulletType type = 1;
        if (this->_internal_type() != 0)
        {
            total_size += 1 +
                          ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
        }

        // int32 x = 2;
        if (this->_internal_x() != 0)
        {
            total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_x());
        }

        // double facing_direction = 4;
        static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
        double tmp_facing_direction = this->_internal_facing_direction();
        uint64_t raw_facing_direction;
        memcpy(&raw_facing_direction, &tmp_facing_direction, sizeof(tmp_facing_direction));
        if (raw_facing_direction != 0)
        {
            total_size += 1 + 8;
        }

        // int64 mapping_id = 5;
        if (this->_internal_mapping_id() != 0)
        {
            total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_mapping_id());
        }

        // double bomb_range = 6;
        static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
        double tmp_bomb_range = this->_internal_bomb_range();
        uint64_t raw_bomb_range;
        memcpy(&raw_bomb_range, &tmp_bomb_range, sizeof(tmp_bomb_range));
        if (raw_bomb_range != 0)
        {
            total_size += 1 + 8;
        }

        // int32 y = 3;
        if (this->_internal_y() != 0)
        {
            total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_y());
        }

        return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
    }

    const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MessageOfBombedBullet::_class_data_ = {
        ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
        MessageOfBombedBullet::MergeImpl};
    const ::PROTOBUF_NAMESPACE_ID::Message::ClassData* MessageOfBombedBullet::GetClassData() const
    {
        return &_class_data_;
    }

    void MessageOfBombedBullet::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg)
    {
        auto* const _this = static_cast<MessageOfBombedBullet*>(&to_msg);
        auto& from = static_cast<const MessageOfBombedBullet&>(from_msg);
        // @@protoc_insertion_point(class_specific_merge_from_start:protobuf.MessageOfBombedBullet)
        GOOGLE_DCHECK_NE(&from, _this);
        uint32_t cached_has_bits = 0;
        (void)cached_has_bits;

        if (from._internal_type() != 0)
        {
            _this->_internal_set_type(from._internal_type());
        }
        if (from._internal_x() != 0)
        {
            _this->_internal_set_x(from._internal_x());
        }
        static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
        double tmp_facing_direction = from._internal_facing_direction();
        uint64_t raw_facing_direction;
        memcpy(&raw_facing_direction, &tmp_facing_direction, sizeof(tmp_facing_direction));
        if (raw_facing_direction != 0)
        {
            _this->_internal_set_facing_direction(from._internal_facing_direction());
        }
        if (from._internal_mapping_id() != 0)
        {
            _this->_internal_set_mapping_id(from._internal_mapping_id());
        }
        static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
        double tmp_bomb_range = from._internal_bomb_range();
        uint64_t raw_bomb_range;
        memcpy(&raw_bomb_range, &tmp_bomb_range, sizeof(tmp_bomb_range));
        if (raw_bomb_range != 0)
        {
            _this->_internal_set_bomb_range(from._internal_bomb_range());
        }
        if (from._internal_y() != 0)
        {
            _this->_internal_set_y(from._internal_y());
        }
        _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
    }

    void MessageOfBombedBullet::CopyFrom(const MessageOfBombedBullet& from)
    {
        // @@protoc_insertion_point(class_specific_copy_from_start:protobuf.MessageOfBombedBullet)
        if (&from == this)
            return;
        Clear();
        MergeFrom(from);
    }

    bool MessageOfBombedBullet::IsInitialized() const
    {
        return true;
    }

    void MessageOfBombedBullet::InternalSwap(MessageOfBombedBullet* other)
    {
        using std::swap;
        _internal_metadata_.InternalSwap(&other->_internal_metadata_);
        ::PROTOBUF_NAMESPACE_ID::internal::memswap<
            PROTOBUF_FIELD_OFFSET(MessageOfBombedBullet, _impl_.y_) + sizeof(MessageOfBombedBullet::_impl_.y_) - PROTOBUF_FIELD_OFFSET(MessageOfBombedBullet, _impl_.type_)>(
            reinterpret_cast<char*>(&_impl_.type_),
            reinterpret_cast<char*>(&other->_impl_.type_)
        );
    }

    ::PROTOBUF_NAMESPACE_ID::Metadata MessageOfBombedBullet::GetMetadata() const
    {
        return ::_pbi::AssignDescriptors(
            &descriptor_table_Message2Clients_2eproto_getter, &descriptor_table_Message2Clients_2eproto_once, file_level_metadata_Message2Clients_2eproto[2]
        );
    }

    // ===================================================================

    class MessageOfRecycleBank::_Internal
    {
    public:
    };

    MessageOfRecycleBank::MessageOfRecycleBank(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned) :
        ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned)
    {
        SharedCtor(arena, is_message_owned);
        // @@protoc_insertion_point(arena_constructor:protobuf.MessageOfRecycleBank)
    }
    MessageOfRecycleBank::MessageOfRecycleBank(const MessageOfRecycleBank& from) :
        ::PROTOBUF_NAMESPACE_ID::Message()
    {
        MessageOfRecycleBank* const _this = this;
        (void)_this;
        new (&_impl_) Impl_{
            decltype(_impl_.x_){}, decltype(_impl_.y_){}, decltype(_impl_.team_id_){}, decltype(_impl_.hp_){}, /*decltype(_impl_._cached_size_)*/ {}};

        _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
        ::memcpy(&_impl_.x_, &from._impl_.x_, static_cast<size_t>(reinterpret_cast<char*>(&_impl_.hp_) - reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.hp_));
        // @@protoc_insertion_point(copy_constructor:protobuf.MessageOfRecycleBank)
    }

    inline void MessageOfRecycleBank::SharedCtor(
        ::_pb::Arena* arena, bool is_message_owned
    )
    {
        (void)arena;
        (void)is_message_owned;
        new (&_impl_) Impl_{
            decltype(_impl_.x_){0}, decltype(_impl_.y_){0}, decltype(_impl_.team_id_){int64_t{0}}, decltype(_impl_.hp_){0}, /*decltype(_impl_._cached_size_)*/ {}};
    }

    MessageOfRecycleBank::~MessageOfRecycleBank()
    {
        // @@protoc_insertion_point(destructor:protobuf.MessageOfRecycleBank)
        if (auto* arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>())
        {
            (void)arena;
            return;
        }
        SharedDtor();
    }

    inline void MessageOfRecycleBank::SharedDtor()
    {
        GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
    }

    void MessageOfRecycleBank::SetCachedSize(int size) const
    {
        _impl_._cached_size_.Set(size);
    }

    void MessageOfRecycleBank::Clear()
    {
        // @@protoc_insertion_point(message_clear_start:protobuf.MessageOfRecycleBank)
        uint32_t cached_has_bits = 0;
        // Prevent compiler warnings about cached_has_bits being unused
        (void)cached_has_bits;

        ::memset(&_impl_.x_, 0, static_cast<size_t>(reinterpret_cast<char*>(&_impl_.hp_) - reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.hp_));
        _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
    }

    const char* MessageOfRecycleBank::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx)
    {
#define CHK_(x)                       \
    if (PROTOBUF_PREDICT_FALSE(!(x))) \
    goto failure
        while (!ctx->Done(&ptr))
        {
            uint32_t tag;
            ptr = ::_pbi::ReadTag(ptr, &tag);
            switch (tag >> 3)
            {
                // int32 x = 1;
                case 1:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8))
                    {
                        _impl_.x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
                        CHK_(ptr);
                    }
                    else
                        goto handle_unusual;
                    continue;
                // int32 y = 2;
                case 2:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16))
                    {
                        _impl_.y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
                        CHK_(ptr);
                    }
                    else
                        goto handle_unusual;
                    continue;
                // int32 hp = 3;
                case 3:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24))
                    {
                        _impl_.hp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
                        CHK_(ptr);
                    }
                    else
                        goto handle_unusual;
                    continue;
                // int64 team_id = 4;
                case 4:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32))
                    {
                        _impl_.team_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
                        CHK_(ptr);
                    }
                    else
                        goto handle_unusual;
                    continue;
                default:
                    goto handle_unusual;
            }  // switch
        handle_unusual:
            if ((tag == 0) || ((tag & 7) == 4))
            {
                CHK_(ptr);
                ctx->SetLastTag(tag);
                goto message_done;
            }
            ptr = UnknownFieldParse(
                tag,
                _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
                ptr,
                ctx
            );
            CHK_(ptr != nullptr);
        }  // while
    message_done:
        return ptr;
    failure:
        ptr = nullptr;
        goto message_done;
#undef CHK_
    }

    uint8_t* MessageOfRecycleBank::_InternalSerialize(
        uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream
    ) const
    {
        // @@protoc_insertion_point(serialize_to_array_start:protobuf.MessageOfRecycleBank)
        uint32_t cached_has_bits = 0;
        (void)cached_has_bits;

        // int32 x = 1;
        if (this->_internal_x() != 0)
        {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_x(), target);
        }

        // int32 y = 2;
        if (this->_internal_y() != 0)
        {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_y(), target);
        }

        // int32 hp = 3;
        if (this->_internal_hp() != 0)
        {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_hp(), target);
        }

        // int64 team_id = 4;
        if (this->_internal_team_id() != 0)
        {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_team_id(), target);
        }

        if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields()))
        {
            target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream
            );
        }
        // @@protoc_insertion_point(serialize_to_array_end:protobuf.MessageOfRecycleBank)
        return target;
    }

    size_t MessageOfRecycleBank::ByteSizeLong() const
    {
        // @@protoc_insertion_point(message_byte_size_start:protobuf.MessageOfRecycleBank)
        size_t total_size = 0;

        uint32_t cached_has_bits = 0;
        // Prevent compiler warnings about cached_has_bits being unused
        (void)cached_has_bits;

        // int32 x = 1;
        if (this->_internal_x() != 0)
        {
            total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_x());
        }

        // int32 y = 2;
        if (this->_internal_y() != 0)
        {
            total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_y());
        }

        // int64 team_id = 4;
        if (this->_internal_team_id() != 0)
        {
            total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_team_id());
        }

        // int32 hp = 3;
        if (this->_internal_hp() != 0)
        {
            total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_hp());
        }

        return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
    }

    const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MessageOfRecycleBank::_class_data_ = {
        ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
        MessageOfRecycleBank::MergeImpl};
    const ::PROTOBUF_NAMESPACE_ID::Message::ClassData* MessageOfRecycleBank::GetClassData() const
    {
        return &_class_data_;
    }

    void MessageOfRecycleBank::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg)
    {
        auto* const _this = static_cast<MessageOfRecycleBank*>(&to_msg);
        auto& from = static_cast<const MessageOfRecycleBank&>(from_msg);
        // @@protoc_insertion_point(class_specific_merge_from_start:protobuf.MessageOfRecycleBank)
        GOOGLE_DCHECK_NE(&from, _this);
        uint32_t cached_has_bits = 0;
        (void)cached_has_bits;

        if (from._internal_x() != 0)
        {
            _this->_internal_set_x(from._internal_x());
        }
        if (from._internal_y() != 0)
        {
            _this->_internal_set_y(from._internal_y());
        }
        if (from._internal_team_id() != 0)
        {
            _this->_internal_set_team_id(from._internal_team_id());
        }
        if (from._internal_hp() != 0)
        {
            _this->_internal_set_hp(from._internal_hp());
        }
        _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
    }

    void MessageOfRecycleBank::CopyFrom(const MessageOfRecycleBank& from)
    {
        // @@protoc_insertion_point(class_specific_copy_from_start:protobuf.MessageOfRecycleBank)
        if (&from == this)
            return;
        Clear();
        MergeFrom(from);
    }

    bool MessageOfRecycleBank::IsInitialized() const
    {
        return true;
    }

    void MessageOfRecycleBank::InternalSwap(MessageOfRecycleBank* other)
    {
        using std::swap;
        _internal_metadata_.InternalSwap(&other->_internal_metadata_);
        ::PROTOBUF_NAMESPACE_ID::internal::memswap<
            PROTOBUF_FIELD_OFFSET(MessageOfRecycleBank, _impl_.hp_) + sizeof(MessageOfRecycleBank::_impl_.hp_) - PROTOBUF_FIELD_OFFSET(MessageOfRecycleBank, _impl_.x_)>(
            reinterpret_cast<char*>(&_impl_.x_),
            reinterpret_cast<char*>(&other->_impl_.x_)
        );
    }

    ::PROTOBUF_NAMESPACE_ID::Metadata MessageOfRecycleBank::GetMetadata() const
    {
        return ::_pbi::AssignDescriptors(
            &descriptor_table_Message2Clients_2eproto_getter, &descriptor_table_Message2Clients_2eproto_once, file_level_metadata_Message2Clients_2eproto[3]
        );
    }

    // ===================================================================

    class MessageOfChargeStation::_Internal
    {
    public:
    };

    MessageOfChargeStation::MessageOfChargeStation(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned) :
        ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned)
    {
        SharedCtor(arena, is_message_owned);
        // @@protoc_insertion_point(arena_constructor:protobuf.MessageOfChargeStation)
    }
    MessageOfChargeStation::MessageOfChargeStation(const MessageOfChargeStation& from) :
        ::PROTOBUF_NAMESPACE_ID::Message()
    {
        MessageOfChargeStation* const _this = this;
        (void)_this;
        new (&_impl_) Impl_{
            decltype(_impl_.x_){}, decltype(_impl_.y_){}, decltype(_impl_.team_id_){}, decltype(_impl_.hp_){}, /*decltype(_impl_._cached_size_)*/ {}};

        _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
        ::memcpy(&_impl_.x_, &from._impl_.x_, static_cast<size_t>(reinterpret_cast<char*>(&_impl_.hp_) - reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.hp_));
        // @@protoc_insertion_point(copy_constructor:protobuf.MessageOfChargeStation)
    }

    inline void MessageOfChargeStation::SharedCtor(
        ::_pb::Arena* arena, bool is_message_owned
    )
    {
        (void)arena;
        (void)is_message_owned;
        new (&_impl_) Impl_{
            decltype(_impl_.x_){0}, decltype(_impl_.y_){0}, decltype(_impl_.team_id_){int64_t{0}}, decltype(_impl_.hp_){0}, /*decltype(_impl_._cached_size_)*/ {}};
    }

    MessageOfChargeStation::~MessageOfChargeStation()
    {
        // @@protoc_insertion_point(destructor:protobuf.MessageOfChargeStation)
        if (auto* arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>())
        {
            (void)arena;
            return;
        }
        SharedDtor();
    }

    inline void MessageOfChargeStation::SharedDtor()
    {
        GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
    }

    void MessageOfChargeStation::SetCachedSize(int size) const
    {
        _impl_._cached_size_.Set(size);
    }

    void MessageOfChargeStation::Clear()
    {
        // @@protoc_insertion_point(message_clear_start:protobuf.MessageOfChargeStation)
        uint32_t cached_has_bits = 0;
        // Prevent compiler warnings about cached_has_bits being unused
        (void)cached_has_bits;

        ::memset(&_impl_.x_, 0, static_cast<size_t>(reinterpret_cast<char*>(&_impl_.hp_) - reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.hp_));
        _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
    }

    const char* MessageOfChargeStation::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx)
    {
#define CHK_(x)                       \
    if (PROTOBUF_PREDICT_FALSE(!(x))) \
    goto failure
        while (!ctx->Done(&ptr))
        {
            uint32_t tag;
            ptr = ::_pbi::ReadTag(ptr, &tag);
            switch (tag >> 3)
            {
                // int32 x = 1;
                case 1:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8))
                    {
                        _impl_.x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
                        CHK_(ptr);
                    }
                    else
                        goto handle_unusual;
                    continue;
                // int32 y = 2;
                case 2:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16))
                    {
                        _impl_.y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
                        CHK_(ptr);
                    }
                    else
                        goto handle_unusual;
                    continue;
                // int32 hp = 3;
                case 3:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24))
                    {
                        _impl_.hp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
                        CHK_(ptr);
                    }
                    else
                        goto handle_unusual;
                    continue;
                // int64 team_id = 4;
                case 4:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32))
                    {
                        _impl_.team_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
                        CHK_(ptr);
                    }
                    else
                        goto handle_unusual;
                    continue;
                default:
                    goto handle_unusual;
            }  // switch
        handle_unusual:
            if ((tag == 0) || ((tag & 7) == 4))
            {
                CHK_(ptr);
                ctx->SetLastTag(tag);
                goto message_done;
            }
            ptr = UnknownFieldParse(
                tag,
                _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
                ptr,
                ctx
            );
            CHK_(ptr != nullptr);
        }  // while
    message_done:
        return ptr;
    failure:
        ptr = nullptr;
        goto message_done;
#undef CHK_
    }

    uint8_t* MessageOfChargeStation::_InternalSerialize(
        uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream
    ) const
    {
        // @@protoc_insertion_point(serialize_to_array_start:protobuf.MessageOfChargeStation)
        uint32_t cached_has_bits = 0;
        (void)cached_has_bits;

        // int32 x = 1;
        if (this->_internal_x() != 0)
        {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_x(), target);
        }

        // int32 y = 2;
        if (this->_internal_y() != 0)
        {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_y(), target);
        }

        // int32 hp = 3;
        if (this->_internal_hp() != 0)
        {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_hp(), target);
        }

        // int64 team_id = 4;
        if (this->_internal_team_id() != 0)
        {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_team_id(), target);
        }

        if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields()))
        {
            target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream
            );
        }
        // @@protoc_insertion_point(serialize_to_array_end:protobuf.MessageOfChargeStation)
        return target;
    }

    size_t MessageOfChargeStation::ByteSizeLong() const
    {
        // @@protoc_insertion_point(message_byte_size_start:protobuf.MessageOfChargeStation)
        size_t total_size = 0;

        uint32_t cached_has_bits = 0;
        // Prevent compiler warnings about cached_has_bits being unused
        (void)cached_has_bits;

        // int32 x = 1;
        if (this->_internal_x() != 0)
        {
            total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_x());
        }

        // int32 y = 2;
        if (this->_internal_y() != 0)
        {
            total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_y());
        }

        // int64 team_id = 4;
        if (this->_internal_team_id() != 0)
        {
            total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_team_id());
        }

        // int32 hp = 3;
        if (this->_internal_hp() != 0)
        {
            total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_hp());
        }

        return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
    }

    const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MessageOfChargeStation::_class_data_ = {
        ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
        MessageOfChargeStation::MergeImpl};
    const ::PROTOBUF_NAMESPACE_ID::Message::ClassData* MessageOfChargeStation::GetClassData() const
    {
        return &_class_data_;
    }

    void MessageOfChargeStation::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg)
    {
        auto* const _this = static_cast<MessageOfChargeStation*>(&to_msg);
        auto& from = static_cast<const MessageOfChargeStation&>(from_msg);
        // @@protoc_insertion_point(class_specific_merge_from_start:protobuf.MessageOfChargeStation)
        GOOGLE_DCHECK_NE(&from, _this);
        uint32_t cached_has_bits = 0;
        (void)cached_has_bits;

        if (from._internal_x() != 0)
        {
            _this->_internal_set_x(from._internal_x());
        }
        if (from._internal_y() != 0)
        {
            _this->_internal_set_y(from._internal_y());
        }
        if (from._internal_team_id() != 0)
        {
            _this->_internal_set_team_id(from._internal_team_id());
        }
        if (from._internal_hp() != 0)
        {
            _this->_internal_set_hp(from._internal_hp());
        }
        _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
    }

    void MessageOfChargeStation::CopyFrom(const MessageOfChargeStation& from)
    {
        // @@protoc_insertion_point(class_specific_copy_from_start:protobuf.MessageOfChargeStation)
        if (&from == this)
            return;
        Clear();
        MergeFrom(from);
    }

    bool MessageOfChargeStation::IsInitialized() const
    {
        return true;
    }

    void MessageOfChargeStation::InternalSwap(MessageOfChargeStation* other)
    {
        using std::swap;
        _internal_metadata_.InternalSwap(&other->_internal_metadata_);
        ::PROTOBUF_NAMESPACE_ID::internal::memswap<
            PROTOBUF_FIELD_OFFSET(MessageOfChargeStation, _impl_.hp_) + sizeof(MessageOfChargeStation::_impl_.hp_) - PROTOBUF_FIELD_OFFSET(MessageOfChargeStation, _impl_.x_)>(
            reinterpret_cast<char*>(&_impl_.x_),
            reinterpret_cast<char*>(&other->_impl_.x_)
        );
    }

    ::PROTOBUF_NAMESPACE_ID::Metadata MessageOfChargeStation::GetMetadata() const
    {
        return ::_pbi::AssignDescriptors(
            &descriptor_table_Message2Clients_2eproto_getter, &descriptor_table_Message2Clients_2eproto_once, file_level_metadata_Message2Clients_2eproto[4]
        );
    }

    // ===================================================================

    class MessageOfSignalTower::_Internal
    {
    public:
    };

    MessageOfSignalTower::MessageOfSignalTower(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned) :
        ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned)
    {
        SharedCtor(arena, is_message_owned);
        // @@protoc_insertion_point(arena_constructor:protobuf.MessageOfSignalTower)
    }
    MessageOfSignalTower::MessageOfSignalTower(const MessageOfSignalTower& from) :
        ::PROTOBUF_NAMESPACE_ID::Message()
    {
        MessageOfSignalTower* const _this = this;
        (void)_this;
        new (&_impl_) Impl_{
            decltype(_impl_.x_){}, decltype(_impl_.y_){}, decltype(_impl_.team_id_){}, decltype(_impl_.hp_){}, /*decltype(_impl_._cached_size_)*/ {}};

        _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
        ::memcpy(&_impl_.x_, &from._impl_.x_, static_cast<size_t>(reinterpret_cast<char*>(&_impl_.hp_) - reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.hp_));
        // @@protoc_insertion_point(copy_constructor:protobuf.MessageOfSignalTower)
    }

    inline void MessageOfSignalTower::SharedCtor(
        ::_pb::Arena* arena, bool is_message_owned
    )
    {
        (void)arena;
        (void)is_message_owned;
        new (&_impl_) Impl_{
            decltype(_impl_.x_){0}, decltype(_impl_.y_){0}, decltype(_impl_.team_id_){int64_t{0}}, decltype(_impl_.hp_){0}, /*decltype(_impl_._cached_size_)*/ {}};
    }

    MessageOfSignalTower::~MessageOfSignalTower()
    {
        // @@protoc_insertion_point(destructor:protobuf.MessageOfSignalTower)
        if (auto* arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>())
        {
            (void)arena;
            return;
        }
        SharedDtor();
    }

    inline void MessageOfSignalTower::SharedDtor()
    {
        GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
    }

    void MessageOfSignalTower::SetCachedSize(int size) const
    {
        _impl_._cached_size_.Set(size);
    }

    void MessageOfSignalTower::Clear()
    {
        // @@protoc_insertion_point(message_clear_start:protobuf.MessageOfSignalTower)
        uint32_t cached_has_bits = 0;
        // Prevent compiler warnings about cached_has_bits being unused
        (void)cached_has_bits;

        ::memset(&_impl_.x_, 0, static_cast<size_t>(reinterpret_cast<char*>(&_impl_.hp_) - reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.hp_));
        _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
    }

    const char* MessageOfSignalTower::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx)
    {
#define CHK_(x)                       \
    if (PROTOBUF_PREDICT_FALSE(!(x))) \
    goto failure
        while (!ctx->Done(&ptr))
        {
            uint32_t tag;
            ptr = ::_pbi::ReadTag(ptr, &tag);
            switch (tag >> 3)
            {
                // int32 x = 1;
                case 1:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8))
                    {
                        _impl_.x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
                        CHK_(ptr);
                    }
                    else
                        goto handle_unusual;
                    continue;
                // int32 y = 2;
                case 2:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16))
                    {
                        _impl_.y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
                        CHK_(ptr);
                    }
                    else
                        goto handle_unusual;
                    continue;
                // int32 hp = 3;
                case 3:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24))
                    {
                        _impl_.hp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
                        CHK_(ptr);
                    }
                    else
                        goto handle_unusual;
                    continue;
                // int64 team_id = 4;
                case 4:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32))
                    {
                        _impl_.team_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
                        CHK_(ptr);
                    }
                    else
                        goto handle_unusual;
                    continue;
                default:
                    goto handle_unusual;
            }  // switch
        handle_unusual:
            if ((tag == 0) || ((tag & 7) == 4))
            {
                CHK_(ptr);
                ctx->SetLastTag(tag);
                goto message_done;
            }
            ptr = UnknownFieldParse(
                tag,
                _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
                ptr,
                ctx
            );
            CHK_(ptr != nullptr);
        }  // while
    message_done:
        return ptr;
    failure:
        ptr = nullptr;
        goto message_done;
#undef CHK_
    }

    uint8_t* MessageOfSignalTower::_InternalSerialize(
        uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream
    ) const
    {
        // @@protoc_insertion_point(serialize_to_array_start:protobuf.MessageOfSignalTower)
        uint32_t cached_has_bits = 0;
        (void)cached_has_bits;

        // int32 x = 1;
        if (this->_internal_x() != 0)
        {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_x(), target);
        }

        // int32 y = 2;
        if (this->_internal_y() != 0)
        {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_y(), target);
        }

        // int32 hp = 3;
        if (this->_internal_hp() != 0)
        {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_hp(), target);
        }

        // int64 team_id = 4;
        if (this->_internal_team_id() != 0)
        {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_team_id(), target);
        }

        if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields()))
        {
            target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream
            );
        }
        // @@protoc_insertion_point(serialize_to_array_end:protobuf.MessageOfSignalTower)
        return target;
    }

    size_t MessageOfSignalTower::ByteSizeLong() const
    {
        // @@protoc_insertion_point(message_byte_size_start:protobuf.MessageOfSignalTower)
        size_t total_size = 0;

        uint32_t cached_has_bits = 0;
        // Prevent compiler warnings about cached_has_bits being unused
        (void)cached_has_bits;

        // int32 x = 1;
        if (this->_internal_x() != 0)
        {
            total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_x());
        }

        // int32 y = 2;
        if (this->_internal_y() != 0)
        {
            total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_y());
        }

        // int64 team_id = 4;
        if (this->_internal_team_id() != 0)
        {
            total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_team_id());
        }

        // int32 hp = 3;
        if (this->_internal_hp() != 0)
        {
            total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_hp());
        }

        return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
    }

    const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MessageOfSignalTower::_class_data_ = {
        ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
        MessageOfSignalTower::MergeImpl};
    const ::PROTOBUF_NAMESPACE_ID::Message::ClassData* MessageOfSignalTower::GetClassData() const
    {
        return &_class_data_;
    }

    void MessageOfSignalTower::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg)
    {
        auto* const _this = static_cast<MessageOfSignalTower*>(&to_msg);
        auto& from = static_cast<const MessageOfSignalTower&>(from_msg);
        // @@protoc_insertion_point(class_specific_merge_from_start:protobuf.MessageOfSignalTower)
        GOOGLE_DCHECK_NE(&from, _this);
        uint32_t cached_has_bits = 0;
        (void)cached_has_bits;

        if (from._internal_x() != 0)
        {
            _this->_internal_set_x(from._internal_x());
        }
        if (from._internal_y() != 0)
        {
            _this->_internal_set_y(from._internal_y());
        }
        if (from._internal_team_id() != 0)
        {
            _this->_internal_set_team_id(from._internal_team_id());
        }
        if (from._internal_hp() != 0)
        {
            _this->_internal_set_hp(from._internal_hp());
        }
        _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
    }

    void MessageOfSignalTower::CopyFrom(const MessageOfSignalTower& from)
    {
        // @@protoc_insertion_point(class_specific_copy_from_start:protobuf.MessageOfSignalTower)
        if (&from == this)
            return;
        Clear();
        MergeFrom(from);
    }

    bool MessageOfSignalTower::IsInitialized() const
    {
        return true;
    }

    void MessageOfSignalTower::InternalSwap(MessageOfSignalTower* other)
    {
        using std::swap;
        _internal_metadata_.InternalSwap(&other->_internal_metadata_);
        ::PROTOBUF_NAMESPACE_ID::internal::memswap<
            PROTOBUF_FIELD_OFFSET(MessageOfSignalTower, _impl_.hp_) + sizeof(MessageOfSignalTower::_impl_.hp_) - PROTOBUF_FIELD_OFFSET(MessageOfSignalTower, _impl_.x_)>(
            reinterpret_cast<char*>(&_impl_.x_),
            reinterpret_cast<char*>(&other->_impl_.x_)
        );
    }

    ::PROTOBUF_NAMESPACE_ID::Metadata MessageOfSignalTower::GetMetadata() const
    {
        return ::_pbi::AssignDescriptors(
            &descriptor_table_Message2Clients_2eproto_getter, &descriptor_table_Message2Clients_2eproto_once, file_level_metadata_Message2Clients_2eproto[5]
        );
    }

    // ===================================================================

    class MessageOfBridge::_Internal
    {
    public:
    };

    MessageOfBridge::MessageOfBridge(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned) :
        ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned)
    {
        SharedCtor(arena, is_message_owned);
        // @@protoc_insertion_point(arena_constructor:protobuf.MessageOfBridge)
    }
    MessageOfBridge::MessageOfBridge(const MessageOfBridge& from) :
        ::PROTOBUF_NAMESPACE_ID::Message()
    {
        MessageOfBridge* const _this = this;
        (void)_this;
        new (&_impl_) Impl_{
            decltype(_impl_.x_){}, decltype(_impl_.y_){}, decltype(_impl_.hp_){}, /*decltype(_impl_._cached_size_)*/ {}};

        _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
        ::memcpy(&_impl_.x_, &from._impl_.x_, static_cast<size_t>(reinterpret_cast<char*>(&_impl_.hp_) - reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.hp_));
        // @@protoc_insertion_point(copy_constructor:protobuf.MessageOfBridge)
    }

    inline void MessageOfBridge::SharedCtor(
        ::_pb::Arena* arena, bool is_message_owned
    )
    {
        (void)arena;
        (void)is_message_owned;
        new (&_impl_) Impl_{
            decltype(_impl_.x_){0}, decltype(_impl_.y_){0}, decltype(_impl_.hp_){0}, /*decltype(_impl_._cached_size_)*/ {}};
    }

    MessageOfBridge::~MessageOfBridge()
    {
        // @@protoc_insertion_point(destructor:protobuf.MessageOfBridge)
        if (auto* arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>())
        {
            (void)arena;
            return;
        }
        SharedDtor();
    }

    inline void MessageOfBridge::SharedDtor()
    {
        GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
    }

    void MessageOfBridge::SetCachedSize(int size) const
    {
        _impl_._cached_size_.Set(size);
    }

    void MessageOfBridge::Clear()
    {
        // @@protoc_insertion_point(message_clear_start:protobuf.MessageOfBridge)
        uint32_t cached_has_bits = 0;
        // Prevent compiler warnings about cached_has_bits being unused
        (void)cached_has_bits;

        ::memset(&_impl_.x_, 0, static_cast<size_t>(reinterpret_cast<char*>(&_impl_.hp_) - reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.hp_));
        _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
    }

    const char* MessageOfBridge::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx)
    {
#define CHK_(x)                       \
    if (PROTOBUF_PREDICT_FALSE(!(x))) \
    goto failure
        while (!ctx->Done(&ptr))
        {
            uint32_t tag;
            ptr = ::_pbi::ReadTag(ptr, &tag);
            switch (tag >> 3)
            {
                // int32 x = 1;
                case 1:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8))
                    {
                        _impl_.x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
                        CHK_(ptr);
                    }
                    else
                        goto handle_unusual;
                    continue;
                // int32 y = 2;
                case 2:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16))
                    {
                        _impl_.y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
                        CHK_(ptr);
                    }
                    else
                        goto handle_unusual;
                    continue;
                // int32 hp = 3;
                case 3:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24))
                    {
                        _impl_.hp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
                        CHK_(ptr);
                    }
                    else
                        goto handle_unusual;
                    continue;
                default:
                    goto handle_unusual;
            }  // switch
        handle_unusual:
            if ((tag == 0) || ((tag & 7) == 4))
            {
                CHK_(ptr);
                ctx->SetLastTag(tag);
                goto message_done;
            }
            ptr = UnknownFieldParse(
                tag,
                _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
                ptr,
                ctx
            );
            CHK_(ptr != nullptr);
        }  // while
    message_done:
        return ptr;
    failure:
        ptr = nullptr;
        goto message_done;
#undef CHK_
    }

    uint8_t* MessageOfBridge::_InternalSerialize(
        uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream
    ) const
    {
        // @@protoc_insertion_point(serialize_to_array_start:protobuf.MessageOfBridge)
        uint32_t cached_has_bits = 0;
        (void)cached_has_bits;

        // int32 x = 1;
        if (this->_internal_x() != 0)
        {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_x(), target);
        }

        // int32 y = 2;
        if (this->_internal_y() != 0)
        {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_y(), target);
        }

        // int32 hp = 3;
        if (this->_internal_hp() != 0)
        {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_hp(), target);
        }

        if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields()))
        {
            target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream
            );
        }
        // @@protoc_insertion_point(serialize_to_array_end:protobuf.MessageOfBridge)
        return target;
    }

    size_t MessageOfBridge::ByteSizeLong() const
    {
        // @@protoc_insertion_point(message_byte_size_start:protobuf.MessageOfBridge)
        size_t total_size = 0;

        uint32_t cached_has_bits = 0;
        // Prevent compiler warnings about cached_has_bits being unused
        (void)cached_has_bits;

        // int32 x = 1;
        if (this->_internal_x() != 0)
        {
            total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_x());
        }

        // int32 y = 2;
        if (this->_internal_y() != 0)
        {
            total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_y());
        }

        // int32 hp = 3;
        if (this->_internal_hp() != 0)
        {
            total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_hp());
        }

        return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
    }

    const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MessageOfBridge::_class_data_ = {
        ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
        MessageOfBridge::MergeImpl};
    const ::PROTOBUF_NAMESPACE_ID::Message::ClassData* MessageOfBridge::GetClassData() const
    {
        return &_class_data_;
    }

    void MessageOfBridge::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg)
    {
        auto* const _this = static_cast<MessageOfBridge*>(&to_msg);
        auto& from = static_cast<const MessageOfBridge&>(from_msg);
        // @@protoc_insertion_point(class_specific_merge_from_start:protobuf.MessageOfBridge)
        GOOGLE_DCHECK_NE(&from, _this);
        uint32_t cached_has_bits = 0;
        (void)cached_has_bits;

        if (from._internal_x() != 0)
        {
            _this->_internal_set_x(from._internal_x());
        }
        if (from._internal_y() != 0)
        {
            _this->_internal_set_y(from._internal_y());
        }
        if (from._internal_hp() != 0)
        {
            _this->_internal_set_hp(from._internal_hp());
        }
        _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
    }

    void MessageOfBridge::CopyFrom(const MessageOfBridge& from)
    {
        // @@protoc_insertion_point(class_specific_copy_from_start:protobuf.MessageOfBridge)
        if (&from == this)
            return;
        Clear();
        MergeFrom(from);
    }

    bool MessageOfBridge::IsInitialized() const
    {
        return true;
    }

    void MessageOfBridge::InternalSwap(MessageOfBridge* other)
    {
        using std::swap;
        _internal_metadata_.InternalSwap(&other->_internal_metadata_);
        ::PROTOBUF_NAMESPACE_ID::internal::memswap<
            PROTOBUF_FIELD_OFFSET(MessageOfBridge, _impl_.hp_) + sizeof(MessageOfBridge::_impl_.hp_) - PROTOBUF_FIELD_OFFSET(MessageOfBridge, _impl_.x_)>(
            reinterpret_cast<char*>(&_impl_.x_),
            reinterpret_cast<char*>(&other->_impl_.x_)
        );
    }

    ::PROTOBUF_NAMESPACE_ID::Metadata MessageOfBridge::GetMetadata() const
    {
        return ::_pbi::AssignDescriptors(
            &descriptor_table_Message2Clients_2eproto_getter, &descriptor_table_Message2Clients_2eproto_once, file_level_metadata_Message2Clients_2eproto[6]
        );
    }

    // ===================================================================

    class MessageOfGarbage::_Internal
    {
    public:
    };

    MessageOfGarbage::MessageOfGarbage(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned) :
        ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned)
    {
        SharedCtor(arena, is_message_owned);
        // @@protoc_insertion_point(arena_constructor:protobuf.MessageOfGarbage)
    }
    MessageOfGarbage::MessageOfGarbage(const MessageOfGarbage& from) :
        ::PROTOBUF_NAMESPACE_ID::Message()
    {
        MessageOfGarbage* const _this = this;
        (void)_this;
        new (&_impl_) Impl_{
            decltype(_impl_.x_){}, decltype(_impl_.y_){}, decltype(_impl_.progress_){}, /*decltype(_impl_._cached_size_)*/ {}};

        _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
        ::memcpy(&_impl_.x_, &from._impl_.x_, static_cast<size_t>(reinterpret_cast<char*>(&_impl_.progress_) - reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.progress_));
        // @@protoc_insertion_point(copy_constructor:protobuf.MessageOfGarbage)
    }

    inline void MessageOfGarbage::SharedCtor(
        ::_pb::Arena* arena, bool is_message_owned
    )
    {
        (void)arena;
        (void)is_message_owned;
        new (&_impl_) Impl_{
            decltype(_impl_.x_){0}, decltype(_impl_.y_){0}, decltype(_impl_.progress_){0}, /*decltype(_impl_._cached_size_)*/ {}};
    }

    MessageOfGarbage::~MessageOfGarbage()
    {
        // @@protoc_insertion_point(destructor:protobuf.MessageOfGarbage)
        if (auto* arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>())
        {
            (void)arena;
            return;
        }
        SharedDtor();
    }

    inline void MessageOfGarbage::SharedDtor()
    {
        GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
    }

    void MessageOfGarbage::SetCachedSize(int size) const
    {
        _impl_._cached_size_.Set(size);
    }

    void MessageOfGarbage::Clear()
    {
        // @@protoc_insertion_point(message_clear_start:protobuf.MessageOfGarbage)
        uint32_t cached_has_bits = 0;
        // Prevent compiler warnings about cached_has_bits being unused
        (void)cached_has_bits;

        ::memset(&_impl_.x_, 0, static_cast<size_t>(reinterpret_cast<char*>(&_impl_.progress_) - reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.progress_));
        _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
    }

    const char* MessageOfGarbage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx)
    {
#define CHK_(x)                       \
    if (PROTOBUF_PREDICT_FALSE(!(x))) \
    goto failure
        while (!ctx->Done(&ptr))
        {
            uint32_t tag;
            ptr = ::_pbi::ReadTag(ptr, &tag);
            switch (tag >> 3)
            {
                // int32 x = 1;
                case 1:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8))
                    {
                        _impl_.x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
                        CHK_(ptr);
                    }
                    else
                        goto handle_unusual;
                    continue;
                // int32 y = 2;
                case 2:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16))
                    {
                        _impl_.y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
                        CHK_(ptr);
                    }
                    else
                        goto handle_unusual;
                    continue;
                // int32 progress = 3;
                case 3:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24))
                    {
                        _impl_.progress_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
                        CHK_(ptr);
                    }
                    else
                        goto handle_unusual;
                    continue;
                default:
                    goto handle_unusual;
            }  // switch
        handle_unusual:
            if ((tag == 0) || ((tag & 7) == 4))
            {
                CHK_(ptr);
                ctx->SetLastTag(tag);
                goto message_done;
            }
            ptr = UnknownFieldParse(
                tag,
                _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
                ptr,
                ctx
            );
            CHK_(ptr != nullptr);
        }  // while
    message_done:
        return ptr;
    failure:
        ptr = nullptr;
        goto message_done;
#undef CHK_
    }

    uint8_t* MessageOfGarbage::_InternalSerialize(
        uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream
    ) const
    {
        // @@protoc_insertion_point(serialize_to_array_start:protobuf.MessageOfGarbage)
        uint32_t cached_has_bits = 0;
        (void)cached_has_bits;

        // int32 x = 1;
        if (this->_internal_x() != 0)
        {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_x(), target);
        }

        // int32 y = 2;
        if (this->_internal_y() != 0)
        {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_y(), target);
        }

        // int32 progress = 3;
        if (this->_internal_progress() != 0)
        {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_progress(), target);
        }

        if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields()))
        {
            target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream
            );
        }
        // @@protoc_insertion_point(serialize_to_array_end:protobuf.MessageOfGarbage)
        return target;
    }

    size_t MessageOfGarbage::ByteSizeLong() const
    {
        // @@protoc_insertion_point(message_byte_size_start:protobuf.MessageOfGarbage)
        size_t total_size = 0;

        uint32_t cached_has_bits = 0;
        // Prevent compiler warnings about cached_has_bits being unused
        (void)cached_has_bits;

        // int32 x = 1;
        if (this->_internal_x() != 0)
        {
            total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_x());
        }

        // int32 y = 2;
        if (this->_internal_y() != 0)
        {
            total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_y());
        }

        // int32 progress = 3;
        if (this->_internal_progress() != 0)
        {
            total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_progress());
        }

        return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
    }

    const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MessageOfGarbage::_class_data_ = {
        ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
        MessageOfGarbage::MergeImpl};
    const ::PROTOBUF_NAMESPACE_ID::Message::ClassData* MessageOfGarbage::GetClassData() const
    {
        return &_class_data_;
    }

    void MessageOfGarbage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg)
    {
        auto* const _this = static_cast<MessageOfGarbage*>(&to_msg);
        auto& from = static_cast<const MessageOfGarbage&>(from_msg);
        // @@protoc_insertion_point(class_specific_merge_from_start:protobuf.MessageOfGarbage)
        GOOGLE_DCHECK_NE(&from, _this);
        uint32_t cached_has_bits = 0;
        (void)cached_has_bits;

        if (from._internal_x() != 0)
        {
            _this->_internal_set_x(from._internal_x());
        }
        if (from._internal_y() != 0)
        {
            _this->_internal_set_y(from._internal_y());
        }
        if (from._internal_progress() != 0)
        {
            _this->_internal_set_progress(from._internal_progress());
        }
        _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
    }

    void MessageOfGarbage::CopyFrom(const MessageOfGarbage& from)
    {
        // @@protoc_insertion_point(class_specific_copy_from_start:protobuf.MessageOfGarbage)
        if (&from == this)
            return;
        Clear();
        MergeFrom(from);
    }

    bool MessageOfGarbage::IsInitialized() const
    {
        return true;
    }

    void MessageOfGarbage::InternalSwap(MessageOfGarbage* other)
    {
        using std::swap;
        _internal_metadata_.InternalSwap(&other->_internal_metadata_);
        ::PROTOBUF_NAMESPACE_ID::internal::memswap<
            PROTOBUF_FIELD_OFFSET(MessageOfGarbage, _impl_.progress_) + sizeof(MessageOfGarbage::_impl_.progress_) - PROTOBUF_FIELD_OFFSET(MessageOfGarbage, _impl_.x_)>(
            reinterpret_cast<char*>(&_impl_.x_),
            reinterpret_cast<char*>(&other->_impl_.x_)
        );
    }

    ::PROTOBUF_NAMESPACE_ID::Metadata MessageOfGarbage::GetMetadata() const
    {
        return ::_pbi::AssignDescriptors(
            &descriptor_table_Message2Clients_2eproto_getter, &descriptor_table_Message2Clients_2eproto_once, file_level_metadata_Message2Clients_2eproto[7]
        );
    }

    // ===================================================================

    class MessageOfHome::_Internal
    {
    public:
    };

    MessageOfHome::MessageOfHome(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned) :
        ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned)
    {
        SharedCtor(arena, is_message_owned);
        // @@protoc_insertion_point(arena_constructor:protobuf.MessageOfHome)
    }
    MessageOfHome::MessageOfHome(const MessageOfHome& from) :
        ::PROTOBUF_NAMESPACE_ID::Message()
    {
        MessageOfHome* const _this = this;
        (void)_this;
        new (&_impl_) Impl_{
            decltype(_impl_.x_){}, decltype(_impl_.y_){}, decltype(_impl_.team_id_){}, decltype(_impl_.hp_){}, /*decltype(_impl_._cached_size_)*/ {}};

        _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
        ::memcpy(&_impl_.x_, &from._impl_.x_, static_cast<size_t>(reinterpret_cast<char*>(&_impl_.hp_) - reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.hp_));
        // @@protoc_insertion_point(copy_constructor:protobuf.MessageOfHome)
    }

    inline void MessageOfHome::SharedCtor(
        ::_pb::Arena* arena, bool is_message_owned
    )
    {
        (void)arena;
        (void)is_message_owned;
        new (&_impl_) Impl_{
            decltype(_impl_.x_){0}, decltype(_impl_.y_){0}, decltype(_impl_.team_id_){int64_t{0}}, decltype(_impl_.hp_){0}, /*decltype(_impl_._cached_size_)*/ {}};
    }

    MessageOfHome::~MessageOfHome()
    {
        // @@protoc_insertion_point(destructor:protobuf.MessageOfHome)
        if (auto* arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>())
        {
            (void)arena;
            return;
        }
        SharedDtor();
    }

    inline void MessageOfHome::SharedDtor()
    {
        GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
    }

    void MessageOfHome::SetCachedSize(int size) const
    {
        _impl_._cached_size_.Set(size);
    }

    void MessageOfHome::Clear()
    {
        // @@protoc_insertion_point(message_clear_start:protobuf.MessageOfHome)
        uint32_t cached_has_bits = 0;
        // Prevent compiler warnings about cached_has_bits being unused
        (void)cached_has_bits;

        ::memset(&_impl_.x_, 0, static_cast<size_t>(reinterpret_cast<char*>(&_impl_.hp_) - reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.hp_));
        _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
    }

    const char* MessageOfHome::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx)
    {
#define CHK_(x)                       \
    if (PROTOBUF_PREDICT_FALSE(!(x))) \
    goto failure
        while (!ctx->Done(&ptr))
        {
            uint32_t tag;
            ptr = ::_pbi::ReadTag(ptr, &tag);
            switch (tag >> 3)
            {
                // int32 x = 1;
                case 1:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8))
                    {
                        _impl_.x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
                        CHK_(ptr);
                    }
                    else
                        goto handle_unusual;
                    continue;
                // int32 y = 2;
                case 2:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16))
                    {
                        _impl_.y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
                        CHK_(ptr);
                    }
                    else
                        goto handle_unusual;
                    continue;
                // int32 hp = 3;
                case 3:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24))
                    {
                        _impl_.hp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
                        CHK_(ptr);
                    }
                    else
                        goto handle_unusual;
                    continue;
                // int64 team_id = 4;
                case 4:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32))
                    {
                        _impl_.team_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
                        CHK_(ptr);
                    }
                    else
                        goto handle_unusual;
                    continue;
                default:
                    goto handle_unusual;
            }  // switch
        handle_unusual:
            if ((tag == 0) || ((tag & 7) == 4))
            {
                CHK_(ptr);
                ctx->SetLastTag(tag);
                goto message_done;
            }
            ptr = UnknownFieldParse(
                tag,
                _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
                ptr,
                ctx
            );
            CHK_(ptr != nullptr);
        }  // while
    message_done:
        return ptr;
    failure:
        ptr = nullptr;
        goto message_done;
#undef CHK_
    }

    uint8_t* MessageOfHome::_InternalSerialize(
        uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream
    ) const
    {
        // @@protoc_insertion_point(serialize_to_array_start:protobuf.MessageOfHome)
        uint32_t cached_has_bits = 0;
        (void)cached_has_bits;

        // int32 x = 1;
        if (this->_internal_x() != 0)
        {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_x(), target);
        }

        // int32 y = 2;
        if (this->_internal_y() != 0)
        {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_y(), target);
        }

        // int32 hp = 3;
        if (this->_internal_hp() != 0)
        {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_hp(), target);
        }

        // int64 team_id = 4;
        if (this->_internal_team_id() != 0)
        {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_team_id(), target);
        }

        if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields()))
        {
            target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream
            );
        }
        // @@protoc_insertion_point(serialize_to_array_end:protobuf.MessageOfHome)
        return target;
    }

    size_t MessageOfHome::ByteSizeLong() const
    {
        // @@protoc_insertion_point(message_byte_size_start:protobuf.MessageOfHome)
        size_t total_size = 0;

        uint32_t cached_has_bits = 0;
        // Prevent compiler warnings about cached_has_bits being unused
        (void)cached_has_bits;

        // int32 x = 1;
        if (this->_internal_x() != 0)
        {
            total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_x());
        }

        // int32 y = 2;
        if (this->_internal_y() != 0)
        {
            total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_y());
        }

        // int64 team_id = 4;
        if (this->_internal_team_id() != 0)
        {
            total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_team_id());
        }

        // int32 hp = 3;
        if (this->_internal_hp() != 0)
        {
            total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_hp());
        }

        return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
    }

    const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MessageOfHome::_class_data_ = {
        ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
        MessageOfHome::MergeImpl};
    const ::PROTOBUF_NAMESPACE_ID::Message::ClassData* MessageOfHome::GetClassData() const
    {
        return &_class_data_;
    }

    void MessageOfHome::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg)
    {
        auto* const _this = static_cast<MessageOfHome*>(&to_msg);
        auto& from = static_cast<const MessageOfHome&>(from_msg);
        // @@protoc_insertion_point(class_specific_merge_from_start:protobuf.MessageOfHome)
        GOOGLE_DCHECK_NE(&from, _this);
        uint32_t cached_has_bits = 0;
        (void)cached_has_bits;

        if (from._internal_x() != 0)
        {
            _this->_internal_set_x(from._internal_x());
        }
        if (from._internal_y() != 0)
        {
            _this->_internal_set_y(from._internal_y());
        }
        if (from._internal_team_id() != 0)
        {
            _this->_internal_set_team_id(from._internal_team_id());
        }
        if (from._internal_hp() != 0)
        {
            _this->_internal_set_hp(from._internal_hp());
        }
        _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
    }

    void MessageOfHome::CopyFrom(const MessageOfHome& from)
    {
        // @@protoc_insertion_point(class_specific_copy_from_start:protobuf.MessageOfHome)
        if (&from == this)
            return;
        Clear();
        MergeFrom(from);
    }

    bool MessageOfHome::IsInitialized() const
    {
        return true;
    }

    void MessageOfHome::InternalSwap(MessageOfHome* other)
    {
        using std::swap;
        _internal_metadata_.InternalSwap(&other->_internal_metadata_);
        ::PROTOBUF_NAMESPACE_ID::internal::memswap<
            PROTOBUF_FIELD_OFFSET(MessageOfHome, _impl_.hp_) + sizeof(MessageOfHome::_impl_.hp_) - PROTOBUF_FIELD_OFFSET(MessageOfHome, _impl_.x_)>(
            reinterpret_cast<char*>(&_impl_.x_),
            reinterpret_cast<char*>(&other->_impl_.x_)
        );
    }

    ::PROTOBUF_NAMESPACE_ID::Metadata MessageOfHome::GetMetadata() const
    {
        return ::_pbi::AssignDescriptors(
            &descriptor_table_Message2Clients_2eproto_getter, &descriptor_table_Message2Clients_2eproto_once, file_level_metadata_Message2Clients_2eproto[8]
        );
    }

    // ===================================================================

    class MessageOfMap_Row::_Internal
    {
    public:
    };

    MessageOfMap_Row::MessageOfMap_Row(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned) :
        ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned)
    {
        SharedCtor(arena, is_message_owned);
        // @@protoc_insertion_point(arena_constructor:protobuf.MessageOfMap.Row)
    }
    MessageOfMap_Row::MessageOfMap_Row(const MessageOfMap_Row& from) :
        ::PROTOBUF_NAMESPACE_ID::Message()
    {
        MessageOfMap_Row* const _this = this;
        (void)_this;
        new (&_impl_) Impl_{
            decltype(_impl_.cols_){from._impl_.cols_}, /*decltype(_impl_._cols_cached_byte_size_)*/ {0}, /*decltype(_impl_._cached_size_)*/ {}};

        _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
        // @@protoc_insertion_point(copy_constructor:protobuf.MessageOfMap.Row)
    }

    inline void MessageOfMap_Row::SharedCtor(
        ::_pb::Arena* arena, bool is_message_owned
    )
    {
        (void)arena;
        (void)is_message_owned;
        new (&_impl_) Impl_{
            decltype(_impl_.cols_){arena}, /*decltype(_impl_._cols_cached_byte_size_)*/ {0}, /*decltype(_impl_._cached_size_)*/ {}};
    }

    MessageOfMap_Row::~MessageOfMap_Row()
    {
        // @@protoc_insertion_point(destructor:protobuf.MessageOfMap.Row)
        if (auto* arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>())
        {
            (void)arena;
            return;
        }
        SharedDtor();
    }

    inline void MessageOfMap_Row::SharedDtor()
    {
        GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
        _impl_.cols_.~RepeatedField();
    }

    void MessageOfMap_Row::SetCachedSize(int size) const
    {
        _impl_._cached_size_.Set(size);
    }

    void MessageOfMap_Row::Clear()
    {
        // @@protoc_insertion_point(message_clear_start:protobuf.MessageOfMap.Row)
        uint32_t cached_has_bits = 0;
        // Prevent compiler warnings about cached_has_bits being unused
        (void)cached_has_bits;

        _impl_.cols_.Clear();
        _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
    }

    const char* MessageOfMap_Row::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx)
    {
#define CHK_(x)                       \
    if (PROTOBUF_PREDICT_FALSE(!(x))) \
    goto failure
        while (!ctx->Done(&ptr))
        {
            uint32_t tag;
            ptr = ::_pbi::ReadTag(ptr, &tag);
            switch (tag >> 3)
            {
                // repeated .protobuf.PlaceType cols = 1;
                case 1:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10))
                    {
                        ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser(_internal_mutable_cols(), ptr, ctx);
                        CHK_(ptr);
                    }
                    else if (static_cast<uint8_t>(tag) == 8)
                    {
                        uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
                        CHK_(ptr);
                        _internal_add_cols(static_cast<::protobuf::PlaceType>(val));
                    }
                    else
                        goto handle_unusual;
                    continue;
                default:
                    goto handle_unusual;
            }  // switch
        handle_unusual:
            if ((tag == 0) || ((tag & 7) == 4))
            {
                CHK_(ptr);
                ctx->SetLastTag(tag);
                goto message_done;
            }
            ptr = UnknownFieldParse(
                tag,
                _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
                ptr,
                ctx
            );
            CHK_(ptr != nullptr);
        }  // while
    message_done:
        return ptr;
    failure:
        ptr = nullptr;
        goto message_done;
#undef CHK_
    }

    uint8_t* MessageOfMap_Row::_InternalSerialize(
        uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream
    ) const
    {
        // @@protoc_insertion_point(serialize_to_array_start:protobuf.MessageOfMap.Row)
        uint32_t cached_has_bits = 0;
        (void)cached_has_bits;

        // repeated .protobuf.PlaceType cols = 1;
        {
            int byte_size = _impl_._cols_cached_byte_size_.load(std::memory_order_relaxed);
            if (byte_size > 0)
            {
                target = stream->WriteEnumPacked(
                    1, _impl_.cols_, byte_size, target
                );
            }
        }

        if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields()))
        {
            target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream
            );
        }
        // @@protoc_insertion_point(serialize_to_array_end:protobuf.MessageOfMap.Row)
        return target;
    }

    size_t MessageOfMap_Row::ByteSizeLong() const
    {
        // @@protoc_insertion_point(message_byte_size_start:protobuf.MessageOfMap.Row)
        size_t total_size = 0;

        uint32_t cached_has_bits = 0;
        // Prevent compiler warnings about cached_has_bits being unused
        (void)cached_has_bits;

        // repeated .protobuf.PlaceType cols = 1;
        {
            size_t data_size = 0;
            unsigned int count = static_cast<unsigned int>(this->_internal_cols_size());
            for (unsigned int i = 0; i < count; i++)
            {
                data_size += ::_pbi::WireFormatLite::EnumSize(
                    this->_internal_cols(static_cast<int>(i))
                );
            }
            if (data_size > 0)
            {
                total_size += 1 +
                              ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
            }
            int cached_size = ::_pbi::ToCachedSize(data_size);
            _impl_._cols_cached_byte_size_.store(cached_size, std::memory_order_relaxed);
            total_size += data_size;
        }

        return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
    }

    const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MessageOfMap_Row::_class_data_ = {
        ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
        MessageOfMap_Row::MergeImpl};
    const ::PROTOBUF_NAMESPACE_ID::Message::ClassData* MessageOfMap_Row::GetClassData() const
    {
        return &_class_data_;
    }

    void MessageOfMap_Row::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg)
    {
        auto* const _this = static_cast<MessageOfMap_Row*>(&to_msg);
        auto& from = static_cast<const MessageOfMap_Row&>(from_msg);
        // @@protoc_insertion_point(class_specific_merge_from_start:protobuf.MessageOfMap.Row)
        GOOGLE_DCHECK_NE(&from, _this);
        uint32_t cached_has_bits = 0;
        (void)cached_has_bits;

        _this->_impl_.cols_.MergeFrom(from._impl_.cols_);
        _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
    }

    void MessageOfMap_Row::CopyFrom(const MessageOfMap_Row& from)
    {
        // @@protoc_insertion_point(class_specific_copy_from_start:protobuf.MessageOfMap.Row)
        if (&from == this)
            return;
        Clear();
        MergeFrom(from);
    }

    bool MessageOfMap_Row::IsInitialized() const
    {
        return true;
    }

    void MessageOfMap_Row::InternalSwap(MessageOfMap_Row* other)
    {
        using std::swap;
        _internal_metadata_.InternalSwap(&other->_internal_metadata_);
        _impl_.cols_.InternalSwap(&other->_impl_.cols_);
    }

    ::PROTOBUF_NAMESPACE_ID::Metadata MessageOfMap_Row::GetMetadata() const
    {
        return ::_pbi::AssignDescriptors(
            &descriptor_table_Message2Clients_2eproto_getter, &descriptor_table_Message2Clients_2eproto_once, file_level_metadata_Message2Clients_2eproto[9]
        );
    }

    // ===================================================================

    class MessageOfMap::_Internal
    {
    public:
    };

    MessageOfMap::MessageOfMap(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned) :
        ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned)
    {
        SharedCtor(arena, is_message_owned);
        // @@protoc_insertion_point(arena_constructor:protobuf.MessageOfMap)
    }
    MessageOfMap::MessageOfMap(const MessageOfMap& from) :
        ::PROTOBUF_NAMESPACE_ID::Message()
    {
        MessageOfMap* const _this = this;
        (void)_this;
        new (&_impl_) Impl_{
            decltype(_impl_.rows_){from._impl_.rows_}, decltype(_impl_.height_){}, decltype(_impl_.width_){}, /*decltype(_impl_._cached_size_)*/ {}};

        _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
        ::memcpy(&_impl_.height_, &from._impl_.height_, static_cast<size_t>(reinterpret_cast<char*>(&_impl_.width_) - reinterpret_cast<char*>(&_impl_.height_)) + sizeof(_impl_.width_));
        // @@protoc_insertion_point(copy_constructor:protobuf.MessageOfMap)
    }

    inline void MessageOfMap::SharedCtor(
        ::_pb::Arena* arena, bool is_message_owned
    )
    {
        (void)arena;
        (void)is_message_owned;
        new (&_impl_) Impl_{
            decltype(_impl_.rows_){arena}, decltype(_impl_.height_){0u}, decltype(_impl_.width_){0u}, /*decltype(_impl_._cached_size_)*/ {}};
    }

    MessageOfMap::~MessageOfMap()
    {
        // @@protoc_insertion_point(destructor:protobuf.MessageOfMap)
        if (auto* arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>())
        {
            (void)arena;
            return;
        }
        SharedDtor();
    }

    inline void MessageOfMap::SharedDtor()
    {
        GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
        _impl_.rows_.~RepeatedPtrField();
    }

    void MessageOfMap::SetCachedSize(int size) const
    {
        _impl_._cached_size_.Set(size);
    }

    void MessageOfMap::Clear()
    {
        // @@protoc_insertion_point(message_clear_start:protobuf.MessageOfMap)
        uint32_t cached_has_bits = 0;
        // Prevent compiler warnings about cached_has_bits being unused
        (void)cached_has_bits;

        _impl_.rows_.Clear();
        ::memset(&_impl_.height_, 0, static_cast<size_t>(reinterpret_cast<char*>(&_impl_.width_) - reinterpret_cast<char*>(&_impl_.height_)) + sizeof(_impl_.width_));
        _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
    }

    const char* MessageOfMap::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx)
    {
#define CHK_(x)                       \
    if (PROTOBUF_PREDICT_FALSE(!(x))) \
    goto failure
        while (!ctx->Done(&ptr))
        {
            uint32_t tag;
            ptr = ::_pbi::ReadTag(ptr, &tag);
            switch (tag >> 3)
            {
                // uint32 height = 1;
                case 1:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8))
                    {
                        _impl_.height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
                        CHK_(ptr);
                    }
                    else
                        goto handle_unusual;
                    continue;
                // uint32 width = 2;
                case 2:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16))
                    {
                        _impl_.width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
                        CHK_(ptr);
                    }
                    else
                        goto handle_unusual;
                    continue;
                // repeated .protobuf.MessageOfMap.Row rows = 3;
                case 3:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26))
                    {
                        ptr -= 1;
                        do
                        {
                            ptr += 1;
                            ptr = ctx->ParseMessage(_internal_add_rows(), ptr);
                            CHK_(ptr);
                            if (!ctx->DataAvailable(ptr))
                                break;
                        } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
                    }
                    else
                        goto handle_unusual;
                    continue;
                default:
                    goto handle_unusual;
            }  // switch
        handle_unusual:
            if ((tag == 0) || ((tag & 7) == 4))
            {
                CHK_(ptr);
                ctx->SetLastTag(tag);
                goto message_done;
            }
            ptr = UnknownFieldParse(
                tag,
                _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
                ptr,
                ctx
            );
            CHK_(ptr != nullptr);
        }  // while
    message_done:
        return ptr;
    failure:
        ptr = nullptr;
        goto message_done;
#undef CHK_
    }

    uint8_t* MessageOfMap::_InternalSerialize(
        uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream
    ) const
    {
        // @@protoc_insertion_point(serialize_to_array_start:protobuf.MessageOfMap)
        uint32_t cached_has_bits = 0;
        (void)cached_has_bits;

        // uint32 height = 1;
        if (this->_internal_height() != 0)
        {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_height(), target);
        }

        // uint32 width = 2;
        if (this->_internal_width() != 0)
        {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_width(), target);
        }

        // repeated .protobuf.MessageOfMap.Row rows = 3;
        for (unsigned i = 0,
                      n = static_cast<unsigned>(this->_internal_rows_size());
             i < n;
             i++)
        {
            const auto& repfield = this->_internal_rows(i);
            target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
                InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
        }

        if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields()))
        {
            target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream
            );
        }
        // @@protoc_insertion_point(serialize_to_array_end:protobuf.MessageOfMap)
        return target;
    }

    size_t MessageOfMap::ByteSizeLong() const
    {
        // @@protoc_insertion_point(message_byte_size_start:protobuf.MessageOfMap)
        size_t total_size = 0;

        uint32_t cached_has_bits = 0;
        // Prevent compiler warnings about cached_has_bits being unused
        (void)cached_has_bits;

        // repeated .protobuf.MessageOfMap.Row rows = 3;
        total_size += 1UL * this->_internal_rows_size();
        for (const auto& msg : this->_impl_.rows_)
        {
            total_size +=
                ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
        }

        // uint32 height = 1;
        if (this->_internal_height() != 0)
        {
            total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_height());
        }

        // uint32 width = 2;
        if (this->_internal_width() != 0)
        {
            total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_width());
        }

        return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
    }

    const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MessageOfMap::_class_data_ = {
        ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
        MessageOfMap::MergeImpl};
    const ::PROTOBUF_NAMESPACE_ID::Message::ClassData* MessageOfMap::GetClassData() const
    {
        return &_class_data_;
    }

    void MessageOfMap::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg)
    {
        auto* const _this = static_cast<MessageOfMap*>(&to_msg);
        auto& from = static_cast<const MessageOfMap&>(from_msg);
        // @@protoc_insertion_point(class_specific_merge_from_start:protobuf.MessageOfMap)
        GOOGLE_DCHECK_NE(&from, _this);
        uint32_t cached_has_bits = 0;
        (void)cached_has_bits;

        _this->_impl_.rows_.MergeFrom(from._impl_.rows_);
        if (from._internal_height() != 0)
        {
            _this->_internal_set_height(from._internal_height());
        }
        if (from._internal_width() != 0)
        {
            _this->_internal_set_width(from._internal_width());
        }
        _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
    }

    void MessageOfMap::CopyFrom(const MessageOfMap& from)
    {
        // @@protoc_insertion_point(class_specific_copy_from_start:protobuf.MessageOfMap)
        if (&from == this)
            return;
        Clear();
        MergeFrom(from);
    }

    bool MessageOfMap::IsInitialized() const
    {
        return true;
    }

    void MessageOfMap::InternalSwap(MessageOfMap* other)
    {
        using std::swap;
        _internal_metadata_.InternalSwap(&other->_internal_metadata_);
        _impl_.rows_.InternalSwap(&other->_impl_.rows_);
        ::PROTOBUF_NAMESPACE_ID::internal::memswap<
            PROTOBUF_FIELD_OFFSET(MessageOfMap, _impl_.width_) + sizeof(MessageOfMap::_impl_.width_) - PROTOBUF_FIELD_OFFSET(MessageOfMap, _impl_.height_)>(
            reinterpret_cast<char*>(&_impl_.height_),
            reinterpret_cast<char*>(&other->_impl_.height_)
        );
    }

    ::PROTOBUF_NAMESPACE_ID::Metadata MessageOfMap::GetMetadata() const
    {
        return ::_pbi::AssignDescriptors(
            &descriptor_table_Message2Clients_2eproto_getter, &descriptor_table_Message2Clients_2eproto_once, file_level_metadata_Message2Clients_2eproto[10]
        );
    }

    // ===================================================================

    class MessageOfTeam::_Internal
    {
    public:
    };

    MessageOfTeam::MessageOfTeam(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned) :
        ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned)
    {
        SharedCtor(arena, is_message_owned);
        // @@protoc_insertion_point(arena_constructor:protobuf.MessageOfTeam)
    }
    MessageOfTeam::MessageOfTeam(const MessageOfTeam& from) :
        ::PROTOBUF_NAMESPACE_ID::Message()
    {
        MessageOfTeam* const _this = this;
        (void)_this;
        new (&_impl_) Impl_{
            decltype(_impl_.team_id_){}, decltype(_impl_.player_id_){}, decltype(_impl_.score_){}, decltype(_impl_.energy_){}, decltype(_impl_.guid_){}, /*decltype(_impl_._cached_size_)*/ {}};

        _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
        ::memcpy(&_impl_.team_id_, &from._impl_.team_id_, static_cast<size_t>(reinterpret_cast<char*>(&_impl_.guid_) - reinterpret_cast<char*>(&_impl_.team_id_)) + sizeof(_impl_.guid_));
        // @@protoc_insertion_point(copy_constructor:protobuf.MessageOfTeam)
    }

    inline void MessageOfTeam::SharedCtor(
        ::_pb::Arena* arena, bool is_message_owned
    )
    {
        (void)arena;
        (void)is_message_owned;
        new (&_impl_) Impl_{
            decltype(_impl_.team_id_){int64_t{0}}, decltype(_impl_.player_id_){int64_t{0}}, decltype(_impl_.score_){0}, decltype(_impl_.energy_){0}, decltype(_impl_.guid_){int64_t{0}}, /*decltype(_impl_._cached_size_)*/ {}};
    }

    MessageOfTeam::~MessageOfTeam()
    {
        // @@protoc_insertion_point(destructor:protobuf.MessageOfTeam)
        if (auto* arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>())
        {
            (void)arena;
            return;
        }
        SharedDtor();
    }

    inline void MessageOfTeam::SharedDtor()
    {
        GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
    }

    void MessageOfTeam::SetCachedSize(int size) const
    {
        _impl_._cached_size_.Set(size);
    }

    void MessageOfTeam::Clear()
    {
        // @@protoc_insertion_point(message_clear_start:protobuf.MessageOfTeam)
        uint32_t cached_has_bits = 0;
        // Prevent compiler warnings about cached_has_bits being unused
        (void)cached_has_bits;

        ::memset(&_impl_.team_id_, 0, static_cast<size_t>(reinterpret_cast<char*>(&_impl_.guid_) - reinterpret_cast<char*>(&_impl_.team_id_)) + sizeof(_impl_.guid_));
        _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
    }

    const char* MessageOfTeam::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx)
    {
#define CHK_(x)                       \
    if (PROTOBUF_PREDICT_FALSE(!(x))) \
    goto failure
        while (!ctx->Done(&ptr))
        {
            uint32_t tag;
            ptr = ::_pbi::ReadTag(ptr, &tag);
            switch (tag >> 3)
            {
                // int64 team_id = 1;
                case 1:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8))
                    {
                        _impl_.team_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
                        CHK_(ptr);
                    }
                    else
                        goto handle_unusual;
                    continue;
                // int64 player_id = 2;
                case 2:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16))
                    {
                        _impl_.player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
                        CHK_(ptr);
                    }
                    else
                        goto handle_unusual;
                    continue;
                // int32 score = 3;
                case 3:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24))
                    {
                        _impl_.score_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
                        CHK_(ptr);
                    }
                    else
                        goto handle_unusual;
                    continue;
                // int32 energy = 4;
                case 4:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32))
                    {
                        _impl_.energy_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
                        CHK_(ptr);
                    }
                    else
                        goto handle_unusual;
                    continue;
                // int64 guid = 5;
                case 5:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40))
                    {
                        _impl_.guid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
                        CHK_(ptr);
                    }
                    else
                        goto handle_unusual;
                    continue;
                default:
                    goto handle_unusual;
            }  // switch
        handle_unusual:
            if ((tag == 0) || ((tag & 7) == 4))
            {
                CHK_(ptr);
                ctx->SetLastTag(tag);
                goto message_done;
            }
            ptr = UnknownFieldParse(
                tag,
                _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
                ptr,
                ctx
            );
            CHK_(ptr != nullptr);
        }  // while
    message_done:
        return ptr;
    failure:
        ptr = nullptr;
        goto message_done;
#undef CHK_
    }

    uint8_t* MessageOfTeam::_InternalSerialize(
        uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream
    ) const
    {
        // @@protoc_insertion_point(serialize_to_array_start:protobuf.MessageOfTeam)
        uint32_t cached_has_bits = 0;
        (void)cached_has_bits;

        // int64 team_id = 1;
        if (this->_internal_team_id() != 0)
        {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_team_id(), target);
        }

        // int64 player_id = 2;
        if (this->_internal_player_id() != 0)
        {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_player_id(), target);
        }

        // int32 score = 3;
        if (this->_internal_score() != 0)
        {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_score(), target);
        }

        // int32 energy = 4;
        if (this->_internal_energy() != 0)
        {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_energy(), target);
        }

        // int64 guid = 5;
        if (this->_internal_guid() != 0)
        {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt64ToArray(5, this->_internal_guid(), target);
        }

        if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields()))
        {
            target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream
            );
        }
        // @@protoc_insertion_point(serialize_to_array_end:protobuf.MessageOfTeam)
        return target;
    }

    size_t MessageOfTeam::ByteSizeLong() const
    {
        // @@protoc_insertion_point(message_byte_size_start:protobuf.MessageOfTeam)
        size_t total_size = 0;

        uint32_t cached_has_bits = 0;
        // Prevent compiler warnings about cached_has_bits being unused
        (void)cached_has_bits;

        // int64 team_id = 1;
        if (this->_internal_team_id() != 0)
        {
            total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_team_id());
        }

        // int64 player_id = 2;
        if (this->_internal_player_id() != 0)
        {
            total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_player_id());
        }

        // int32 score = 3;
        if (this->_internal_score() != 0)
        {
            total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_score());
        }

        // int32 energy = 4;
        if (this->_internal_energy() != 0)
        {
            total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_energy());
        }

        // int64 guid = 5;
        if (this->_internal_guid() != 0)
        {
            total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_guid());
        }

        return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
    }

    const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MessageOfTeam::_class_data_ = {
        ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
        MessageOfTeam::MergeImpl};
    const ::PROTOBUF_NAMESPACE_ID::Message::ClassData* MessageOfTeam::GetClassData() const
    {
        return &_class_data_;
    }

    void MessageOfTeam::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg)
    {
        auto* const _this = static_cast<MessageOfTeam*>(&to_msg);
        auto& from = static_cast<const MessageOfTeam&>(from_msg);
        // @@protoc_insertion_point(class_specific_merge_from_start:protobuf.MessageOfTeam)
        GOOGLE_DCHECK_NE(&from, _this);
        uint32_t cached_has_bits = 0;
        (void)cached_has_bits;

        if (from._internal_team_id() != 0)
        {
            _this->_internal_set_team_id(from._internal_team_id());
        }
        if (from._internal_player_id() != 0)
        {
            _this->_internal_set_player_id(from._internal_player_id());
        }
        if (from._internal_score() != 0)
        {
            _this->_internal_set_score(from._internal_score());
        }
        if (from._internal_energy() != 0)
        {
            _this->_internal_set_energy(from._internal_energy());
        }
        if (from._internal_guid() != 0)
        {
            _this->_internal_set_guid(from._internal_guid());
        }
        _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
    }

    void MessageOfTeam::CopyFrom(const MessageOfTeam& from)
    {
        // @@protoc_insertion_point(class_specific_copy_from_start:protobuf.MessageOfTeam)
        if (&from == this)
            return;
        Clear();
        MergeFrom(from);
    }

    bool MessageOfTeam::IsInitialized() const
    {
        return true;
    }

    void MessageOfTeam::InternalSwap(MessageOfTeam* other)
    {
        using std::swap;
        _internal_metadata_.InternalSwap(&other->_internal_metadata_);
        ::PROTOBUF_NAMESPACE_ID::internal::memswap<
            PROTOBUF_FIELD_OFFSET(MessageOfTeam, _impl_.guid_) + sizeof(MessageOfTeam::_impl_.guid_) - PROTOBUF_FIELD_OFFSET(MessageOfTeam, _impl_.team_id_)>(
            reinterpret_cast<char*>(&_impl_.team_id_),
            reinterpret_cast<char*>(&other->_impl_.team_id_)
        );
    }

    ::PROTOBUF_NAMESPACE_ID::Metadata MessageOfTeam::GetMetadata() const
    {
        return ::_pbi::AssignDescriptors(
            &descriptor_table_Message2Clients_2eproto_getter, &descriptor_table_Message2Clients_2eproto_once, file_level_metadata_Message2Clients_2eproto[11]
        );
    }

    // ===================================================================

    class MessageOfObj::_Internal
    {
    public:
        static const ::protobuf::MessageOfSweeper& sweeper_message(const MessageOfObj* msg);
        static const ::protobuf::MessageOfBullet& bullet_message(const MessageOfObj* msg);
        static const ::protobuf::MessageOfRecycleBank& recyclebank_message(const MessageOfObj* msg);
        static const ::protobuf::MessageOfChargeStation& chargestation_message(const MessageOfObj* msg);
        static const ::protobuf::MessageOfSignalTower& signaltower_message(const MessageOfObj* msg);
        static const ::protobuf::MessageOfBridge& bridge_message(const MessageOfObj* msg);
        static const ::protobuf::MessageOfHome& home_message(const MessageOfObj* msg);
        static const ::protobuf::MessageOfGarbage& garbage_message(const MessageOfObj* msg);
        static const ::protobuf::MessageOfMap& map_message(const MessageOfObj* msg);
        static const ::protobuf::MessageOfNews& news_message(const MessageOfObj* msg);
        static const ::protobuf::MessageOfBombedBullet& bombed_bullet_message(const MessageOfObj* msg);
        static const ::protobuf::MessageOfTeam& team_message(const MessageOfObj* msg);
    };

    const ::protobuf::MessageOfSweeper&
        MessageOfObj::_Internal::sweeper_message(const MessageOfObj* msg)
    {
        return *msg->_impl_.message_of_obj_.sweeper_message_;
    }
    const ::protobuf::MessageOfBullet&
        MessageOfObj::_Internal::bullet_message(const MessageOfObj* msg)
    {
        return *msg->_impl_.message_of_obj_.bullet_message_;
    }
    const ::protobuf::MessageOfRecycleBank&
        MessageOfObj::_Internal::recyclebank_message(const MessageOfObj* msg)
    {
        return *msg->_impl_.message_of_obj_.recyclebank_message_;
    }
    const ::protobuf::MessageOfChargeStation&
        MessageOfObj::_Internal::chargestation_message(const MessageOfObj* msg)
    {
        return *msg->_impl_.message_of_obj_.chargestation_message_;
    }
    const ::protobuf::MessageOfSignalTower&
        MessageOfObj::_Internal::signaltower_message(const MessageOfObj* msg)
    {
        return *msg->_impl_.message_of_obj_.signaltower_message_;
    }
    const ::protobuf::MessageOfBridge&
        MessageOfObj::_Internal::bridge_message(const MessageOfObj* msg)
    {
        return *msg->_impl_.message_of_obj_.bridge_message_;
    }
    const ::protobuf::MessageOfHome&
        MessageOfObj::_Internal::home_message(const MessageOfObj* msg)
    {
        return *msg->_impl_.message_of_obj_.home_message_;
    }
    const ::protobuf::MessageOfGarbage&
        MessageOfObj::_Internal::garbage_message(const MessageOfObj* msg)
    {
        return *msg->_impl_.message_of_obj_.garbage_message_;
    }
    const ::protobuf::MessageOfMap&
        MessageOfObj::_Internal::map_message(const MessageOfObj* msg)
    {
        return *msg->_impl_.message_of_obj_.map_message_;
    }
    const ::protobuf::MessageOfNews&
        MessageOfObj::_Internal::news_message(const MessageOfObj* msg)
    {
        return *msg->_impl_.message_of_obj_.news_message_;
    }
    const ::protobuf::MessageOfBombedBullet&
        MessageOfObj::_Internal::bombed_bullet_message(const MessageOfObj* msg)
    {
        return *msg->_impl_.message_of_obj_.bombed_bullet_message_;
    }
    const ::protobuf::MessageOfTeam&
        MessageOfObj::_Internal::team_message(const MessageOfObj* msg)
    {
        return *msg->_impl_.message_of_obj_.team_message_;
    }
    void MessageOfObj::set_allocated_sweeper_message(::protobuf::MessageOfSweeper* sweeper_message)
    {
        ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
        clear_message_of_obj();
        if (sweeper_message)
        {
            ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
                ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(sweeper_message);
            if (message_arena != submessage_arena)
            {
                sweeper_message = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
                    message_arena, sweeper_message, submessage_arena
                );
            }
            set_has_sweeper_message();
            _impl_.message_of_obj_.sweeper_message_ = sweeper_message;
        }
        // @@protoc_insertion_point(field_set_allocated:protobuf.MessageOfObj.sweeper_message)
    }
    void MessageOfObj::set_allocated_bullet_message(::protobuf::MessageOfBullet* bullet_message)
    {
        ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
        clear_message_of_obj();
        if (bullet_message)
        {
            ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
                ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(bullet_message);
            if (message_arena != submessage_arena)
            {
                bullet_message = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
                    message_arena, bullet_message, submessage_arena
                );
            }
            set_has_bullet_message();
            _impl_.message_of_obj_.bullet_message_ = bullet_message;
        }
        // @@protoc_insertion_point(field_set_allocated:protobuf.MessageOfObj.bullet_message)
    }
    void MessageOfObj::set_allocated_recyclebank_message(::protobuf::MessageOfRecycleBank* recyclebank_message)
    {
        ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
        clear_message_of_obj();
        if (recyclebank_message)
        {
            ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
                ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(recyclebank_message);
            if (message_arena != submessage_arena)
            {
                recyclebank_message = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
                    message_arena, recyclebank_message, submessage_arena
                );
            }
            set_has_recyclebank_message();
            _impl_.message_of_obj_.recyclebank_message_ = recyclebank_message;
        }
        // @@protoc_insertion_point(field_set_allocated:protobuf.MessageOfObj.recyclebank_message)
    }
    void MessageOfObj::set_allocated_chargestation_message(::protobuf::MessageOfChargeStation* chargestation_message)
    {
        ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
        clear_message_of_obj();
        if (chargestation_message)
        {
            ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
                ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(chargestation_message);
            if (message_arena != submessage_arena)
            {
                chargestation_message = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
                    message_arena, chargestation_message, submessage_arena
                );
            }
            set_has_chargestation_message();
            _impl_.message_of_obj_.chargestation_message_ = chargestation_message;
        }
        // @@protoc_insertion_point(field_set_allocated:protobuf.MessageOfObj.chargestation_message)
    }
    void MessageOfObj::set_allocated_signaltower_message(::protobuf::MessageOfSignalTower* signaltower_message)
    {
        ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
        clear_message_of_obj();
        if (signaltower_message)
        {
            ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
                ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(signaltower_message);
            if (message_arena != submessage_arena)
            {
                signaltower_message = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
                    message_arena, signaltower_message, submessage_arena
                );
            }
            set_has_signaltower_message();
            _impl_.message_of_obj_.signaltower_message_ = signaltower_message;
        }
        // @@protoc_insertion_point(field_set_allocated:protobuf.MessageOfObj.signaltower_message)
    }
    void MessageOfObj::set_allocated_bridge_message(::protobuf::MessageOfBridge* bridge_message)
    {
        ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
        clear_message_of_obj();
        if (bridge_message)
        {
            ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
                ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(bridge_message);
            if (message_arena != submessage_arena)
            {
                bridge_message = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
                    message_arena, bridge_message, submessage_arena
                );
            }
            set_has_bridge_message();
            _impl_.message_of_obj_.bridge_message_ = bridge_message;
        }
        // @@protoc_insertion_point(field_set_allocated:protobuf.MessageOfObj.bridge_message)
    }
    void MessageOfObj::set_allocated_home_message(::protobuf::MessageOfHome* home_message)
    {
        ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
        clear_message_of_obj();
        if (home_message)
        {
            ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
                ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(home_message);
            if (message_arena != submessage_arena)
            {
                home_message = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
                    message_arena, home_message, submessage_arena
                );
            }
            set_has_home_message();
            _impl_.message_of_obj_.home_message_ = home_message;
        }
        // @@protoc_insertion_point(field_set_allocated:protobuf.MessageOfObj.home_message)
    }
    void MessageOfObj::set_allocated_garbage_message(::protobuf::MessageOfGarbage* garbage_message)
    {
        ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
        clear_message_of_obj();
        if (garbage_message)
        {
            ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
                ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(garbage_message);
            if (message_arena != submessage_arena)
            {
                garbage_message = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
                    message_arena, garbage_message, submessage_arena
                );
            }
            set_has_garbage_message();
            _impl_.message_of_obj_.garbage_message_ = garbage_message;
        }
        // @@protoc_insertion_point(field_set_allocated:protobuf.MessageOfObj.garbage_message)
    }
    void MessageOfObj::set_allocated_map_message(::protobuf::MessageOfMap* map_message)
    {
        ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
        clear_message_of_obj();
        if (map_message)
        {
            ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
                ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(map_message);
            if (message_arena != submessage_arena)
            {
                map_message = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
                    message_arena, map_message, submessage_arena
                );
            }
            set_has_map_message();
            _impl_.message_of_obj_.map_message_ = map_message;
        }
        // @@protoc_insertion_point(field_set_allocated:protobuf.MessageOfObj.map_message)
    }
    void MessageOfObj::set_allocated_news_message(::protobuf::MessageOfNews* news_message)
    {
        ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
        clear_message_of_obj();
        if (news_message)
        {
            ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
                ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(news_message);
            if (message_arena != submessage_arena)
            {
                news_message = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
                    message_arena, news_message, submessage_arena
                );
            }
            set_has_news_message();
            _impl_.message_of_obj_.news_message_ = news_message;
        }
        // @@protoc_insertion_point(field_set_allocated:protobuf.MessageOfObj.news_message)
    }
    void MessageOfObj::set_allocated_bombed_bullet_message(::protobuf::MessageOfBombedBullet* bombed_bullet_message)
    {
        ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
        clear_message_of_obj();
        if (bombed_bullet_message)
        {
            ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
                ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(bombed_bullet_message);
            if (message_arena != submessage_arena)
            {
                bombed_bullet_message = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
                    message_arena, bombed_bullet_message, submessage_arena
                );
            }
            set_has_bombed_bullet_message();
            _impl_.message_of_obj_.bombed_bullet_message_ = bombed_bullet_message;
        }
        // @@protoc_insertion_point(field_set_allocated:protobuf.MessageOfObj.bombed_bullet_message)
    }
    void MessageOfObj::set_allocated_team_message(::protobuf::MessageOfTeam* team_message)
    {
        ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
        clear_message_of_obj();
        if (team_message)
        {
            ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
                ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(team_message);
            if (message_arena != submessage_arena)
            {
                team_message = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
                    message_arena, team_message, submessage_arena
                );
            }
            set_has_team_message();
            _impl_.message_of_obj_.team_message_ = team_message;
        }
        // @@protoc_insertion_point(field_set_allocated:protobuf.MessageOfObj.team_message)
    }
    MessageOfObj::MessageOfObj(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned) :
        ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned)
    {
        SharedCtor(arena, is_message_owned);
        // @@protoc_insertion_point(arena_constructor:protobuf.MessageOfObj)
    }
    MessageOfObj::MessageOfObj(const MessageOfObj& from) :
        ::PROTOBUF_NAMESPACE_ID::Message()
    {
        MessageOfObj* const _this = this;
        (void)_this;
        new (&_impl_) Impl_{
            decltype(_impl_.message_of_obj_){}, /*decltype(_impl_._cached_size_)*/ {}, /*decltype(_impl_._oneof_case_)*/ {}};

        _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
        clear_has_message_of_obj();
        switch (from.message_of_obj_case())
        {
            case kSweeperMessage:
                {
                    _this->_internal_mutable_sweeper_message()->::protobuf::MessageOfSweeper::MergeFrom(
                        from._internal_sweeper_message()
                    );
                    break;
                }
            case kBulletMessage:
                {
                    _this->_internal_mutable_bullet_message()->::protobuf::MessageOfBullet::MergeFrom(
                        from._internal_bullet_message()
                    );
                    break;
                }
            case kRecyclebankMessage:
                {
                    _this->_internal_mutable_recyclebank_message()->::protobuf::MessageOfRecycleBank::MergeFrom(
                        from._internal_recyclebank_message()
                    );
                    break;
                }
            case kChargestationMessage:
                {
                    _this->_internal_mutable_chargestation_message()->::protobuf::MessageOfChargeStation::MergeFrom(
                        from._internal_chargestation_message()
                    );
                    break;
                }
            case kSignaltowerMessage:
                {
                    _this->_internal_mutable_signaltower_message()->::protobuf::MessageOfSignalTower::MergeFrom(
                        from._internal_signaltower_message()
                    );
                    break;
                }
            case kBridgeMessage:
                {
                    _this->_internal_mutable_bridge_message()->::protobuf::MessageOfBridge::MergeFrom(
                        from._internal_bridge_message()
                    );
                    break;
                }
            case kHomeMessage:
                {
                    _this->_internal_mutable_home_message()->::protobuf::MessageOfHome::MergeFrom(
                        from._internal_home_message()
                    );
                    break;
                }
            case kGarbageMessage:
                {
                    _this->_internal_mutable_garbage_message()->::protobuf::MessageOfGarbage::MergeFrom(
                        from._internal_garbage_message()
                    );
                    break;
                }
            case kMapMessage:
                {
                    _this->_internal_mutable_map_message()->::protobuf::MessageOfMap::MergeFrom(
                        from._internal_map_message()
                    );
                    break;
                }
            case kNewsMessage:
                {
                    _this->_internal_mutable_news_message()->::protobuf::MessageOfNews::MergeFrom(
                        from._internal_news_message()
                    );
                    break;
                }
            case kBombedBulletMessage:
                {
                    _this->_internal_mutable_bombed_bullet_message()->::protobuf::MessageOfBombedBullet::MergeFrom(
                        from._internal_bombed_bullet_message()
                    );
                    break;
                }
            case kTeamMessage:
                {
                    _this->_internal_mutable_team_message()->::protobuf::MessageOfTeam::MergeFrom(
                        from._internal_team_message()
                    );
                    break;
                }
            case MESSAGE_OF_OBJ_NOT_SET:
                {
                    break;
                }
        }
        // @@protoc_insertion_point(copy_constructor:protobuf.MessageOfObj)
    }

    inline void MessageOfObj::SharedCtor(
        ::_pb::Arena* arena, bool is_message_owned
    )
    {
        (void)arena;
        (void)is_message_owned;
        new (&_impl_) Impl_{
            decltype(_impl_.message_of_obj_){}, /*decltype(_impl_._cached_size_)*/ {}, /*decltype(_impl_._oneof_case_)*/ {}};
        clear_has_message_of_obj();
    }

    MessageOfObj::~MessageOfObj()
    {
        // @@protoc_insertion_point(destructor:protobuf.MessageOfObj)
        if (auto* arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>())
        {
            (void)arena;
            return;
        }
        SharedDtor();
    }

    inline void MessageOfObj::SharedDtor()
    {
        GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
        if (has_message_of_obj())
        {
            clear_message_of_obj();
        }
    }

    void MessageOfObj::SetCachedSize(int size) const
    {
        _impl_._cached_size_.Set(size);
    }

    void MessageOfObj::clear_message_of_obj()
    {
        // @@protoc_insertion_point(one_of_clear_start:protobuf.MessageOfObj)
        switch (message_of_obj_case())
        {
            case kSweeperMessage:
                {
                    if (GetArenaForAllocation() == nullptr)
                    {
                        delete _impl_.message_of_obj_.sweeper_message_;
                    }
                    break;
                }
            case kBulletMessage:
                {
                    if (GetArenaForAllocation() == nullptr)
                    {
                        delete _impl_.message_of_obj_.bullet_message_;
                    }
                    break;
                }
            case kRecyclebankMessage:
                {
                    if (GetArenaForAllocation() == nullptr)
                    {
                        delete _impl_.message_of_obj_.recyclebank_message_;
                    }
                    break;
                }
            case kChargestationMessage:
                {
                    if (GetArenaForAllocation() == nullptr)
                    {
                        delete _impl_.message_of_obj_.chargestation_message_;
                    }
                    break;
                }
            case kSignaltowerMessage:
                {
                    if (GetArenaForAllocation() == nullptr)
                    {
                        delete _impl_.message_of_obj_.signaltower_message_;
                    }
                    break;
                }
            case kBridgeMessage:
                {
                    if (GetArenaForAllocation() == nullptr)
                    {
                        delete _impl_.message_of_obj_.bridge_message_;
                    }
                    break;
                }
            case kHomeMessage:
                {
                    if (GetArenaForAllocation() == nullptr)
                    {
                        delete _impl_.message_of_obj_.home_message_;
                    }
                    break;
                }
            case kGarbageMessage:
                {
                    if (GetArenaForAllocation() == nullptr)
                    {
                        delete _impl_.message_of_obj_.garbage_message_;
                    }
                    break;
                }
            case kMapMessage:
                {
                    if (GetArenaForAllocation() == nullptr)
                    {
                        delete _impl_.message_of_obj_.map_message_;
                    }
                    break;
                }
            case kNewsMessage:
                {
                    if (GetArenaForAllocation() == nullptr)
                    {
                        delete _impl_.message_of_obj_.news_message_;
                    }
                    break;
                }
            case kBombedBulletMessage:
                {
                    if (GetArenaForAllocation() == nullptr)
                    {
                        delete _impl_.message_of_obj_.bombed_bullet_message_;
                    }
                    break;
                }
            case kTeamMessage:
                {
                    if (GetArenaForAllocation() == nullptr)
                    {
                        delete _impl_.message_of_obj_.team_message_;
                    }
                    break;
                }
            case MESSAGE_OF_OBJ_NOT_SET:
                {
                    break;
                }
        }
        _impl_._oneof_case_[0] = MESSAGE_OF_OBJ_NOT_SET;
    }

    void MessageOfObj::Clear()
    {
        // @@protoc_insertion_point(message_clear_start:protobuf.MessageOfObj)
        uint32_t cached_has_bits = 0;
        // Prevent compiler warnings about cached_has_bits being unused
        (void)cached_has_bits;

        clear_message_of_obj();
        _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
    }

    const char* MessageOfObj::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx)
    {
#define CHK_(x)                       \
    if (PROTOBUF_PREDICT_FALSE(!(x))) \
    goto failure
        while (!ctx->Done(&ptr))
        {
            uint32_t tag;
            ptr = ::_pbi::ReadTag(ptr, &tag);
            switch (tag >> 3)
            {
                // .protobuf.MessageOfSweeper sweeper_message = 1;
                case 1:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10))
                    {
                        ptr = ctx->ParseMessage(_internal_mutable_sweeper_message(), ptr);
                        CHK_(ptr);
                    }
                    else
                        goto handle_unusual;
                    continue;
                // .protobuf.MessageOfBullet bullet_message = 2;
                case 2:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18))
                    {
                        ptr = ctx->ParseMessage(_internal_mutable_bullet_message(), ptr);
                        CHK_(ptr);
                    }
                    else
                        goto handle_unusual;
                    continue;
                // .protobuf.MessageOfRecycleBank recyclebank_message = 3;
                case 3:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26))
                    {
                        ptr = ctx->ParseMessage(_internal_mutable_recyclebank_message(), ptr);
                        CHK_(ptr);
                    }
                    else
                        goto handle_unusual;
                    continue;
                // .protobuf.MessageOfChargeStation chargestation_message = 4;
                case 4:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34))
                    {
                        ptr = ctx->ParseMessage(_internal_mutable_chargestation_message(), ptr);
                        CHK_(ptr);
                    }
                    else
                        goto handle_unusual;
                    continue;
                // .protobuf.MessageOfSignalTower signaltower_message = 5;
                case 5:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42))
                    {
                        ptr = ctx->ParseMessage(_internal_mutable_signaltower_message(), ptr);
                        CHK_(ptr);
                    }
                    else
                        goto handle_unusual;
                    continue;
                // .protobuf.MessageOfBridge bridge_message = 6;
                case 6:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50))
                    {
                        ptr = ctx->ParseMessage(_internal_mutable_bridge_message(), ptr);
                        CHK_(ptr);
                    }
                    else
                        goto handle_unusual;
                    continue;
                // .protobuf.MessageOfHome home_message = 7;
                case 7:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58))
                    {
                        ptr = ctx->ParseMessage(_internal_mutable_home_message(), ptr);
                        CHK_(ptr);
                    }
                    else
                        goto handle_unusual;
                    continue;
                // .protobuf.MessageOfGarbage garbage_message = 8;
                case 8:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66))
                    {
                        ptr = ctx->ParseMessage(_internal_mutable_garbage_message(), ptr);
                        CHK_(ptr);
                    }
                    else
                        goto handle_unusual;
                    continue;
                // .protobuf.MessageOfMap map_message = 9;
                case 9:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74))
                    {
                        ptr = ctx->ParseMessage(_internal_mutable_map_message(), ptr);
                        CHK_(ptr);
                    }
                    else
                        goto handle_unusual;
                    continue;
                // .protobuf.MessageOfNews news_message = 10;
                case 10:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82))
                    {
                        ptr = ctx->ParseMessage(_internal_mutable_news_message(), ptr);
                        CHK_(ptr);
                    }
                    else
                        goto handle_unusual;
                    continue;
                // .protobuf.MessageOfBombedBullet bombed_bullet_message = 11;
                case 11:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90))
                    {
                        ptr = ctx->ParseMessage(_internal_mutable_bombed_bullet_message(), ptr);
                        CHK_(ptr);
                    }
                    else
                        goto handle_unusual;
                    continue;
                // .protobuf.MessageOfTeam team_message = 12;
                case 12:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98))
                    {
                        ptr = ctx->ParseMessage(_internal_mutable_team_message(), ptr);
                        CHK_(ptr);
                    }
                    else
                        goto handle_unusual;
                    continue;
                default:
                    goto handle_unusual;
            }  // switch
        handle_unusual:
            if ((tag == 0) || ((tag & 7) == 4))
            {
                CHK_(ptr);
                ctx->SetLastTag(tag);
                goto message_done;
            }
            ptr = UnknownFieldParse(
                tag,
                _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
                ptr,
                ctx
            );
            CHK_(ptr != nullptr);
        }  // while
    message_done:
        return ptr;
    failure:
        ptr = nullptr;
        goto message_done;
#undef CHK_
    }

    uint8_t* MessageOfObj::_InternalSerialize(
        uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream
    ) const
    {
        // @@protoc_insertion_point(serialize_to_array_start:protobuf.MessageOfObj)
        uint32_t cached_has_bits = 0;
        (void)cached_has_bits;

        // .protobuf.MessageOfSweeper sweeper_message = 1;
        if (_internal_has_sweeper_message())
        {
            target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
                InternalWriteMessage(1, _Internal::sweeper_message(this), _Internal::sweeper_message(this).GetCachedSize(), target, stream);
        }

        // .protobuf.MessageOfBullet bullet_message = 2;
        if (_internal_has_bullet_message())
        {
            target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
                InternalWriteMessage(2, _Internal::bullet_message(this), _Internal::bullet_message(this).GetCachedSize(), target, stream);
        }

        // .protobuf.MessageOfRecycleBank recyclebank_message = 3;
        if (_internal_has_recyclebank_message())
        {
            target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
                InternalWriteMessage(3, _Internal::recyclebank_message(this), _Internal::recyclebank_message(this).GetCachedSize(), target, stream);
        }

        // .protobuf.MessageOfChargeStation chargestation_message = 4;
        if (_internal_has_chargestation_message())
        {
            target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
                InternalWriteMessage(4, _Internal::chargestation_message(this), _Internal::chargestation_message(this).GetCachedSize(), target, stream);
        }

        // .protobuf.MessageOfSignalTower signaltower_message = 5;
        if (_internal_has_signaltower_message())
        {
            target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
                InternalWriteMessage(5, _Internal::signaltower_message(this), _Internal::signaltower_message(this).GetCachedSize(), target, stream);
        }

        // .protobuf.MessageOfBridge bridge_message = 6;
        if (_internal_has_bridge_message())
        {
            target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
                InternalWriteMessage(6, _Internal::bridge_message(this), _Internal::bridge_message(this).GetCachedSize(), target, stream);
        }

        // .protobuf.MessageOfHome home_message = 7;
        if (_internal_has_home_message())
        {
            target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
                InternalWriteMessage(7, _Internal::home_message(this), _Internal::home_message(this).GetCachedSize(), target, stream);
        }

        // .protobuf.MessageOfGarbage garbage_message = 8;
        if (_internal_has_garbage_message())
        {
            target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
                InternalWriteMessage(8, _Internal::garbage_message(this), _Internal::garbage_message(this).GetCachedSize(), target, stream);
        }

        // .protobuf.MessageOfMap map_message = 9;
        if (_internal_has_map_message())
        {
            target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
                InternalWriteMessage(9, _Internal::map_message(this), _Internal::map_message(this).GetCachedSize(), target, stream);
        }

        // .protobuf.MessageOfNews news_message = 10;
        if (_internal_has_news_message())
        {
            target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
                InternalWriteMessage(10, _Internal::news_message(this), _Internal::news_message(this).GetCachedSize(), target, stream);
        }

        // .protobuf.MessageOfBombedBullet bombed_bullet_message = 11;
        if (_internal_has_bombed_bullet_message())
        {
            target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
                InternalWriteMessage(11, _Internal::bombed_bullet_message(this), _Internal::bombed_bullet_message(this).GetCachedSize(), target, stream);
        }

        // .protobuf.MessageOfTeam team_message = 12;
        if (_internal_has_team_message())
        {
            target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
                InternalWriteMessage(12, _Internal::team_message(this), _Internal::team_message(this).GetCachedSize(), target, stream);
        }

        if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields()))
        {
            target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream
            );
        }
        // @@protoc_insertion_point(serialize_to_array_end:protobuf.MessageOfObj)
        return target;
    }

    size_t MessageOfObj::ByteSizeLong() const
    {
        // @@protoc_insertion_point(message_byte_size_start:protobuf.MessageOfObj)
        size_t total_size = 0;

        uint32_t cached_has_bits = 0;
        // Prevent compiler warnings about cached_has_bits being unused
        (void)cached_has_bits;

        switch (message_of_obj_case())
        {
            // .protobuf.MessageOfSweeper sweeper_message = 1;
            case kSweeperMessage:
                {
                    total_size += 1 +
                                  ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
                                      *_impl_.message_of_obj_.sweeper_message_
                                  );
                    break;
                }
            // .protobuf.MessageOfBullet bullet_message = 2;
            case kBulletMessage:
                {
                    total_size += 1 +
                                  ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
                                      *_impl_.message_of_obj_.bullet_message_
                                  );
                    break;
                }
            // .protobuf.MessageOfRecycleBank recyclebank_message = 3;
            case kRecyclebankMessage:
                {
                    total_size += 1 +
                                  ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
                                      *_impl_.message_of_obj_.recyclebank_message_
                                  );
                    break;
                }
            // .protobuf.MessageOfChargeStation chargestation_message = 4;
            case kChargestationMessage:
                {
                    total_size += 1 +
                                  ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
                                      *_impl_.message_of_obj_.chargestation_message_
                                  );
                    break;
                }
            // .protobuf.MessageOfSignalTower signaltower_message = 5;
            case kSignaltowerMessage:
                {
                    total_size += 1 +
                                  ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
                                      *_impl_.message_of_obj_.signaltower_message_
                                  );
                    break;
                }
            // .protobuf.MessageOfBridge bridge_message = 6;
            case kBridgeMessage:
                {
                    total_size += 1 +
                                  ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
                                      *_impl_.message_of_obj_.bridge_message_
                                  );
                    break;
                }
            // .protobuf.MessageOfHome home_message = 7;
            case kHomeMessage:
                {
                    total_size += 1 +
                                  ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
                                      *_impl_.message_of_obj_.home_message_
                                  );
                    break;
                }
            // .protobuf.MessageOfGarbage garbage_message = 8;
            case kGarbageMessage:
                {
                    total_size += 1 +
                                  ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
                                      *_impl_.message_of_obj_.garbage_message_
                                  );
                    break;
                }
            // .protobuf.MessageOfMap map_message = 9;
            case kMapMessage:
                {
                    total_size += 1 +
                                  ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
                                      *_impl_.message_of_obj_.map_message_
                                  );
                    break;
                }
            // .protobuf.MessageOfNews news_message = 10;
            case kNewsMessage:
                {
                    total_size += 1 +
                                  ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
                                      *_impl_.message_of_obj_.news_message_
                                  );
                    break;
                }
            // .protobuf.MessageOfBombedBullet bombed_bullet_message = 11;
            case kBombedBulletMessage:
                {
                    total_size += 1 +
                                  ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
                                      *_impl_.message_of_obj_.bombed_bullet_message_
                                  );
                    break;
                }
            // .protobuf.MessageOfTeam team_message = 12;
            case kTeamMessage:
                {
                    total_size += 1 +
                                  ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
                                      *_impl_.message_of_obj_.team_message_
                                  );
                    break;
                }
            case MESSAGE_OF_OBJ_NOT_SET:
                {
                    break;
                }
        }
        return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
    }

    const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MessageOfObj::_class_data_ = {
        ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
        MessageOfObj::MergeImpl};
    const ::PROTOBUF_NAMESPACE_ID::Message::ClassData* MessageOfObj::GetClassData() const
    {
        return &_class_data_;
    }

    void MessageOfObj::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg)
    {
        auto* const _this = static_cast<MessageOfObj*>(&to_msg);
        auto& from = static_cast<const MessageOfObj&>(from_msg);
        // @@protoc_insertion_point(class_specific_merge_from_start:protobuf.MessageOfObj)
        GOOGLE_DCHECK_NE(&from, _this);
        uint32_t cached_has_bits = 0;
        (void)cached_has_bits;

        switch (from.message_of_obj_case())
        {
            case kSweeperMessage:
                {
                    _this->_internal_mutable_sweeper_message()->::protobuf::MessageOfSweeper::MergeFrom(
                        from._internal_sweeper_message()
                    );
                    break;
                }
            case kBulletMessage:
                {
                    _this->_internal_mutable_bullet_message()->::protobuf::MessageOfBullet::MergeFrom(
                        from._internal_bullet_message()
                    );
                    break;
                }
            case kRecyclebankMessage:
                {
                    _this->_internal_mutable_recyclebank_message()->::protobuf::MessageOfRecycleBank::MergeFrom(
                        from._internal_recyclebank_message()
                    );
                    break;
                }
            case kChargestationMessage:
                {
                    _this->_internal_mutable_chargestation_message()->::protobuf::MessageOfChargeStation::MergeFrom(
                        from._internal_chargestation_message()
                    );
                    break;
                }
            case kSignaltowerMessage:
                {
                    _this->_internal_mutable_signaltower_message()->::protobuf::MessageOfSignalTower::MergeFrom(
                        from._internal_signaltower_message()
                    );
                    break;
                }
            case kBridgeMessage:
                {
                    _this->_internal_mutable_bridge_message()->::protobuf::MessageOfBridge::MergeFrom(
                        from._internal_bridge_message()
                    );
                    break;
                }
            case kHomeMessage:
                {
                    _this->_internal_mutable_home_message()->::protobuf::MessageOfHome::MergeFrom(
                        from._internal_home_message()
                    );
                    break;
                }
            case kGarbageMessage:
                {
                    _this->_internal_mutable_garbage_message()->::protobuf::MessageOfGarbage::MergeFrom(
                        from._internal_garbage_message()
                    );
                    break;
                }
            case kMapMessage:
                {
                    _this->_internal_mutable_map_message()->::protobuf::MessageOfMap::MergeFrom(
                        from._internal_map_message()
                    );
                    break;
                }
            case kNewsMessage:
                {
                    _this->_internal_mutable_news_message()->::protobuf::MessageOfNews::MergeFrom(
                        from._internal_news_message()
                    );
                    break;
                }
            case kBombedBulletMessage:
                {
                    _this->_internal_mutable_bombed_bullet_message()->::protobuf::MessageOfBombedBullet::MergeFrom(
                        from._internal_bombed_bullet_message()
                    );
                    break;
                }
            case kTeamMessage:
                {
                    _this->_internal_mutable_team_message()->::protobuf::MessageOfTeam::MergeFrom(
                        from._internal_team_message()
                    );
                    break;
                }
            case MESSAGE_OF_OBJ_NOT_SET:
                {
                    break;
                }
        }
        _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
    }

    void MessageOfObj::CopyFrom(const MessageOfObj& from)
    {
        // @@protoc_insertion_point(class_specific_copy_from_start:protobuf.MessageOfObj)
        if (&from == this)
            return;
        Clear();
        MergeFrom(from);
    }

    bool MessageOfObj::IsInitialized() const
    {
        return true;
    }

    void MessageOfObj::InternalSwap(MessageOfObj* other)
    {
        using std::swap;
        _internal_metadata_.InternalSwap(&other->_internal_metadata_);
        swap(_impl_.message_of_obj_, other->_impl_.message_of_obj_);
        swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
    }

    ::PROTOBUF_NAMESPACE_ID::Metadata MessageOfObj::GetMetadata() const
    {
        return ::_pbi::AssignDescriptors(
            &descriptor_table_Message2Clients_2eproto_getter, &descriptor_table_Message2Clients_2eproto_once, file_level_metadata_Message2Clients_2eproto[12]
        );
    }

    // ===================================================================

    class MessageOfAll::_Internal
    {
    public:
    };

    MessageOfAll::MessageOfAll(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned) :
        ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned)
    {
        SharedCtor(arena, is_message_owned);
        // @@protoc_insertion_point(arena_constructor:protobuf.MessageOfAll)
    }
    MessageOfAll::MessageOfAll(const MessageOfAll& from) :
        ::PROTOBUF_NAMESPACE_ID::Message()
    {
        MessageOfAll* const _this = this;
        (void)_this;
        new (&_impl_) Impl_{
            decltype(_impl_.game_time_){}, decltype(_impl_.red_team_score_){}, decltype(_impl_.blue_team_score_){}, decltype(_impl_.red_team_energy_){}, decltype(_impl_.blue_team_energy_){}, decltype(_impl_.red_home_hp_){}, decltype(_impl_.blue_home_hp_){}, /*decltype(_impl_._cached_size_)*/ {}};

        _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
        ::memcpy(&_impl_.game_time_, &from._impl_.game_time_, static_cast<size_t>(reinterpret_cast<char*>(&_impl_.blue_home_hp_) - reinterpret_cast<char*>(&_impl_.game_time_)) + sizeof(_impl_.blue_home_hp_));
        // @@protoc_insertion_point(copy_constructor:protobuf.MessageOfAll)
    }

    inline void MessageOfAll::SharedCtor(
        ::_pb::Arena* arena, bool is_message_owned
    )
    {
        (void)arena;
        (void)is_message_owned;
        new (&_impl_) Impl_{
            decltype(_impl_.game_time_){0}, decltype(_impl_.red_team_score_){0}, decltype(_impl_.blue_team_score_){0}, decltype(_impl_.red_team_energy_){0}, decltype(_impl_.blue_team_energy_){0}, decltype(_impl_.red_home_hp_){0}, decltype(_impl_.blue_home_hp_){0}, /*decltype(_impl_._cached_size_)*/ {}};
    }

    MessageOfAll::~MessageOfAll()
    {
        // @@protoc_insertion_point(destructor:protobuf.MessageOfAll)
        if (auto* arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>())
        {
            (void)arena;
            return;
        }
        SharedDtor();
    }

    inline void MessageOfAll::SharedDtor()
    {
        GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
    }

    void MessageOfAll::SetCachedSize(int size) const
    {
        _impl_._cached_size_.Set(size);
    }

    void MessageOfAll::Clear()
    {
        // @@protoc_insertion_point(message_clear_start:protobuf.MessageOfAll)
        uint32_t cached_has_bits = 0;
        // Prevent compiler warnings about cached_has_bits being unused
        (void)cached_has_bits;

        ::memset(&_impl_.game_time_, 0, static_cast<size_t>(reinterpret_cast<char*>(&_impl_.blue_home_hp_) - reinterpret_cast<char*>(&_impl_.game_time_)) + sizeof(_impl_.blue_home_hp_));
        _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
    }

    const char* MessageOfAll::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx)
    {
#define CHK_(x)                       \
    if (PROTOBUF_PREDICT_FALSE(!(x))) \
    goto failure
        while (!ctx->Done(&ptr))
        {
            uint32_t tag;
            ptr = ::_pbi::ReadTag(ptr, &tag);
            switch (tag >> 3)
            {
                // int32 game_time = 1;
                case 1:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8))
                    {
                        _impl_.game_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
                        CHK_(ptr);
                    }
                    else
                        goto handle_unusual;
                    continue;
                // int32 red_team_score = 2;
                case 2:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16))
                    {
                        _impl_.red_team_score_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
                        CHK_(ptr);
                    }
                    else
                        goto handle_unusual;
                    continue;
                // int32 blue_team_score = 3;
                case 3:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24))
                    {
                        _impl_.blue_team_score_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
                        CHK_(ptr);
                    }
                    else
                        goto handle_unusual;
                    continue;
                // int32 red_team_energy = 4;
                case 4:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32))
                    {
                        _impl_.red_team_energy_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
                        CHK_(ptr);
                    }
                    else
                        goto handle_unusual;
                    continue;
                // int32 blue_team_energy = 5;
                case 5:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40))
                    {
                        _impl_.blue_team_energy_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
                        CHK_(ptr);
                    }
                    else
                        goto handle_unusual;
                    continue;
                // int32 red_home_hp = 6;
                case 6:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48))
                    {
                        _impl_.red_home_hp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
                        CHK_(ptr);
                    }
                    else
                        goto handle_unusual;
                    continue;
                // int32 blue_home_hp = 7;
                case 7:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56))
                    {
                        _impl_.blue_home_hp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
                        CHK_(ptr);
                    }
                    else
                        goto handle_unusual;
                    continue;
                default:
                    goto handle_unusual;
            }  // switch
        handle_unusual:
            if ((tag == 0) || ((tag & 7) == 4))
            {
                CHK_(ptr);
                ctx->SetLastTag(tag);
                goto message_done;
            }
            ptr = UnknownFieldParse(
                tag,
                _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
                ptr,
                ctx
            );
            CHK_(ptr != nullptr);
        }  // while
    message_done:
        return ptr;
    failure:
        ptr = nullptr;
        goto message_done;
#undef CHK_
    }

    uint8_t* MessageOfAll::_InternalSerialize(
        uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream
    ) const
    {
        // @@protoc_insertion_point(serialize_to_array_start:protobuf.MessageOfAll)
        uint32_t cached_has_bits = 0;
        (void)cached_has_bits;

        // int32 game_time = 1;
        if (this->_internal_game_time() != 0)
        {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_game_time(), target);
        }

        // int32 red_team_score = 2;
        if (this->_internal_red_team_score() != 0)
        {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_red_team_score(), target);
        }

        // int32 blue_team_score = 3;
        if (this->_internal_blue_team_score() != 0)
        {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_blue_team_score(), target);
        }

        // int32 red_team_energy = 4;
        if (this->_internal_red_team_energy() != 0)
        {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_red_team_energy(), target);
        }

        // int32 blue_team_energy = 5;
        if (this->_internal_blue_team_energy() != 0)
        {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_blue_team_energy(), target);
        }

        // int32 red_home_hp = 6;
        if (this->_internal_red_home_hp() != 0)
        {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_red_home_hp(), target);
        }

        // int32 blue_home_hp = 7;
        if (this->_internal_blue_home_hp() != 0)
        {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt32ToArray(7, this->_internal_blue_home_hp(), target);
        }

        if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields()))
        {
            target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream
            );
        }
        // @@protoc_insertion_point(serialize_to_array_end:protobuf.MessageOfAll)
        return target;
    }

    size_t MessageOfAll::ByteSizeLong() const
    {
        // @@protoc_insertion_point(message_byte_size_start:protobuf.MessageOfAll)
        size_t total_size = 0;

        uint32_t cached_has_bits = 0;
        // Prevent compiler warnings about cached_has_bits being unused
        (void)cached_has_bits;

        // int32 game_time = 1;
        if (this->_internal_game_time() != 0)
        {
            total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_game_time());
        }

        // int32 red_team_score = 2;
        if (this->_internal_red_team_score() != 0)
        {
            total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_red_team_score());
        }

        // int32 blue_team_score = 3;
        if (this->_internal_blue_team_score() != 0)
        {
            total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_blue_team_score());
        }

        // int32 red_team_energy = 4;
        if (this->_internal_red_team_energy() != 0)
        {
            total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_red_team_energy());
        }

        // int32 blue_team_energy = 5;
        if (this->_internal_blue_team_energy() != 0)
        {
            total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_blue_team_energy());
        }

        // int32 red_home_hp = 6;
        if (this->_internal_red_home_hp() != 0)
        {
            total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_red_home_hp());
        }

        // int32 blue_home_hp = 7;
        if (this->_internal_blue_home_hp() != 0)
        {
            total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_blue_home_hp());
        }

        return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
    }

    const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MessageOfAll::_class_data_ = {
        ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
        MessageOfAll::MergeImpl};
    const ::PROTOBUF_NAMESPACE_ID::Message::ClassData* MessageOfAll::GetClassData() const
    {
        return &_class_data_;
    }

    void MessageOfAll::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg)
    {
        auto* const _this = static_cast<MessageOfAll*>(&to_msg);
        auto& from = static_cast<const MessageOfAll&>(from_msg);
        // @@protoc_insertion_point(class_specific_merge_from_start:protobuf.MessageOfAll)
        GOOGLE_DCHECK_NE(&from, _this);
        uint32_t cached_has_bits = 0;
        (void)cached_has_bits;

        if (from._internal_game_time() != 0)
        {
            _this->_internal_set_game_time(from._internal_game_time());
        }
        if (from._internal_red_team_score() != 0)
        {
            _this->_internal_set_red_team_score(from._internal_red_team_score());
        }
        if (from._internal_blue_team_score() != 0)
        {
            _this->_internal_set_blue_team_score(from._internal_blue_team_score());
        }
        if (from._internal_red_team_energy() != 0)
        {
            _this->_internal_set_red_team_energy(from._internal_red_team_energy());
        }
        if (from._internal_blue_team_energy() != 0)
        {
            _this->_internal_set_blue_team_energy(from._internal_blue_team_energy());
        }
        if (from._internal_red_home_hp() != 0)
        {
            _this->_internal_set_red_home_hp(from._internal_red_home_hp());
        }
        if (from._internal_blue_home_hp() != 0)
        {
            _this->_internal_set_blue_home_hp(from._internal_blue_home_hp());
        }
        _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
    }

    void MessageOfAll::CopyFrom(const MessageOfAll& from)
    {
        // @@protoc_insertion_point(class_specific_copy_from_start:protobuf.MessageOfAll)
        if (&from == this)
            return;
        Clear();
        MergeFrom(from);
    }

    bool MessageOfAll::IsInitialized() const
    {
        return true;
    }

    void MessageOfAll::InternalSwap(MessageOfAll* other)
    {
        using std::swap;
        _internal_metadata_.InternalSwap(&other->_internal_metadata_);
        ::PROTOBUF_NAMESPACE_ID::internal::memswap<
            PROTOBUF_FIELD_OFFSET(MessageOfAll, _impl_.blue_home_hp_) + sizeof(MessageOfAll::_impl_.blue_home_hp_) - PROTOBUF_FIELD_OFFSET(MessageOfAll, _impl_.game_time_)>(
            reinterpret_cast<char*>(&_impl_.game_time_),
            reinterpret_cast<char*>(&other->_impl_.game_time_)
        );
    }

    ::PROTOBUF_NAMESPACE_ID::Metadata MessageOfAll::GetMetadata() const
    {
        return ::_pbi::AssignDescriptors(
            &descriptor_table_Message2Clients_2eproto_getter, &descriptor_table_Message2Clients_2eproto_once, file_level_metadata_Message2Clients_2eproto[13]
        );
    }

    // ===================================================================

    class MessageToClient::_Internal
    {
    public:
        static const ::protobuf::MessageOfAll& all_message(const MessageToClient* msg);
    };

    const ::protobuf::MessageOfAll&
        MessageToClient::_Internal::all_message(const MessageToClient* msg)
    {
        return *msg->_impl_.all_message_;
    }
    MessageToClient::MessageToClient(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned) :
        ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned)
    {
        SharedCtor(arena, is_message_owned);
        // @@protoc_insertion_point(arena_constructor:protobuf.MessageToClient)
    }
    MessageToClient::MessageToClient(const MessageToClient& from) :
        ::PROTOBUF_NAMESPACE_ID::Message()
    {
        MessageToClient* const _this = this;
        (void)_this;
        new (&_impl_) Impl_{
            decltype(_impl_.obj_message_){from._impl_.obj_message_}, decltype(_impl_.all_message_){nullptr}, decltype(_impl_.game_state_){}, /*decltype(_impl_._cached_size_)*/ {}};

        _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
        if (from._internal_has_all_message())
        {
            _this->_impl_.all_message_ = new ::protobuf::MessageOfAll(*from._impl_.all_message_);
        }
        _this->_impl_.game_state_ = from._impl_.game_state_;
        // @@protoc_insertion_point(copy_constructor:protobuf.MessageToClient)
    }

    inline void MessageToClient::SharedCtor(
        ::_pb::Arena* arena, bool is_message_owned
    )
    {
        (void)arena;
        (void)is_message_owned;
        new (&_impl_) Impl_{
            decltype(_impl_.obj_message_){arena}, decltype(_impl_.all_message_){nullptr}, decltype(_impl_.game_state_){0}, /*decltype(_impl_._cached_size_)*/ {}};
    }

    MessageToClient::~MessageToClient()
    {
        // @@protoc_insertion_point(destructor:protobuf.MessageToClient)
        if (auto* arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>())
        {
            (void)arena;
            return;
        }
        SharedDtor();
    }

    inline void MessageToClient::SharedDtor()
    {
        GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
        _impl_.obj_message_.~RepeatedPtrField();
        if (this != internal_default_instance())
            delete _impl_.all_message_;
    }

    void MessageToClient::SetCachedSize(int size) const
    {
        _impl_._cached_size_.Set(size);
    }

    void MessageToClient::Clear()
    {
        // @@protoc_insertion_point(message_clear_start:protobuf.MessageToClient)
        uint32_t cached_has_bits = 0;
        // Prevent compiler warnings about cached_has_bits being unused
        (void)cached_has_bits;

        _impl_.obj_message_.Clear();
        if (GetArenaForAllocation() == nullptr && _impl_.all_message_ != nullptr)
        {
            delete _impl_.all_message_;
        }
        _impl_.all_message_ = nullptr;
        _impl_.game_state_ = 0;
        _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
    }

    const char* MessageToClient::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx)
    {
#define CHK_(x)                       \
    if (PROTOBUF_PREDICT_FALSE(!(x))) \
    goto failure
        while (!ctx->Done(&ptr))
        {
            uint32_t tag;
            ptr = ::_pbi::ReadTag(ptr, &tag);
            switch (tag >> 3)
            {
                // repeated .protobuf.MessageOfObj obj_message = 1;
                case 1:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10))
                    {
                        ptr -= 1;
                        do
                        {
                            ptr += 1;
                            ptr = ctx->ParseMessage(_internal_add_obj_message(), ptr);
                            CHK_(ptr);
                            if (!ctx->DataAvailable(ptr))
                                break;
                        } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
                    }
                    else
                        goto handle_unusual;
                    continue;
                // .protobuf.GameState game_state = 2;
                case 2:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16))
                    {
                        uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
                        CHK_(ptr);
                        _internal_set_game_state(static_cast<::protobuf::GameState>(val));
                    }
                    else
                        goto handle_unusual;
                    continue;
                // .protobuf.MessageOfAll all_message = 3;
                case 3:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26))
                    {
                        ptr = ctx->ParseMessage(_internal_mutable_all_message(), ptr);
                        CHK_(ptr);
                    }
                    else
                        goto handle_unusual;
                    continue;
                default:
                    goto handle_unusual;
            }  // switch
        handle_unusual:
            if ((tag == 0) || ((tag & 7) == 4))
            {
                CHK_(ptr);
                ctx->SetLastTag(tag);
                goto message_done;
            }
            ptr = UnknownFieldParse(
                tag,
                _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
                ptr,
                ctx
            );
            CHK_(ptr != nullptr);
        }  // while
    message_done:
        return ptr;
    failure:
        ptr = nullptr;
        goto message_done;
#undef CHK_
    }

    uint8_t* MessageToClient::_InternalSerialize(
        uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream
    ) const
    {
        // @@protoc_insertion_point(serialize_to_array_start:protobuf.MessageToClient)
        uint32_t cached_has_bits = 0;
        (void)cached_has_bits;

        // repeated .protobuf.MessageOfObj obj_message = 1;
        for (unsigned i = 0,
                      n = static_cast<unsigned>(this->_internal_obj_message_size());
             i < n;
             i++)
        {
            const auto& repfield = this->_internal_obj_message(i);
            target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
                InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
        }

        // .protobuf.GameState game_state = 2;
        if (this->_internal_game_state() != 0)
        {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                2, this->_internal_game_state(), target
            );
        }

        // .protobuf.MessageOfAll all_message = 3;
        if (this->_internal_has_all_message())
        {
            target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
                InternalWriteMessage(3, _Internal::all_message(this), _Internal::all_message(this).GetCachedSize(), target, stream);
        }

        if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields()))
        {
            target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream
            );
        }
        // @@protoc_insertion_point(serialize_to_array_end:protobuf.MessageToClient)
        return target;
    }

    size_t MessageToClient::ByteSizeLong() const
    {
        // @@protoc_insertion_point(message_byte_size_start:protobuf.MessageToClient)
        size_t total_size = 0;

        uint32_t cached_has_bits = 0;
        // Prevent compiler warnings about cached_has_bits being unused
        (void)cached_has_bits;

        // repeated .protobuf.MessageOfObj obj_message = 1;
        total_size += 1UL * this->_internal_obj_message_size();
        for (const auto& msg : this->_impl_.obj_message_)
        {
            total_size +=
                ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
        }

        // .protobuf.MessageOfAll all_message = 3;
        if (this->_internal_has_all_message())
        {
            total_size += 1 +
                          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
                              *_impl_.all_message_
                          );
        }

        // .protobuf.GameState game_state = 2;
        if (this->_internal_game_state() != 0)
        {
            total_size += 1 +
                          ::_pbi::WireFormatLite::EnumSize(this->_internal_game_state());
        }

        return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
    }

    const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MessageToClient::_class_data_ = {
        ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
        MessageToClient::MergeImpl};
    const ::PROTOBUF_NAMESPACE_ID::Message::ClassData* MessageToClient::GetClassData() const
    {
        return &_class_data_;
    }

    void MessageToClient::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg)
    {
        auto* const _this = static_cast<MessageToClient*>(&to_msg);
        auto& from = static_cast<const MessageToClient&>(from_msg);
        // @@protoc_insertion_point(class_specific_merge_from_start:protobuf.MessageToClient)
        GOOGLE_DCHECK_NE(&from, _this);
        uint32_t cached_has_bits = 0;
        (void)cached_has_bits;

        _this->_impl_.obj_message_.MergeFrom(from._impl_.obj_message_);
        if (from._internal_has_all_message())
        {
            _this->_internal_mutable_all_message()->::protobuf::MessageOfAll::MergeFrom(
                from._internal_all_message()
            );
        }
        if (from._internal_game_state() != 0)
        {
            _this->_internal_set_game_state(from._internal_game_state());
        }
        _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
    }

    void MessageToClient::CopyFrom(const MessageToClient& from)
    {
        // @@protoc_insertion_point(class_specific_copy_from_start:protobuf.MessageToClient)
        if (&from == this)
            return;
        Clear();
        MergeFrom(from);
    }

    bool MessageToClient::IsInitialized() const
    {
        return true;
    }

    void MessageToClient::InternalSwap(MessageToClient* other)
    {
        using std::swap;
        _internal_metadata_.InternalSwap(&other->_internal_metadata_);
        _impl_.obj_message_.InternalSwap(&other->_impl_.obj_message_);
        ::PROTOBUF_NAMESPACE_ID::internal::memswap<
            PROTOBUF_FIELD_OFFSET(MessageToClient, _impl_.game_state_) + sizeof(MessageToClient::_impl_.game_state_) - PROTOBUF_FIELD_OFFSET(MessageToClient, _impl_.all_message_)>(
            reinterpret_cast<char*>(&_impl_.all_message_),
            reinterpret_cast<char*>(&other->_impl_.all_message_)
        );
    }

    ::PROTOBUF_NAMESPACE_ID::Metadata MessageToClient::GetMetadata() const
    {
        return ::_pbi::AssignDescriptors(
            &descriptor_table_Message2Clients_2eproto_getter, &descriptor_table_Message2Clients_2eproto_once, file_level_metadata_Message2Clients_2eproto[14]
        );
    }

    // ===================================================================

    class MoveRes::_Internal
    {
    public:
    };

    MoveRes::MoveRes(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned) :
        ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned)
    {
        SharedCtor(arena, is_message_owned);
        // @@protoc_insertion_point(arena_constructor:protobuf.MoveRes)
    }
    MoveRes::MoveRes(const MoveRes& from) :
        ::PROTOBUF_NAMESPACE_ID::Message()
    {
        MoveRes* const _this = this;
        (void)_this;
        new (&_impl_) Impl_{
            decltype(_impl_.actual_speed_){}, decltype(_impl_.actual_angle_){}, decltype(_impl_.act_success_){}, /*decltype(_impl_._cached_size_)*/ {}};

        _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
        ::memcpy(&_impl_.actual_speed_, &from._impl_.actual_speed_, static_cast<size_t>(reinterpret_cast<char*>(&_impl_.act_success_) - reinterpret_cast<char*>(&_impl_.actual_speed_)) + sizeof(_impl_.act_success_));
        // @@protoc_insertion_point(copy_constructor:protobuf.MoveRes)
    }

    inline void MoveRes::SharedCtor(
        ::_pb::Arena* arena, bool is_message_owned
    )
    {
        (void)arena;
        (void)is_message_owned;
        new (&_impl_) Impl_{
            decltype(_impl_.actual_speed_){int64_t{0}}, decltype(_impl_.actual_angle_){0}, decltype(_impl_.act_success_){false}, /*decltype(_impl_._cached_size_)*/ {}};
    }

    MoveRes::~MoveRes()
    {
        // @@protoc_insertion_point(destructor:protobuf.MoveRes)
        if (auto* arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>())
        {
            (void)arena;
            return;
        }
        SharedDtor();
    }

    inline void MoveRes::SharedDtor()
    {
        GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
    }

    void MoveRes::SetCachedSize(int size) const
    {
        _impl_._cached_size_.Set(size);
    }

    void MoveRes::Clear()
    {
        // @@protoc_insertion_point(message_clear_start:protobuf.MoveRes)
        uint32_t cached_has_bits = 0;
        // Prevent compiler warnings about cached_has_bits being unused
        (void)cached_has_bits;

        ::memset(&_impl_.actual_speed_, 0, static_cast<size_t>(reinterpret_cast<char*>(&_impl_.act_success_) - reinterpret_cast<char*>(&_impl_.actual_speed_)) + sizeof(_impl_.act_success_));
        _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
    }

    const char* MoveRes::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx)
    {
#define CHK_(x)                       \
    if (PROTOBUF_PREDICT_FALSE(!(x))) \
    goto failure
        while (!ctx->Done(&ptr))
        {
            uint32_t tag;
            ptr = ::_pbi::ReadTag(ptr, &tag);
            switch (tag >> 3)
            {
                // int64 actual_speed = 1;
                case 1:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8))
                    {
                        _impl_.actual_speed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
                        CHK_(ptr);
                    }
                    else
                        goto handle_unusual;
                    continue;
                // double actual_angle = 2;
                case 2:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17))
                    {
                        _impl_.actual_angle_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
                        ptr += sizeof(double);
                    }
                    else
                        goto handle_unusual;
                    continue;
                // bool act_success = 3;
                case 3:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24))
                    {
                        _impl_.act_success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
                        CHK_(ptr);
                    }
                    else
                        goto handle_unusual;
                    continue;
                default:
                    goto handle_unusual;
            }  // switch
        handle_unusual:
            if ((tag == 0) || ((tag & 7) == 4))
            {
                CHK_(ptr);
                ctx->SetLastTag(tag);
                goto message_done;
            }
            ptr = UnknownFieldParse(
                tag,
                _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
                ptr,
                ctx
            );
            CHK_(ptr != nullptr);
        }  // while
    message_done:
        return ptr;
    failure:
        ptr = nullptr;
        goto message_done;
#undef CHK_
    }

    uint8_t* MoveRes::_InternalSerialize(
        uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream
    ) const
    {
        // @@protoc_insertion_point(serialize_to_array_start:protobuf.MoveRes)
        uint32_t cached_has_bits = 0;
        (void)cached_has_bits;

        // int64 actual_speed = 1;
        if (this->_internal_actual_speed() != 0)
        {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_actual_speed(), target);
        }

        // double actual_angle = 2;
        static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
        double tmp_actual_angle = this->_internal_actual_angle();
        uint64_t raw_actual_angle;
        memcpy(&raw_actual_angle, &tmp_actual_angle, sizeof(tmp_actual_angle));
        if (raw_actual_angle != 0)
        {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_actual_angle(), target);
        }

        // bool act_success = 3;
        if (this->_internal_act_success() != 0)
        {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_act_success(), target);
        }

        if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields()))
        {
            target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream
            );
        }
        // @@protoc_insertion_point(serialize_to_array_end:protobuf.MoveRes)
        return target;
    }

    size_t MoveRes::ByteSizeLong() const
    {
        // @@protoc_insertion_point(message_byte_size_start:protobuf.MoveRes)
        size_t total_size = 0;

        uint32_t cached_has_bits = 0;
        // Prevent compiler warnings about cached_has_bits being unused
        (void)cached_has_bits;

        // int64 actual_speed = 1;
        if (this->_internal_actual_speed() != 0)
        {
            total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_actual_speed());
        }

        // double actual_angle = 2;
        static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
        double tmp_actual_angle = this->_internal_actual_angle();
        uint64_t raw_actual_angle;
        memcpy(&raw_actual_angle, &tmp_actual_angle, sizeof(tmp_actual_angle));
        if (raw_actual_angle != 0)
        {
            total_size += 1 + 8;
        }

        // bool act_success = 3;
        if (this->_internal_act_success() != 0)
        {
            total_size += 1 + 1;
        }

        return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
    }

    const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MoveRes::_class_data_ = {
        ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
        MoveRes::MergeImpl};
    const ::PROTOBUF_NAMESPACE_ID::Message::ClassData* MoveRes::GetClassData() const
    {
        return &_class_data_;
    }

    void MoveRes::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg)
    {
        auto* const _this = static_cast<MoveRes*>(&to_msg);
        auto& from = static_cast<const MoveRes&>(from_msg);
        // @@protoc_insertion_point(class_specific_merge_from_start:protobuf.MoveRes)
        GOOGLE_DCHECK_NE(&from, _this);
        uint32_t cached_has_bits = 0;
        (void)cached_has_bits;

        if (from._internal_actual_speed() != 0)
        {
            _this->_internal_set_actual_speed(from._internal_actual_speed());
        }
        static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
        double tmp_actual_angle = from._internal_actual_angle();
        uint64_t raw_actual_angle;
        memcpy(&raw_actual_angle, &tmp_actual_angle, sizeof(tmp_actual_angle));
        if (raw_actual_angle != 0)
        {
            _this->_internal_set_actual_angle(from._internal_actual_angle());
        }
        if (from._internal_act_success() != 0)
        {
            _this->_internal_set_act_success(from._internal_act_success());
        }
        _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
    }

    void MoveRes::CopyFrom(const MoveRes& from)
    {
        // @@protoc_insertion_point(class_specific_copy_from_start:protobuf.MoveRes)
        if (&from == this)
            return;
        Clear();
        MergeFrom(from);
    }

    bool MoveRes::IsInitialized() const
    {
        return true;
    }

    void MoveRes::InternalSwap(MoveRes* other)
    {
        using std::swap;
        _internal_metadata_.InternalSwap(&other->_internal_metadata_);
        ::PROTOBUF_NAMESPACE_ID::internal::memswap<
            PROTOBUF_FIELD_OFFSET(MoveRes, _impl_.act_success_) + sizeof(MoveRes::_impl_.act_success_) - PROTOBUF_FIELD_OFFSET(MoveRes, _impl_.actual_speed_)>(
            reinterpret_cast<char*>(&_impl_.actual_speed_),
            reinterpret_cast<char*>(&other->_impl_.actual_speed_)
        );
    }

    ::PROTOBUF_NAMESPACE_ID::Metadata MoveRes::GetMetadata() const
    {
        return ::_pbi::AssignDescriptors(
            &descriptor_table_Message2Clients_2eproto_getter, &descriptor_table_Message2Clients_2eproto_once, file_level_metadata_Message2Clients_2eproto[15]
        );
    }

    // ===================================================================

    class BoolRes::_Internal
    {
    public:
    };

    BoolRes::BoolRes(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned) :
        ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned)
    {
        SharedCtor(arena, is_message_owned);
        // @@protoc_insertion_point(arena_constructor:protobuf.BoolRes)
    }
    BoolRes::BoolRes(const BoolRes& from) :
        ::PROTOBUF_NAMESPACE_ID::Message()
    {
        BoolRes* const _this = this;
        (void)_this;
        new (&_impl_) Impl_{
            decltype(_impl_.act_success_){}, /*decltype(_impl_._cached_size_)*/ {}};

        _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
        _this->_impl_.act_success_ = from._impl_.act_success_;
        // @@protoc_insertion_point(copy_constructor:protobuf.BoolRes)
    }

    inline void BoolRes::SharedCtor(
        ::_pb::Arena* arena, bool is_message_owned
    )
    {
        (void)arena;
        (void)is_message_owned;
        new (&_impl_) Impl_{
            decltype(_impl_.act_success_){false}, /*decltype(_impl_._cached_size_)*/ {}};
    }

    BoolRes::~BoolRes()
    {
        // @@protoc_insertion_point(destructor:protobuf.BoolRes)
        if (auto* arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>())
        {
            (void)arena;
            return;
        }
        SharedDtor();
    }

    inline void BoolRes::SharedDtor()
    {
        GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
    }

    void BoolRes::SetCachedSize(int size) const
    {
        _impl_._cached_size_.Set(size);
    }

    void BoolRes::Clear()
    {
        // @@protoc_insertion_point(message_clear_start:protobuf.BoolRes)
        uint32_t cached_has_bits = 0;
        // Prevent compiler warnings about cached_has_bits being unused
        (void)cached_has_bits;

        _impl_.act_success_ = false;
        _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
    }

    const char* BoolRes::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx)
    {
#define CHK_(x)                       \
    if (PROTOBUF_PREDICT_FALSE(!(x))) \
    goto failure
        while (!ctx->Done(&ptr))
        {
            uint32_t tag;
            ptr = ::_pbi::ReadTag(ptr, &tag);
            switch (tag >> 3)
            {
                // bool act_success = 1;
                case 1:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8))
                    {
                        _impl_.act_success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
                        CHK_(ptr);
                    }
                    else
                        goto handle_unusual;
                    continue;
                default:
                    goto handle_unusual;
            }  // switch
        handle_unusual:
            if ((tag == 0) || ((tag & 7) == 4))
            {
                CHK_(ptr);
                ctx->SetLastTag(tag);
                goto message_done;
            }
            ptr = UnknownFieldParse(
                tag,
                _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
                ptr,
                ctx
            );
            CHK_(ptr != nullptr);
        }  // while
    message_done:
        return ptr;
    failure:
        ptr = nullptr;
        goto message_done;
#undef CHK_
    }

    uint8_t* BoolRes::_InternalSerialize(
        uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream
    ) const
    {
        // @@protoc_insertion_point(serialize_to_array_start:protobuf.BoolRes)
        uint32_t cached_has_bits = 0;
        (void)cached_has_bits;

        // bool act_success = 1;
        if (this->_internal_act_success() != 0)
        {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_act_success(), target);
        }

        if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields()))
        {
            target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream
            );
        }
        // @@protoc_insertion_point(serialize_to_array_end:protobuf.BoolRes)
        return target;
    }

    size_t BoolRes::ByteSizeLong() const
    {
        // @@protoc_insertion_point(message_byte_size_start:protobuf.BoolRes)
        size_t total_size = 0;

        uint32_t cached_has_bits = 0;
        // Prevent compiler warnings about cached_has_bits being unused
        (void)cached_has_bits;

        // bool act_success = 1;
        if (this->_internal_act_success() != 0)
        {
            total_size += 1 + 1;
        }

        return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
    }

    const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BoolRes::_class_data_ = {
        ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
        BoolRes::MergeImpl};
    const ::PROTOBUF_NAMESPACE_ID::Message::ClassData* BoolRes::GetClassData() const
    {
        return &_class_data_;
    }

    void BoolRes::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg)
    {
        auto* const _this = static_cast<BoolRes*>(&to_msg);
        auto& from = static_cast<const BoolRes&>(from_msg);
        // @@protoc_insertion_point(class_specific_merge_from_start:protobuf.BoolRes)
        GOOGLE_DCHECK_NE(&from, _this);
        uint32_t cached_has_bits = 0;
        (void)cached_has_bits;

        if (from._internal_act_success() != 0)
        {
            _this->_internal_set_act_success(from._internal_act_success());
        }
        _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
    }

    void BoolRes::CopyFrom(const BoolRes& from)
    {
        // @@protoc_insertion_point(class_specific_copy_from_start:protobuf.BoolRes)
        if (&from == this)
            return;
        Clear();
        MergeFrom(from);
    }

    bool BoolRes::IsInitialized() const
    {
        return true;
    }

    void BoolRes::InternalSwap(BoolRes* other)
    {
        using std::swap;
        _internal_metadata_.InternalSwap(&other->_internal_metadata_);
        swap(_impl_.act_success_, other->_impl_.act_success_);
    }

    ::PROTOBUF_NAMESPACE_ID::Metadata BoolRes::GetMetadata() const
    {
        return ::_pbi::AssignDescriptors(
            &descriptor_table_Message2Clients_2eproto_getter, &descriptor_table_Message2Clients_2eproto_once, file_level_metadata_Message2Clients_2eproto[16]
        );
    }

    // ===================================================================

    class SweeperInfoRes::_Internal
    {
    public:
    };

    SweeperInfoRes::SweeperInfoRes(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned) :
        ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned)
    {
        SharedCtor(arena, is_message_owned);
        // @@protoc_insertion_point(arena_constructor:protobuf.SweeperInfoRes)
    }
    SweeperInfoRes::SweeperInfoRes(const SweeperInfoRes& from) :
        ::PROTOBUF_NAMESPACE_ID::Message()
    {
        SweeperInfoRes* const _this = this;
        (void)_this;
        new (&_impl_) Impl_{
            decltype(_impl_.sweeper_info_){from._impl_.sweeper_info_}, /*decltype(_impl_._cached_size_)*/ {}};

        _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
        // @@protoc_insertion_point(copy_constructor:protobuf.SweeperInfoRes)
    }

    inline void SweeperInfoRes::SharedCtor(
        ::_pb::Arena* arena, bool is_message_owned
    )
    {
        (void)arena;
        (void)is_message_owned;
        new (&_impl_) Impl_{
            decltype(_impl_.sweeper_info_){arena}, /*decltype(_impl_._cached_size_)*/ {}};
    }

    SweeperInfoRes::~SweeperInfoRes()
    {
        // @@protoc_insertion_point(destructor:protobuf.SweeperInfoRes)
        if (auto* arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>())
        {
            (void)arena;
            return;
        }
        SharedDtor();
    }

    inline void SweeperInfoRes::SharedDtor()
    {
        GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
        _impl_.sweeper_info_.~RepeatedPtrField();
    }

    void SweeperInfoRes::SetCachedSize(int size) const
    {
        _impl_._cached_size_.Set(size);
    }

    void SweeperInfoRes::Clear()
    {
        // @@protoc_insertion_point(message_clear_start:protobuf.SweeperInfoRes)
        uint32_t cached_has_bits = 0;
        // Prevent compiler warnings about cached_has_bits being unused
        (void)cached_has_bits;

        _impl_.sweeper_info_.Clear();
        _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
    }

    const char* SweeperInfoRes::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx)
    {
#define CHK_(x)                       \
    if (PROTOBUF_PREDICT_FALSE(!(x))) \
    goto failure
        while (!ctx->Done(&ptr))
        {
            uint32_t tag;
            ptr = ::_pbi::ReadTag(ptr, &tag);
            switch (tag >> 3)
            {
                // repeated .protobuf.MessageOfSweeper sweeper_info = 1;
                case 1:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10))
                    {
                        ptr -= 1;
                        do
                        {
                            ptr += 1;
                            ptr = ctx->ParseMessage(_internal_add_sweeper_info(), ptr);
                            CHK_(ptr);
                            if (!ctx->DataAvailable(ptr))
                                break;
                        } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
                    }
                    else
                        goto handle_unusual;
                    continue;
                default:
                    goto handle_unusual;
            }  // switch
        handle_unusual:
            if ((tag == 0) || ((tag & 7) == 4))
            {
                CHK_(ptr);
                ctx->SetLastTag(tag);
                goto message_done;
            }
            ptr = UnknownFieldParse(
                tag,
                _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
                ptr,
                ctx
            );
            CHK_(ptr != nullptr);
        }  // while
    message_done:
        return ptr;
    failure:
        ptr = nullptr;
        goto message_done;
#undef CHK_
    }

    uint8_t* SweeperInfoRes::_InternalSerialize(
        uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream
    ) const
    {
        // @@protoc_insertion_point(serialize_to_array_start:protobuf.SweeperInfoRes)
        uint32_t cached_has_bits = 0;
        (void)cached_has_bits;

        // repeated .protobuf.MessageOfSweeper sweeper_info = 1;
        for (unsigned i = 0,
                      n = static_cast<unsigned>(this->_internal_sweeper_info_size());
             i < n;
             i++)
        {
            const auto& repfield = this->_internal_sweeper_info(i);
            target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
                InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
        }

        if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields()))
        {
            target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream
            );
        }
        // @@protoc_insertion_point(serialize_to_array_end:protobuf.SweeperInfoRes)
        return target;
    }

    size_t SweeperInfoRes::ByteSizeLong() const
    {
        // @@protoc_insertion_point(message_byte_size_start:protobuf.SweeperInfoRes)
        size_t total_size = 0;

        uint32_t cached_has_bits = 0;
        // Prevent compiler warnings about cached_has_bits being unused
        (void)cached_has_bits;

        // repeated .protobuf.MessageOfSweeper sweeper_info = 1;
        total_size += 1UL * this->_internal_sweeper_info_size();
        for (const auto& msg : this->_impl_.sweeper_info_)
        {
            total_size +=
                ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
        }

        return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
    }

    const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SweeperInfoRes::_class_data_ = {
        ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
        SweeperInfoRes::MergeImpl};
    const ::PROTOBUF_NAMESPACE_ID::Message::ClassData* SweeperInfoRes::GetClassData() const
    {
        return &_class_data_;
    }

    void SweeperInfoRes::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg)
    {
        auto* const _this = static_cast<SweeperInfoRes*>(&to_msg);
        auto& from = static_cast<const SweeperInfoRes&>(from_msg);
        // @@protoc_insertion_point(class_specific_merge_from_start:protobuf.SweeperInfoRes)
        GOOGLE_DCHECK_NE(&from, _this);
        uint32_t cached_has_bits = 0;
        (void)cached_has_bits;

        _this->_impl_.sweeper_info_.MergeFrom(from._impl_.sweeper_info_);
        _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
    }

    void SweeperInfoRes::CopyFrom(const SweeperInfoRes& from)
    {
        // @@protoc_insertion_point(class_specific_copy_from_start:protobuf.SweeperInfoRes)
        if (&from == this)
            return;
        Clear();
        MergeFrom(from);
    }

    bool SweeperInfoRes::IsInitialized() const
    {
        return true;
    }

    void SweeperInfoRes::InternalSwap(SweeperInfoRes* other)
    {
        using std::swap;
        _internal_metadata_.InternalSwap(&other->_internal_metadata_);
        _impl_.sweeper_info_.InternalSwap(&other->_impl_.sweeper_info_);
    }

    ::PROTOBUF_NAMESPACE_ID::Metadata SweeperInfoRes::GetMetadata() const
    {
        return ::_pbi::AssignDescriptors(
            &descriptor_table_Message2Clients_2eproto_getter, &descriptor_table_Message2Clients_2eproto_once, file_level_metadata_Message2Clients_2eproto[17]
        );
    }

    // ===================================================================

    class EcoRes::_Internal
    {
    public:
    };

    EcoRes::EcoRes(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned) :
        ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned)
    {
        SharedCtor(arena, is_message_owned);
        // @@protoc_insertion_point(arena_constructor:protobuf.EcoRes)
    }
    EcoRes::EcoRes(const EcoRes& from) :
        ::PROTOBUF_NAMESPACE_ID::Message()
    {
        EcoRes* const _this = this;
        (void)_this;
        new (&_impl_) Impl_{
            decltype(_impl_.economy_){}, /*decltype(_impl_._cached_size_)*/ {}};

        _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
        _this->_impl_.economy_ = from._impl_.economy_;
        // @@protoc_insertion_point(copy_constructor:protobuf.EcoRes)
    }

    inline void EcoRes::SharedCtor(
        ::_pb::Arena* arena, bool is_message_owned
    )
    {
        (void)arena;
        (void)is_message_owned;
        new (&_impl_) Impl_{
            decltype(_impl_.economy_){int64_t{0}}, /*decltype(_impl_._cached_size_)*/ {}};
    }

    EcoRes::~EcoRes()
    {
        // @@protoc_insertion_point(destructor:protobuf.EcoRes)
        if (auto* arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>())
        {
            (void)arena;
            return;
        }
        SharedDtor();
    }

    inline void EcoRes::SharedDtor()
    {
        GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
    }

    void EcoRes::SetCachedSize(int size) const
    {
        _impl_._cached_size_.Set(size);
    }

    void EcoRes::Clear()
    {
        // @@protoc_insertion_point(message_clear_start:protobuf.EcoRes)
        uint32_t cached_has_bits = 0;
        // Prevent compiler warnings about cached_has_bits being unused
        (void)cached_has_bits;

        _impl_.economy_ = int64_t{0};
        _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
    }

    const char* EcoRes::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx)
    {
#define CHK_(x)                       \
    if (PROTOBUF_PREDICT_FALSE(!(x))) \
    goto failure
        while (!ctx->Done(&ptr))
        {
            uint32_t tag;
            ptr = ::_pbi::ReadTag(ptr, &tag);
            switch (tag >> 3)
            {
                // int64 economy = 1;
                case 1:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8))
                    {
                        _impl_.economy_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
                        CHK_(ptr);
                    }
                    else
                        goto handle_unusual;
                    continue;
                default:
                    goto handle_unusual;
            }  // switch
        handle_unusual:
            if ((tag == 0) || ((tag & 7) == 4))
            {
                CHK_(ptr);
                ctx->SetLastTag(tag);
                goto message_done;
            }
            ptr = UnknownFieldParse(
                tag,
                _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
                ptr,
                ctx
            );
            CHK_(ptr != nullptr);
        }  // while
    message_done:
        return ptr;
    failure:
        ptr = nullptr;
        goto message_done;
#undef CHK_
    }

    uint8_t* EcoRes::_InternalSerialize(
        uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream
    ) const
    {
        // @@protoc_insertion_point(serialize_to_array_start:protobuf.EcoRes)
        uint32_t cached_has_bits = 0;
        (void)cached_has_bits;

        // int64 economy = 1;
        if (this->_internal_economy() != 0)
        {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_economy(), target);
        }

        if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields()))
        {
            target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream
            );
        }
        // @@protoc_insertion_point(serialize_to_array_end:protobuf.EcoRes)
        return target;
    }

    size_t EcoRes::ByteSizeLong() const
    {
        // @@protoc_insertion_point(message_byte_size_start:protobuf.EcoRes)
        size_t total_size = 0;

        uint32_t cached_has_bits = 0;
        // Prevent compiler warnings about cached_has_bits being unused
        (void)cached_has_bits;

        // int64 economy = 1;
        if (this->_internal_economy() != 0)
        {
            total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_economy());
        }

        return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
    }

    const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EcoRes::_class_data_ = {
        ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
        EcoRes::MergeImpl};
    const ::PROTOBUF_NAMESPACE_ID::Message::ClassData* EcoRes::GetClassData() const
    {
        return &_class_data_;
    }

    void EcoRes::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg)
    {
        auto* const _this = static_cast<EcoRes*>(&to_msg);
        auto& from = static_cast<const EcoRes&>(from_msg);
        // @@protoc_insertion_point(class_specific_merge_from_start:protobuf.EcoRes)
        GOOGLE_DCHECK_NE(&from, _this);
        uint32_t cached_has_bits = 0;
        (void)cached_has_bits;

        if (from._internal_economy() != 0)
        {
            _this->_internal_set_economy(from._internal_economy());
        }
        _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
    }

    void EcoRes::CopyFrom(const EcoRes& from)
    {
        // @@protoc_insertion_point(class_specific_copy_from_start:protobuf.EcoRes)
        if (&from == this)
            return;
        Clear();
        MergeFrom(from);
    }

    bool EcoRes::IsInitialized() const
    {
        return true;
    }

    void EcoRes::InternalSwap(EcoRes* other)
    {
        using std::swap;
        _internal_metadata_.InternalSwap(&other->_internal_metadata_);
        swap(_impl_.economy_, other->_impl_.economy_);
    }

    ::PROTOBUF_NAMESPACE_ID::Metadata EcoRes::GetMetadata() const
    {
        return ::_pbi::AssignDescriptors(
            &descriptor_table_Message2Clients_2eproto_getter, &descriptor_table_Message2Clients_2eproto_once, file_level_metadata_Message2Clients_2eproto[18]
        );
    }

    // ===================================================================

    class MessageOfNews::_Internal
    {
    public:
    };

    MessageOfNews::MessageOfNews(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned) :
        ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned)
    {
        SharedCtor(arena, is_message_owned);
        // @@protoc_insertion_point(arena_constructor:protobuf.MessageOfNews)
    }
    MessageOfNews::MessageOfNews(const MessageOfNews& from) :
        ::PROTOBUF_NAMESPACE_ID::Message()
    {
        MessageOfNews* const _this = this;
        (void)_this;
        new (&_impl_) Impl_{
            decltype(_impl_.from_id_){}, decltype(_impl_.to_id_){}, decltype(_impl_.news_){}, /*decltype(_impl_._cached_size_)*/ {}, /*decltype(_impl_._oneof_case_)*/ {}};

        _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
        ::memcpy(&_impl_.from_id_, &from._impl_.from_id_, static_cast<size_t>(reinterpret_cast<char*>(&_impl_.to_id_) - reinterpret_cast<char*>(&_impl_.from_id_)) + sizeof(_impl_.to_id_));
        clear_has_news();
        switch (from.news_case())
        {
            case kTextMessage:
                {
                    _this->_internal_set_text_message(from._internal_text_message());
                    break;
                }
            case kBinaryMessage:
                {
                    _this->_internal_set_binary_message(from._internal_binary_message());
                    break;
                }
            case NEWS_NOT_SET:
                {
                    break;
                }
        }
        // @@protoc_insertion_point(copy_constructor:protobuf.MessageOfNews)
    }

    inline void MessageOfNews::SharedCtor(
        ::_pb::Arena* arena, bool is_message_owned
    )
    {
        (void)arena;
        (void)is_message_owned;
        new (&_impl_) Impl_{
            decltype(_impl_.from_id_){int64_t{0}}, decltype(_impl_.to_id_){int64_t{0}}, decltype(_impl_.news_){}, /*decltype(_impl_._cached_size_)*/ {}, /*decltype(_impl_._oneof_case_)*/ {}};
        clear_has_news();
    }

    MessageOfNews::~MessageOfNews()
    {
        // @@protoc_insertion_point(destructor:protobuf.MessageOfNews)
        if (auto* arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>())
        {
            (void)arena;
            return;
        }
        SharedDtor();
    }

    inline void MessageOfNews::SharedDtor()
    {
        GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
        if (has_news())
        {
            clear_news();
        }
    }

    void MessageOfNews::SetCachedSize(int size) const
    {
        _impl_._cached_size_.Set(size);
    }

    void MessageOfNews::clear_news()
    {
        // @@protoc_insertion_point(one_of_clear_start:protobuf.MessageOfNews)
        switch (news_case())
        {
            case kTextMessage:
                {
                    _impl_.news_.text_message_.Destroy();
                    break;
                }
            case kBinaryMessage:
                {
                    _impl_.news_.binary_message_.Destroy();
                    break;
                }
            case NEWS_NOT_SET:
                {
                    break;
                }
        }
        _impl_._oneof_case_[0] = NEWS_NOT_SET;
    }

    void MessageOfNews::Clear()
    {
        // @@protoc_insertion_point(message_clear_start:protobuf.MessageOfNews)
        uint32_t cached_has_bits = 0;
        // Prevent compiler warnings about cached_has_bits being unused
        (void)cached_has_bits;

        ::memset(&_impl_.from_id_, 0, static_cast<size_t>(reinterpret_cast<char*>(&_impl_.to_id_) - reinterpret_cast<char*>(&_impl_.from_id_)) + sizeof(_impl_.to_id_));
        clear_news();
        _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
    }

    const char* MessageOfNews::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx)
    {
#define CHK_(x)                       \
    if (PROTOBUF_PREDICT_FALSE(!(x))) \
    goto failure
        while (!ctx->Done(&ptr))
        {
            uint32_t tag;
            ptr = ::_pbi::ReadTag(ptr, &tag);
            switch (tag >> 3)
            {
                // string text_message = 1;
                case 1:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10))
                    {
                        auto str = _internal_mutable_text_message();
                        ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
                        CHK_(ptr);
                        CHK_(::_pbi::VerifyUTF8(str, "protobuf.MessageOfNews.text_message"));
                    }
                    else
                        goto handle_unusual;
                    continue;
                // int64 from_id = 2;
                case 2:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16))
                    {
                        _impl_.from_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
                        CHK_(ptr);
                    }
                    else
                        goto handle_unusual;
                    continue;
                // int64 to_id = 3;
                case 3:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24))
                    {
                        _impl_.to_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
                        CHK_(ptr);
                    }
                    else
                        goto handle_unusual;
                    continue;
                // bytes binary_message = 4;
                case 4:
                    if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34))
                    {
                        auto str = _internal_mutable_binary_message();
                        ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
                        CHK_(ptr);
                    }
                    else
                        goto handle_unusual;
                    continue;
                default:
                    goto handle_unusual;
            }  // switch
        handle_unusual:
            if ((tag == 0) || ((tag & 7) == 4))
            {
                CHK_(ptr);
                ctx->SetLastTag(tag);
                goto message_done;
            }
            ptr = UnknownFieldParse(
                tag,
                _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
                ptr,
                ctx
            );
            CHK_(ptr != nullptr);
        }  // while
    message_done:
        return ptr;
    failure:
        ptr = nullptr;
        goto message_done;
#undef CHK_
    }

    uint8_t* MessageOfNews::_InternalSerialize(
        uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream
    ) const
    {
        // @@protoc_insertion_point(serialize_to_array_start:protobuf.MessageOfNews)
        uint32_t cached_has_bits = 0;
        (void)cached_has_bits;

        // string text_message = 1;
        if (_internal_has_text_message())
        {
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
                this->_internal_text_message().data(), static_cast<int>(this->_internal_text_message().length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "protobuf.MessageOfNews.text_message"
            );
            target = stream->WriteStringMaybeAliased(
                1, this->_internal_text_message(), target
            );
        }

        // int64 from_id = 2;
        if (this->_internal_from_id() != 0)
        {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_from_id(), target);
        }

        // int64 to_id = 3;
        if (this->_internal_to_id() != 0)
        {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_to_id(), target);
        }

        // bytes binary_message = 4;
        if (_internal_has_binary_message())
        {
            target = stream->WriteBytesMaybeAliased(
                4, this->_internal_binary_message(), target
            );
        }

        if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields()))
        {
            target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream
            );
        }
        // @@protoc_insertion_point(serialize_to_array_end:protobuf.MessageOfNews)
        return target;
    }

    size_t MessageOfNews::ByteSizeLong() const
    {
        // @@protoc_insertion_point(message_byte_size_start:protobuf.MessageOfNews)
        size_t total_size = 0;

        uint32_t cached_has_bits = 0;
        // Prevent compiler warnings about cached_has_bits being unused
        (void)cached_has_bits;

        // int64 from_id = 2;
        if (this->_internal_from_id() != 0)
        {
            total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_from_id());
        }

        // int64 to_id = 3;
        if (this->_internal_to_id() != 0)
        {
            total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_to_id());
        }

        switch (news_case())
        {
            // string text_message = 1;
            case kTextMessage:
                {
                    total_size += 1 +
                                  ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_text_message()
                                  );
                    break;
                }
            // bytes binary_message = 4;
            case kBinaryMessage:
                {
                    total_size += 1 +
                                  ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                      this->_internal_binary_message()
                                  );
                    break;
                }
            case NEWS_NOT_SET:
                {
                    break;
                }
        }
        return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
    }

    const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MessageOfNews::_class_data_ = {
        ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
        MessageOfNews::MergeImpl};
    const ::PROTOBUF_NAMESPACE_ID::Message::ClassData* MessageOfNews::GetClassData() const
    {
        return &_class_data_;
    }

    void MessageOfNews::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg)
    {
        auto* const _this = static_cast<MessageOfNews*>(&to_msg);
        auto& from = static_cast<const MessageOfNews&>(from_msg);
        // @@protoc_insertion_point(class_specific_merge_from_start:protobuf.MessageOfNews)
        GOOGLE_DCHECK_NE(&from, _this);
        uint32_t cached_has_bits = 0;
        (void)cached_has_bits;

        if (from._internal_from_id() != 0)
        {
            _this->_internal_set_from_id(from._internal_from_id());
        }
        if (from._internal_to_id() != 0)
        {
            _this->_internal_set_to_id(from._internal_to_id());
        }
        switch (from.news_case())
        {
            case kTextMessage:
                {
                    _this->_internal_set_text_message(from._internal_text_message());
                    break;
                }
            case kBinaryMessage:
                {
                    _this->_internal_set_binary_message(from._internal_binary_message());
                    break;
                }
            case NEWS_NOT_SET:
                {
                    break;
                }
        }
        _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
    }

    void MessageOfNews::CopyFrom(const MessageOfNews& from)
    {
        // @@protoc_insertion_point(class_specific_copy_from_start:protobuf.MessageOfNews)
        if (&from == this)
            return;
        Clear();
        MergeFrom(from);
    }

    bool MessageOfNews::IsInitialized() const
    {
        return true;
    }

    void MessageOfNews::InternalSwap(MessageOfNews* other)
    {
        using std::swap;
        _internal_metadata_.InternalSwap(&other->_internal_metadata_);
        ::PROTOBUF_NAMESPACE_ID::internal::memswap<
            PROTOBUF_FIELD_OFFSET(MessageOfNews, _impl_.to_id_) + sizeof(MessageOfNews::_impl_.to_id_) - PROTOBUF_FIELD_OFFSET(MessageOfNews, _impl_.from_id_)>(
            reinterpret_cast<char*>(&_impl_.from_id_),
            reinterpret_cast<char*>(&other->_impl_.from_id_)
        );
        swap(_impl_.news_, other->_impl_.news_);
        swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
    }

    ::PROTOBUF_NAMESPACE_ID::Metadata MessageOfNews::GetMetadata() const
    {
        return ::_pbi::AssignDescriptors(
            &descriptor_table_Message2Clients_2eproto_getter, &descriptor_table_Message2Clients_2eproto_once, file_level_metadata_Message2Clients_2eproto[19]
        );
    }

    // @@protoc_insertion_point(namespace_scope)
}  // namespace protobuf
PROTOBUF_NAMESPACE_OPEN
template<>
PROTOBUF_NOINLINE ::protobuf::MessageOfSweeper*
    Arena::CreateMaybeMessage<::protobuf::MessageOfSweeper>(Arena* arena)
{
    return Arena::CreateMessageInternal<::protobuf::MessageOfSweeper>(arena);
}
template<>
PROTOBUF_NOINLINE ::protobuf::MessageOfBullet*
    Arena::CreateMaybeMessage<::protobuf::MessageOfBullet>(Arena* arena)
{
    return Arena::CreateMessageInternal<::protobuf::MessageOfBullet>(arena);
}
template<>
PROTOBUF_NOINLINE ::protobuf::MessageOfBombedBullet*
    Arena::CreateMaybeMessage<::protobuf::MessageOfBombedBullet>(Arena* arena)
{
    return Arena::CreateMessageInternal<::protobuf::MessageOfBombedBullet>(arena);
}
template<>
PROTOBUF_NOINLINE ::protobuf::MessageOfRecycleBank*
    Arena::CreateMaybeMessage<::protobuf::MessageOfRecycleBank>(Arena* arena)
{
    return Arena::CreateMessageInternal<::protobuf::MessageOfRecycleBank>(arena);
}
template<>
PROTOBUF_NOINLINE ::protobuf::MessageOfChargeStation*
    Arena::CreateMaybeMessage<::protobuf::MessageOfChargeStation>(Arena* arena)
{
    return Arena::CreateMessageInternal<::protobuf::MessageOfChargeStation>(arena);
}
template<>
PROTOBUF_NOINLINE ::protobuf::MessageOfSignalTower*
    Arena::CreateMaybeMessage<::protobuf::MessageOfSignalTower>(Arena* arena)
{
    return Arena::CreateMessageInternal<::protobuf::MessageOfSignalTower>(arena);
}
template<>
PROTOBUF_NOINLINE ::protobuf::MessageOfBridge*
    Arena::CreateMaybeMessage<::protobuf::MessageOfBridge>(Arena* arena)
{
    return Arena::CreateMessageInternal<::protobuf::MessageOfBridge>(arena);
}
template<>
PROTOBUF_NOINLINE ::protobuf::MessageOfGarbage*
    Arena::CreateMaybeMessage<::protobuf::MessageOfGarbage>(Arena* arena)
{
    return Arena::CreateMessageInternal<::protobuf::MessageOfGarbage>(arena);
}
template<>
PROTOBUF_NOINLINE ::protobuf::MessageOfHome*
    Arena::CreateMaybeMessage<::protobuf::MessageOfHome>(Arena* arena)
{
    return Arena::CreateMessageInternal<::protobuf::MessageOfHome>(arena);
}
template<>
PROTOBUF_NOINLINE ::protobuf::MessageOfMap_Row*
    Arena::CreateMaybeMessage<::protobuf::MessageOfMap_Row>(Arena* arena)
{
    return Arena::CreateMessageInternal<::protobuf::MessageOfMap_Row>(arena);
}
template<>
PROTOBUF_NOINLINE ::protobuf::MessageOfMap*
    Arena::CreateMaybeMessage<::protobuf::MessageOfMap>(Arena* arena)
{
    return Arena::CreateMessageInternal<::protobuf::MessageOfMap>(arena);
}
template<>
PROTOBUF_NOINLINE ::protobuf::MessageOfTeam*
    Arena::CreateMaybeMessage<::protobuf::MessageOfTeam>(Arena* arena)
{
    return Arena::CreateMessageInternal<::protobuf::MessageOfTeam>(arena);
}
template<>
PROTOBUF_NOINLINE ::protobuf::MessageOfObj*
    Arena::CreateMaybeMessage<::protobuf::MessageOfObj>(Arena* arena)
{
    return Arena::CreateMessageInternal<::protobuf::MessageOfObj>(arena);
}
template<>
PROTOBUF_NOINLINE ::protobuf::MessageOfAll*
    Arena::CreateMaybeMessage<::protobuf::MessageOfAll>(Arena* arena)
{
    return Arena::CreateMessageInternal<::protobuf::MessageOfAll>(arena);
}
template<>
PROTOBUF_NOINLINE ::protobuf::MessageToClient*
    Arena::CreateMaybeMessage<::protobuf::MessageToClient>(Arena* arena)
{
    return Arena::CreateMessageInternal<::protobuf::MessageToClient>(arena);
}
template<>
PROTOBUF_NOINLINE ::protobuf::MoveRes*
    Arena::CreateMaybeMessage<::protobuf::MoveRes>(Arena* arena)
{
    return Arena::CreateMessageInternal<::protobuf::MoveRes>(arena);
}
template<>
PROTOBUF_NOINLINE ::protobuf::BoolRes*
    Arena::CreateMaybeMessage<::protobuf::BoolRes>(Arena* arena)
{
    return Arena::CreateMessageInternal<::protobuf::BoolRes>(arena);
}
template<>
PROTOBUF_NOINLINE ::protobuf::SweeperInfoRes*
    Arena::CreateMaybeMessage<::protobuf::SweeperInfoRes>(Arena* arena)
{
    return Arena::CreateMessageInternal<::protobuf::SweeperInfoRes>(arena);
}
template<>
PROTOBUF_NOINLINE ::protobuf::EcoRes*
    Arena::CreateMaybeMessage<::protobuf::EcoRes>(Arena* arena)
{
    return Arena::CreateMessageInternal<::protobuf::EcoRes>(arena);
}
template<>
PROTOBUF_NOINLINE ::protobuf::MessageOfNews*
    Arena::CreateMaybeMessage<::protobuf::MessageOfNews>(Arena* arena)
{
    return Arena::CreateMessageInternal<::protobuf::MessageOfNews>(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
